<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RinglyPro - Reset Password</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        .gradient-bg {
            background: linear-gradient(135deg, #4f46e5 0%, #3b82f6 100%);
        }
        .glass-effect {
            backdrop-filter: blur(16px) saturate(180%);
            -webkit-backdrop-filter: blur(16px) saturate(180%);
            background-color: rgba(255, 255, 255, 0.75);
            border: 1px solid rgba(209, 213, 219, 0.3);
        }
        .password-strength {
            height: 4px;
            background: #e5e7eb;
            border-radius: 2px;
            overflow: hidden;
            margin-top: 8px;
        }
        .password-strength-bar {
            height: 100%;
            transition: all 0.3s ease;
            border-radius: 2px;
        }
    </style>
</head>
<body class="gradient-bg min-h-screen flex items-center justify-center p-4">
    <div class="max-w-md w-full">
        <!-- Logo and Header -->
        <div class="text-center mb-8">
            <div class="mx-auto w-16 h-16 bg-white rounded-full flex items-center justify-center mb-4 shadow-lg">
                <i class="fas fa-lock text-2xl text-blue-600"></i>
            </div>
            <h1 class="text-3xl font-bold text-white mb-2">Reset Your Password</h1>
            <p class="text-blue-100">Enter your new password below</p>
        </div>

        <!-- Loading State -->
        <div id="loadingCard" class="glass-effect rounded-2xl shadow-2xl p-8 text-center">
            <i class="fas fa-spinner fa-spin text-4xl text-blue-600 mb-4"></i>
            <p class="text-gray-600">Verifying your reset link...</p>
        </div>

        <!-- Reset Password Form -->
        <div id="formCard" class="hidden glass-effect rounded-2xl shadow-2xl p-8">
            <div class="mb-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                <p class="text-sm text-blue-800">
                    <i class="fas fa-info-circle mr-1"></i>
                    Resetting password for: <strong id="userEmail"></strong>
                </p>
            </div>

            <form id="resetPasswordForm" class="space-y-4">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">New Password</label>
                    <div class="relative">
                        <i class="fas fa-lock absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"></i>
                        <input
                            type="password"
                            id="password"
                            class="pl-10 w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                            placeholder="Enter new password"
                            required
                            minlength="8"
                        >
                        <button
                            type="button"
                            onclick="togglePassword('password')"
                            class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600"
                        >
                            <i class="fas fa-eye" id="passwordIcon"></i>
                        </button>
                    </div>
                    <div class="password-strength">
                        <div id="strengthBar" class="password-strength-bar" style="width: 0%; background: #e5e7eb;"></div>
                    </div>
                    <p id="strengthText" class="text-xs text-gray-600 mt-1"></p>
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Confirm New Password</label>
                    <div class="relative">
                        <i class="fas fa-lock absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"></i>
                        <input
                            type="password"
                            id="confirmPassword"
                            class="pl-10 w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                            placeholder="Confirm new password"
                            required
                            minlength="8"
                        >
                        <button
                            type="button"
                            onclick="togglePassword('confirmPassword')"
                            class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600"
                        >
                            <i class="fas fa-eye" id="confirmPasswordIcon"></i>
                        </button>
                    </div>
                </div>

                <!-- Password Requirements -->
                <div class="bg-gray-50 border border-gray-200 rounded-lg p-3">
                    <p class="text-xs font-semibold text-gray-700 mb-2">Password Requirements:</p>
                    <ul class="text-xs text-gray-600 space-y-1">
                        <li id="req-length" class="flex items-center gap-2">
                            <i class="fas fa-circle text-gray-400" style="font-size: 6px;"></i>
                            At least 8 characters
                        </li>
                        <li id="req-match" class="flex items-center gap-2">
                            <i class="fas fa-circle text-gray-400" style="font-size: 6px;"></i>
                            Passwords match
                        </li>
                    </ul>
                </div>

                <!-- Error Message -->
                <div id="errorMessage" class="hidden bg-red-50 border border-red-200 text-red-800 px-4 py-3 rounded-lg text-sm">
                    <i class="fas fa-exclamation-circle mr-2"></i>
                    <span id="errorText"></span>
                </div>

                <button
                    type="submit"
                    id="submitBtn"
                    class="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-4 rounded-lg transition duration-300 transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none"
                >
                    Reset Password
                </button>
            </form>
        </div>

        <!-- Success Card -->
        <div id="successCard" class="hidden glass-effect rounded-2xl shadow-2xl p-8">
            <div class="text-center">
                <div class="mx-auto w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mb-4">
                    <i class="fas fa-check text-2xl text-green-600"></i>
                </div>
                <h2 class="text-xl font-bold text-gray-800 mb-2">Password Reset Successful!</h2>
                <p class="text-gray-600 mb-6">
                    Your password has been successfully reset. You can now sign in with your new password.
                </p>
                <button
                    onclick="window.location.href='/login'"
                    class="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-4 rounded-lg transition duration-300"
                >
                    Go to Sign In
                </button>
            </div>
        </div>

        <!-- Error Card (Invalid/Expired Token) -->
        <div id="errorCard" class="hidden glass-effect rounded-2xl shadow-2xl p-8">
            <div class="text-center">
                <div class="mx-auto w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mb-4">
                    <i class="fas fa-times text-2xl text-red-600"></i>
                </div>
                <h2 class="text-xl font-bold text-gray-800 mb-2">Invalid or Expired Link</h2>
                <p class="text-gray-600 mb-6" id="errorCardMessage">
                    This password reset link is invalid or has expired. Please request a new password reset.
                </p>
                <div class="space-y-3">
                    <button
                        onclick="window.location.href='/forgot-password'"
                        class="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-4 rounded-lg transition duration-300"
                    >
                        Request New Reset Link
                    </button>
                    <button
                        onclick="window.location.href='/login'"
                        class="w-full bg-gray-200 hover:bg-gray-300 text-gray-700 font-bold py-3 px-4 rounded-lg transition duration-300"
                    >
                        Back to Sign In
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        const loadingCard = document.getElementById('loadingCard');
        const formCard = document.getElementById('formCard');
        const successCard = document.getElementById('successCard');
        const errorCard = document.getElementById('errorCard');
        const resetPasswordForm = document.getElementById('resetPasswordForm');
        const submitBtn = document.getElementById('submitBtn');
        const errorMessage = document.getElementById('errorMessage');
        const errorText = document.getElementById('errorText');
        const passwordInput = document.getElementById('password');
        const confirmPasswordInput = document.getElementById('confirmPassword');
        const strengthBar = document.getElementById('strengthBar');
        const strengthText = document.getElementById('strengthText');

        let resetToken = null;

        // Check if already logged in
        if (localStorage.getItem('token')) {
            window.location.href = '/';
        }

        // Get token from URL
        const urlParams = new URLSearchParams(window.location.search);
        resetToken = urlParams.get('token');

        if (!resetToken) {
            showErrorCard('No reset token provided');
        } else {
            verifyToken();
        }

        // Verify token is valid
        async function verifyToken() {
            try {
                const response = await fetch(`/api/auth/verify-reset-token/${resetToken}`);
                const data = await response.json();

                if (response.ok && data.valid) {
                    // Token is valid - show form
                    document.getElementById('userEmail').textContent = data.email;
                    loadingCard.classList.add('hidden');
                    formCard.classList.remove('hidden');
                    passwordInput.focus();
                } else {
                    // Token is invalid or expired
                    showErrorCard(data.error || 'Invalid or expired reset token');
                }
            } catch (error) {
                console.error('Token verification error:', error);
                showErrorCard('Failed to verify reset token');
            }
        }

        // Handle form submission
        resetPasswordForm.addEventListener('submit', async (e) => {
            e.preventDefault();

            const password = passwordInput.value;
            const confirmPassword = confirmPasswordInput.value;

            // Validate password
            if (password.length < 8) {
                showError('Password must be at least 8 characters long');
                return;
            }

            if (password !== confirmPassword) {
                showError('Passwords do not match');
                return;
            }

            // Disable button and show loading
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Resetting...';

            // Hide previous errors
            errorMessage.classList.add('hidden');

            try {
                const response = await fetch('/api/auth/reset-password', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        token: resetToken,
                        newPassword: password
                    })
                });

                const data = await response.json();

                if (response.ok && data.success) {
                    // Show success card
                    formCard.classList.add('hidden');
                    successCard.classList.remove('hidden');
                } else {
                    // Show error message
                    showError(data.error || 'Failed to reset password. Please try again.');

                    // Re-enable button
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = 'Reset Password';
                }
            } catch (error) {
                console.error('Reset password error:', error);
                showError('Network error. Please check your connection and try again.');

                // Re-enable button
                submitBtn.disabled = false;
                submitBtn.innerHTML = 'Reset Password';
            }
        });

        // Password strength indicator
        passwordInput.addEventListener('input', function() {
            const password = this.value;
            let strength = 0;

            if (password.length >= 8) strength += 25;
            if (password.length >= 12) strength += 25;
            if (/[a-z]/.test(password) && /[A-Z]/.test(password)) strength += 25;
            if (/\d/.test(password) && /[!@#$%^&*]/.test(password)) strength += 25;

            strengthBar.style.width = strength + '%';

            if (strength <= 25) {
                strengthBar.style.background = '#ef4444';
                strengthText.textContent = 'Weak password';
                strengthText.className = 'text-xs text-red-600 mt-1';
            } else if (strength <= 50) {
                strengthBar.style.background = '#f59e0b';
                strengthText.textContent = 'Fair password';
                strengthText.className = 'text-xs text-orange-600 mt-1';
            } else if (strength <= 75) {
                strengthBar.style.background = '#3b82f6';
                strengthText.textContent = 'Good password';
                strengthText.className = 'text-xs text-blue-600 mt-1';
            } else {
                strengthBar.style.background = '#10b981';
                strengthText.textContent = 'Strong password';
                strengthText.className = 'text-xs text-green-600 mt-1';
            }

            updateRequirements();
        });

        // Update confirm password validation
        confirmPasswordInput.addEventListener('input', updateRequirements);

        function updateRequirements() {
            const password = passwordInput.value;
            const confirmPassword = confirmPasswordInput.value;

            // Length requirement
            const lengthReq = document.getElementById('req-length');
            if (password.length >= 8) {
                lengthReq.innerHTML = '<i class="fas fa-check-circle text-green-600"></i> At least 8 characters';
            } else {
                lengthReq.innerHTML = '<i class="fas fa-circle text-gray-400" style="font-size: 6px;"></i> At least 8 characters';
            }

            // Match requirement
            const matchReq = document.getElementById('req-match');
            if (password && confirmPassword && password === confirmPassword) {
                matchReq.innerHTML = '<i class="fas fa-check-circle text-green-600"></i> Passwords match';
            } else {
                matchReq.innerHTML = '<i class="fas fa-circle text-gray-400" style="font-size: 6px;"></i> Passwords match';
            }
        }

        function showError(message) {
            errorText.textContent = message;
            errorMessage.classList.remove('hidden');
        }

        function showErrorCard(message) {
            document.getElementById('errorCardMessage').textContent = message;
            loadingCard.classList.add('hidden');
            errorCard.classList.remove('hidden');
        }

        function togglePassword(fieldId) {
            const field = document.getElementById(fieldId);
            const icon = document.getElementById(fieldId + 'Icon');

            if (field.type === 'password') {
                field.type = 'text';
                icon.classList.remove('fa-eye');
                icon.classList.add('fa-eye-slash');
            } else {
                field.type = 'password';
                icon.classList.remove('fa-eye-slash');
                icon.classList.add('fa-eye');
            }
        }
    </script>
</body>
</html>
