<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RinglyPro CRM - Professional Customer Management</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            --primary-color: #2563eb;
            --secondary-color: #10b981;
            --background-color: #f3f4f6;
            --card-background: #ffffff;
            --text-primary: #111827;
            --text-secondary: #6b7280;
            --border-color: #e5e7eb;
        }

        [data-theme="dark"] {
            --primary-color: #3b82f6;
            --secondary-color: #10b981;
            --background-color: #111827;
            --card-background: #1f2937;
            --text-primary: #f9fafb;
            --text-secondary: #d1d5db;
            --border-color: #374151;
        }

        body {
            background-color: var(--background-color);
            color: var(--text-primary);
            transition: background-color 0.3s ease, color 0.3s ease;
        }

        .card {
            background-color: var(--card-background);
            border-color: var(--border-color);
            transition: all 0.3s ease;
        }

        .collapse-content {
            transition: all 0.3s ease-in-out;
            overflow: hidden;
        }
        .collapsed {
            max-height: 0;
            opacity: 0;
            padding-top: 0;
            padding-bottom: 0;
        }
        .expanded {
            max-height: 1000px;
            opacity: 1;
        }
        .collapse-btn {
            transition: transform 0.3s ease-in-out;
        }
        .collapsed .collapse-btn {
            transform: rotate(-90deg);
        }
        .section-header:hover {
            background-color: var(--background-color);
        }
        .border-3 {
            border-width: 3px;
        }
        
        /* Enhanced animations */
        .fade-in {
            animation: fadeIn 0.5s ease-in;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .slide-up {
            animation: slideUp 0.3s ease-out;
        }
        @keyframes slideUp {
            from { transform: translateY(100%); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }

        .card-hover {
            transition: all 0.3s ease;
        }
        .card-hover:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        }

        /* Toast notifications */
        .toast-container {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1000;
            pointer-events: none;
        }

        .toast {
            background: white;
            border-radius: 8px;
            padding: 16px;
            margin-bottom: 12px;
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
            border-left: 4px solid;
            max-width: 400px;
            pointer-events: all;
            transform: translateX(400px);
            transition: transform 0.3s ease;
        }

        .toast.show {
            transform: translateX(0);
        }

        .toast.success { border-left-color: #10b981; }
        .toast.error { border-left-color: #ef4444; }
        .toast.warning { border-left-color: #f59e0b; }
        .toast.info { border-left-color: #3b82f6; }

        /* Mobile sticky action bar */
        .mobile-action-bar {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            background: var(--card-background);
            border-top: 1px solid var(--border-color);
            padding: 12px;
            z-index: 100;
            display: none;
            box-shadow: 0 -4px 6px -1px rgba(0, 0, 0, 0.1);
        }

        @media (max-width: 768px) {
            .mobile-action-bar {
                display: block;
            }
            body {
                padding-bottom: 80px;
            }
        }

        /* KPI metrics styling */
        .kpi-card {
            background: linear-gradient(135deg, var(--primary-color), #1d4ed8);
            color: white;
        }

        /* Dark mode specific styles */
        [data-theme="dark"] .toast {
            background: var(--card-background);
            color: var(--text-primary);
            border-color: var(--border-color);
        }

        [data-theme="dark"] .mobile-action-bar {
            background: var(--card-background);
            border-color: var(--border-color);
        }

        /* Fix for voice indicator animation */
        .animate-pulse {
            animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
        }
        @keyframes pulse {
            0%, 100% {
                opacity: 1;
            }
            50% {
                opacity: .5;
            }
        }

        /* Force button visibility - override any conflicting styles */
        #update-email-submit-btn {
            background-color: #f97316 !important;
            color: white !important;
            opacity: 1 !important;
            border: none !important;
            display: flex !important;
            align-items: center !important;
            justify-content: center !important;
        }

        #update-email-submit-btn:hover {
            background-color: #ea580c !important;
        }

        #update-email-submit-btn:disabled {
            background-color: #9ca3af !important;
            cursor: not-allowed !important;
        }

        /* Ensure all modal buttons are visible */
        .card button[type="submit"] {
            background-color: #f97316 !important;
            color: white !important;
            opacity: 1 !important;
        }

        .card button[type="button"] {
            background-color: #d1d5db !important;
            color: #374151 !important;
            opacity: 1 !important;
        }

        /* Fix for dark mode compatibility */
        [data-theme="dark"] #update-email-submit-btn {
            background-color: #f97316 !important;
            color: white !important;
        }

        [data-theme="dark"] .card button[type="button"] {
            background-color: #4b5563 !important;
            color: #f9fafb !important;
        }
    </style>
</head>
<body>
    </head>
<body>
    <!-- Login Overlay - Shows before dashboard -->
    <div id="loginOverlay" class="fixed inset-0 bg-gray-900 bg-opacity-95 flex items-center justify-center z-50">
        <div class="bg-white rounded-lg p-8 w-full max-w-md mx-4 shadow-2xl">
            <div class="text-center mb-6">
                <img src="https://assets.cdn.filesafe.space/3lSeAHXNU9t09Hhp9oai/media/68a15064d7c434d8cab7644b.png" 
                     alt="RinglyPro Logo" 
                     class="w-16 h-16 object-contain bg-white rounded-lg shadow-lg p-2 mx-auto mb-4">
                <h2 class="text-2xl font-bold text-gray-800">RinglyPro Login</h2>
                <p class="text-gray-600">Sign in to access your CRM dashboard</p>
            </div>
            
            <form id="loginForm">
                <div class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Email</label>
                        <input type="email" id="loginEmail" required
                               class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                               placeholder="Enter your email">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Password</label>
                        <input type="password" id="loginPassword" required
                               class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                               placeholder="Enter your password">
                    </div>
                    <button type="submit" id="loginButton"
                            class="w-full bg-blue-600 hover:bg-blue-700 text-white px-4 py-3 rounded-lg font-medium">
                        Sign In
                    </button>
                </div>
            </form>
            
            <div id="loginStatus" class="mt-4 p-3 rounded hidden"></div>
            
            <div class="mt-6 text-center text-sm text-gray-500">
                <p>Demo credentials:</p>
                <p><strong>Email:</strong> test@example.com</p>
                <p><strong>Password:</strong> testpassword123</p>
            </div>
        </div>
    </div>

    <!-- Toast Container -->
    <div class="toast-container" id="toastContainer"></div>

<!-- Header with Mobile Hamburger Menu -->
<header class="bg-blue-600 text-white shadow-lg">
    <div class="container mx-auto px-4 py-4">
        <div class="flex items-center justify-between">
            <div class="flex items-center space-x-4">
                <!-- RinglyPro Logo -->
                <div class="flex items-center space-x-2">
                    <div class="relative">
                        <img src="https://assets.cdn.filesafe.space/3lSeAHXNU9t09Hhp9oai/media/68a15064d7c434d8cab7644b.png" 
                             alt="RinglyPro Logo" 
                             class="w-12 h-12 md:w-16 md:h-16 object-contain bg-white rounded-lg shadow-lg p-2">
                    </div>
                    <div class="text-xl md:text-2xl font-bold">
                        <span class="text-white">Ringly</span><span class="text-blue-200">Pro</span>
                    </div>
                </div>
            </div>
            
            <!-- Desktop Menu - Hidden on Mobile -->
            <div class="hidden md:flex items-center space-x-4">
                <button onclick="exportContacts()" class="bg-green-500 hover:bg-green-600 text-white px-3 py-1 rounded-full text-sm transition duration-200">
                    <i class="fas fa-download mr-1"></i> Export
                </button>
                <button onclick="refreshData()" class="bg-blue-500 hover:bg-blue-600 text-white px-3 py-1 rounded-full text-sm transition duration-200">
                    <i class="fas fa-sync-alt mr-1"></i> Refresh
                </button>
                <button onclick="toggleAllSections()" class="bg-purple-500 hover:bg-purple-600 text-white px-3 py-1 rounded-full text-sm transition duration-200">
                    <i class="fas fa-expand-arrows-alt mr-1"></i> <span id="toggle-all-text">Expand All</span>
                </button>
                <button onclick="toggleDarkMode()" class="bg-gray-700 hover:bg-gray-800 text-white px-3 py-1 rounded-full text-sm transition duration-200">
                    <i id="theme-icon" class="fas fa-moon mr-1"></i> <span id="theme-text">Dark</span>
                </button>
            </div>
            
            <!-- Mobile Hamburger Button - Only Visible on Mobile -->
            <div class="md:hidden">
                <button onclick="toggleMobileMenu()" id="mobile-menu-button" class="p-2 rounded-md hover:bg-blue-700 focus:outline-none focus:bg-blue-700 transition duration-200">
                    <i id="hamburger-icon" class="fas fa-bars text-xl"></i>
                </button>
            </div>
        </div>
    </div>
    
    <!-- Desktop Quick Actions Menu Bar - Hidden on Mobile -->
    <div class="hidden md:block bg-blue-700 border-t border-blue-500">
        <div class="container mx-auto px-4 py-2">
            <div class="flex items-center justify-between flex-wrap gap-2">
                <div class="flex items-center space-x-1 flex-wrap">
                    <!-- Contacts Dropdown -->
                    <div class="relative" id="contacts-dropdown">
                        <button onclick="toggleDropdown('contacts')" class="flex items-center px-3 py-2 rounded text-sm hover:bg-blue-600 transition duration-200">
                            <i class="fas fa-users mr-2"></i>Contacts
                            <i class="fas fa-chevron-down ml-1 text-xs"></i>
                        </button>
                        <div id="contacts-menu" class="hidden absolute left-0 mt-1 w-64 bg-white rounded-lg shadow-lg z-50 border card">
                            <div class="py-2">
                                <button onclick="showQuickCreateContact()" class="w-full text-left px-4 py-2 text-gray-700 hover:bg-gray-100 flex items-center">
                                    <i class="fas fa-user-plus text-green-500 mr-3"></i>Create New Contact
                                </button>
                                <button onclick="showQuickSearchContact()" class="w-full text-left px-4 py-2 text-gray-700 hover:bg-gray-100 flex items-center">
                                    <i class="fas fa-search text-blue-500 mr-3"></i>Search Contact
                                </button>
                                <button onclick="showQuickUpdateEmail()" class="w-full text-left px-4 py-2 text-gray-700 hover:bg-gray-100 flex items-center">
                                    <i class="fas fa-envelope text-orange-500 mr-3"></i>Update Email
                                </button>
                                <button onclick="showQuickUpdatePhone()" class="w-full text-left px-4 py-2 text-gray-700 hover:bg-gray-100 flex items-center">
                                    <i class="fas fa-phone text-purple-500 mr-3"></i>Update Phone
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Appointments Dropdown -->
                    <div class="relative" id="appointments-dropdown">
                        <button onclick="toggleDropdown('appointments')" class="flex items-center px-3 py-2 rounded text-sm hover:bg-blue-600 transition duration-200">
                            <i class="fas fa-calendar mr-2"></i>Appointments
                            <i class="fas fa-chevron-down ml-1 text-xs"></i>
                        </button>
                        <div id="appointments-menu" class="hidden absolute left-0 mt-1 w-64 bg-white rounded-lg shadow-lg z-50 border card">
                            <div class="py-2">
                                <button onclick="showQuickCreateAppointment()" class="w-full text-left px-4 py-2 text-gray-700 hover:bg-gray-100 flex items-center">
                                    <i class="fas fa-calendar-plus text-green-500 mr-3"></i>Create Appointment
                                </button>
                                <button onclick="showTodaysAppointments()" class="w-full text-left px-4 py-2 text-gray-700 hover:bg-gray-100 flex items-center">
                                    <i class="fas fa-clock text-blue-500 mr-3"></i>Today's Appointments
                                </button>
                                <button onclick="showQuickUpdateAppointment()" class="w-full text-left px-4 py-2 text-gray-700 hover:bg-gray-100 flex items-center">
                                    <i class="fas fa-edit text-orange-500 mr-3"></i>Update Appointment
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Quick Actions -->
                    <button onclick="showQuickSMS()" class="flex items-center px-3 py-2 rounded text-sm hover:bg-blue-600 transition duration-200">
                        <i class="fas fa-sms mr-2"></i>Quick SMS
                    </button>
                    
                    <button onclick="showQuickEmail()" class="flex items-center px-3 py-2 rounded text-sm hover:bg-blue-600 transition duration-200">
                        <i class="fas fa-envelope mr-2"></i>Quick Email
                    </button>
                </div>
                
                <!-- Voice Command Button -->
                <button onclick="activateVoiceCommand()" class="flex items-center px-3 py-2 bg-green-600 hover:bg-green-700 rounded text-sm transition duration-200">
                    <i class="fas fa-microphone mr-2"></i>Voice Command
                </button>
            </div>
        </div>
    </div>
</header>

<!-- Mobile Menu Overlay - Only visible when hamburger is clicked -->
<div id="mobile-menu-overlay" class="fixed inset-0 bg-black bg-opacity-50 z-40 hidden md:hidden" onclick="closeMobileMenu()"></div>

<!-- Mobile Menu Sidebar - Slides in from right -->
<div id="mobile-menu" class="fixed top-0 right-0 h-full w-80 bg-blue-600 text-white transform translate-x-full transition-transform duration-300 ease-in-out z-50 md:hidden shadow-2xl">
    <div class="flex flex-col h-full">
        <!-- Mobile Menu Header -->
        <div class="flex items-center justify-between p-4 border-b border-blue-500">
            <div class="flex items-center space-x-2">
                <img src="https://assets.cdn.filesafe.space/3lSeAHXNU9t09Hhp9oai/media/68a15064d7c434d8cab7644b.png" 
                     alt="RinglyPro Logo" 
                     class="w-8 h-8 object-contain bg-white rounded-lg p-1">
                <span class="text-lg font-bold">RinglyPro</span>
            </div>
            <button onclick="closeMobileMenu()" class="p-2 rounded-md hover:bg-blue-700 focus:outline-none transition duration-200">
                <i class="fas fa-times text-lg"></i>
            </button>
        </div>
        
        <!-- Mobile Menu Content -->
        <div class="flex-1 overflow-y-auto">
            <!-- Quick Actions Section -->
            <div class="p-4 border-b border-blue-500">
                <h3 class="text-sm font-semibold text-blue-200 uppercase tracking-wider mb-3">Quick Actions</h3>
                <div class="space-y-2">
                    <button onclick="showQuickCreateContact(); closeMobileMenu();" class="w-full flex items-center px-3 py-3 rounded-lg hover:bg-blue-700 transition duration-200">
                        <i class="fas fa-user-plus text-green-400 mr-3 w-5"></i>
                        <span>Create Contact</span>
                    </button>
                    <button onclick="showQuickSearchContact(); closeMobileMenu();" class="w-full flex items-center px-3 py-3 rounded-lg hover:bg-blue-700 transition duration-200">
                        <i class="fas fa-search text-blue-400 mr-3 w-5"></i>
                        <span>Search Contact</span>
                    </button>
                    <button onclick="showQuickCreateAppointment(); closeMobileMenu();" class="w-full flex items-center px-3 py-3 rounded-lg hover:bg-blue-700 transition duration-200">
                        <i class="fas fa-calendar-plus text-green-400 mr-3 w-5"></i>
                        <span>Create Appointment</span>
                    </button>
                    <button onclick="showQuickSMS(); closeMobileMenu();" class="w-full flex items-center px-3 py-3 rounded-lg hover:bg-blue-700 transition duration-200">
                        <i class="fas fa-sms text-purple-400 mr-3 w-5"></i>
                        <span>Quick SMS</span>
                    </button>
                    <button onclick="showQuickEmail(); closeMobileMenu();" class="w-full flex items-center px-3 py-3 rounded-lg hover:bg-blue-700 transition duration-200">
                        <i class="fas fa-envelope text-orange-400 mr-3 w-5"></i>
                        <span>Quick Email</span>
                    </button>
                    <button onclick="activateVoiceCommand(); closeMobileMenu();" class="w-full flex items-center px-3 py-3 rounded-lg hover:bg-blue-700 transition duration-200">
                        <i class="fas fa-microphone text-green-400 mr-3 w-5"></i>
                        <span>Voice Command</span>
                    </button>
                </div>
            </div>
            
            <!-- Contact Actions Section -->
            <div class="p-4 border-b border-blue-500">
                <h3 class="text-sm font-semibold text-blue-200 uppercase tracking-wider mb-3">Contact Management</h3>
                <div class="space-y-2">
                    <button onclick="showQuickUpdateEmail(); closeMobileMenu();" class="w-full flex items-center px-3 py-3 rounded-lg hover:bg-blue-700 transition duration-200">
                        <i class="fas fa-envelope text-orange-400 mr-3 w-5"></i>
                        <span>Update Email</span>
                    </button>
                    <button onclick="showQuickUpdatePhone(); closeMobileMenu();" class="w-full flex items-center px-3 py-3 rounded-lg hover:bg-blue-700 transition duration-200">
                        <i class="fas fa-phone text-purple-400 mr-3 w-5"></i>
                        <span>Update Phone</span>
                    </button>
                    <button onclick="showTodaysAppointments(); closeMobileMenu();" class="w-full flex items-center px-3 py-3 rounded-lg hover:bg-blue-700 transition duration-200">
                        <i class="fas fa-clock text-blue-400 mr-3 w-5"></i>
                        <span>Today's Appointments</span>
                    </button>
                </div>
            </div>
            
            <!-- System Actions Section -->
            <div class="p-4">
                <h3 class="text-sm font-semibold text-blue-200 uppercase tracking-wider mb-3">System</h3>
                <div class="space-y-2">
                    <button onclick="exportContacts(); closeMobileMenu();" class="w-full flex items-center px-3 py-3 rounded-lg hover:bg-blue-700 transition duration-200">
                        <i class="fas fa-download text-green-400 mr-3 w-5"></i>
                        <span>Export Data</span>
                    </button>
                    <button onclick="refreshData(); closeMobileMenu();" class="w-full flex items-center px-3 py-3 rounded-lg hover:bg-blue-700 transition duration-200">
                        <i class="fas fa-sync-alt text-blue-400 mr-3 w-5"></i>
                        <span>Refresh Data</span>
                    </button>
                    <button onclick="toggleAllSections(); closeMobileMenu();" class="w-full flex items-center px-3 py-3 rounded-lg hover:bg-blue-700 transition duration-200">
                        <i class="fas fa-expand-arrows-alt text-purple-400 mr-3 w-5"></i>
                        <span id="mobile-toggle-all-text">Expand All</span>
                    </button>
                    <button onclick="toggleDarkMode(); updateMobileThemeText();" class="w-full flex items-center px-3 py-3 rounded-lg hover:bg-blue-700 transition duration-200">
                        <i id="mobile-theme-icon" class="fas fa-moon text-yellow-400 mr-3 w-5"></i>
                        <span id="mobile-theme-text">Dark Mode</span>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

    <div class="container mx-auto px-4 py-8">
        <!-- KPI Metrics Bar -->
<!-- KPI Metrics Bar -->
        <div class="grid grid-cols-2 md:grid-cols-5 gap-4 mb-8 fade-in">
            <div class="bg-blue-600 rounded-lg p-4 text-center text-white">
                <div class="text-2xl font-bold" id="kpi-total-contacts">0</div>
                <div class="text-sm opacity-90">Total Contacts</div>
                <div class="text-xs opacity-75 mt-1">
                    <i class="fas fa-arrow-up mr-1"></i><span>+5.2%</span>
                </div>
            </div>
            <div class="bg-green-500 rounded-lg p-4 text-center text-white">
                <div class="text-2xl font-bold" id="kpi-appointments">0</div>
                <div class="text-sm opacity-90">Appointments</div>
                <div class="text-xs opacity-75 mt-1">
                    <i class="fas fa-arrow-up mr-1"></i><span>+12.1%</span>
                </div>
            </div>
            <div class="bg-purple-500 rounded-lg p-4 text-center text-white">
                <div class="text-2xl font-bold" id="kpi-messages">0</div>
                <div class="text-sm opacity-90">Messages Sent</div>
                <div class="text-xs opacity-75 mt-1">
                    <i class="fas fa-arrow-up mr-1"></i><span>+8.7%</span>
                </div>
            </div>
            <div class="bg-yellow-500 rounded-lg p-4 text-center text-white">
                <div class="text-2xl font-bold">89%</div>
                <div class="text-sm opacity-90">Response Rate</div>
                <div class="text-xs opacity-75 mt-1">
                    <i class="fas fa-arrow-up mr-1"></i><span>+3.1%</span>
                </div>
            </div>
            <div class="bg-orange-500 rounded-lg p-4 text-center text-white relative">
                <div class="text-2xl font-bold" id="kpi-credit-balance">$0.00</div>
                <div class="text-sm opacity-90">Credit Balance</div>
                <div class="text-xs opacity-75 mt-1" id="kpi-credit-info">
                    <i class="fas fa-clock mr-1"></i><span id="kpi-free-minutes">100/100 free</span>
                </div>
                <button onclick="showReloadCreditsModal()" class="absolute top-2 right-2 bg-white bg-opacity-20 hover:bg-opacity-30 text-white px-2 py-1 rounded text-xs transition duration-200">
                    <i class="fas fa-plus"></i> Add
                </button>
            </div>
        </div>

        <!-- Quick Action Modals -->
        
        <!-- Quick Create Contact Modal -->
        <div id="quickCreateContactModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
            <div class="card rounded-lg p-6 w-full max-w-md mx-4">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold text-gray-900">Quick Create Contact</h3>
                    <button onclick="closeModal('quickCreateContactModal')" class="text-gray-400 hover:text-gray-600">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <form id="quickCreateForm" class="space-y-4">
                    <div class="grid grid-cols-2 gap-4">
                        <input type="text" id="quickFirstName" placeholder="First Name" required
                               class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                        <input type="text" id="quickLastName" placeholder="Last Name" required
                               class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                    </div>
                    <input type="email" id="quickEmail" placeholder="Email" required
                           class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                    <input type="tel" id="quickPhone" placeholder="Phone" required
                           class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                    <input type="text" id="quickCompany" placeholder="Company (optional)"
                           class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                    <div class="flex space-x-3">
                        <button type="submit" class="flex-1 bg-blue-500 hover:bg-blue-600 text-white px-4 py-3 rounded-lg">
                            <i class="fas fa-plus mr-2"></i>Create Contact
                        </button>
                        <button type="button" onclick="closeModal('quickCreateContactModal')" class="flex-1 bg-gray-300 hover:bg-gray-400 text-gray-700 px-4 py-3 rounded-lg">
                            Cancel
                        </button>
                    </div>
                </form>
                <div id="quickCreateStatus" class="mt-4 p-3 rounded hidden"></div>
            </div>
        </div>

        <!-- Quick Search Contact Modal -->
        <div id="quickSearchContactModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
            <div class="card rounded-lg p-6 w-full max-w-lg mx-4">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold text-gray-900">Search Contact</h3>
                    <button onclick="closeModal('quickSearchContactModal')" class="text-gray-400 hover:text-gray-600">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="space-y-4">
                    <input type="text" id="quickSearchInput" placeholder="Search by name, email, or phone..."
                           class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                    <button onclick="performQuickSearch()" class="w-full bg-blue-500 hover:bg-blue-600 text-white px-4 py-3 rounded-lg">
                        <i class="fas fa-search mr-2"></i>Search
                    </button>
                    <div id="quickSearchResults" class="space-y-2 max-h-64 overflow-y-auto"></div>
                </div>
            </div>
        </div>

        <!-- Quick Update Email Modal -->
        <div id="quickUpdateEmailModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
            <div class="card rounded-lg p-6 w-full max-w-md mx-4">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold text-gray-900">Update Contact Email</h3>
                    <button onclick="closeModal('quickUpdateEmailModal')" class="text-gray-400 hover:text-gray-600">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <form id="quickUpdateEmailForm" class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Select Contact</label>
                        <select id="quickUpdateEmailContactSelect" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500">
                            <option value="">Choose a contact to update...</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Or Enter Contact Name</label>
                        <input type="text" id="quickUpdateEmailName" placeholder="Contact Name" 
                               class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Current Email</label>
                        <input type="email" id="quickUpdateEmailCurrent" placeholder="Current email will appear here" readonly
                               class="w-full p-3 border border-gray-300 rounded-lg bg-gray-50 text-gray-600">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">New Email Address</label>
                        <input type="email" id="quickUpdateEmailValue" placeholder="Enter new email address" required
                               class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500">
                    </div>
                    
                    <div class="flex space-x-3 mt-6">
                        <button 
                            type="submit" 
                            id="update-email-submit-btn"
                            style="background-color: #f97316 !important; color: white !important; opacity: 1 !important; border: none !important;"
                            class="flex-1 px-4 py-3 rounded-lg font-medium transition duration-200 focus:outline-none focus:ring-2 focus:ring-orange-500 hover:bg-orange-600">
                            <i class="fas fa-save mr-2"></i>Update Email
                        </button>
                        <button 
                            type="button" 
                            onclick="closeModal('quickUpdateEmailModal')" 
                            style="background-color: #d1d5db !important; color: #374151 !important; opacity: 1 !important; border: none !important;"
                            class="flex-1 px-4 py-3 rounded-lg font-medium transition duration-200 focus:outline-none focus:ring-2 focus:ring-gray-300 hover:bg-gray-400">
                            <i class="fas fa-times mr-2"></i>Cancel
                        </button>
                    </div>
                </form>
                
                <div id="quickUpdateEmailStatus" class="mt-4 p-3 rounded hidden"></div>
            </div>
        </div>

        <!-- Edit Appointment Modal -->
        <div id="editAppointmentModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
            <div class="card rounded-lg p-6 w-full max-w-md mx-4">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold text-gray-900">Edit Appointment</h3>
                    <button onclick="closeModal('editAppointmentModal')" class="text-gray-400 hover:text-gray-600">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <form id="editAppointmentForm" class="space-y-4">
                    <input type="hidden" id="editAppointmentId">
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Appointment Title</label>
                        <input type="text" id="editAppointmentTitle" placeholder="Appointment Title" required
                               class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Contact Name</label>
                        <input type="text" id="editAppointmentContact" placeholder="Contact Name" required
                               class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                    </div>
                    
                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Date</label>
                            <input type="date" id="editAppointmentDate" required
                                   class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Time</label>
                            <input type="time" id="editAppointmentTime" required
                                   class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                        </div>
                    </div>
                    
                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Duration</label>
                            <select id="editAppointmentDuration" required
                                    class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                                <option value="">Select Duration</option>
                                <option value="15">15 minutes</option>
                                <option value="30">30 minutes</option>
                                <option value="45">45 minutes</option>
                                <option value="60">1 hour</option>
                                <option value="90">1.5 hours</option>
                                <option value="120">2 hours</option>
                            </select>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Status</label>
                            <select id="editAppointmentStatus" required
                                    class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                                <option value="confirmed">Confirmed</option>
                                <option value="pending">Pending</option>
                                <option value="cancelled">Cancelled</option>
                                <option value="completed">Completed</option>
                            </select>
                        </div>
                    </div>
                    
                    <div class="flex space-x-3 mt-6">
                        <button type="submit" 
                                style="background-color: #3b82f6 !important; color: white !important;"
                                class="flex-1 px-4 py-3 rounded-lg font-medium transition duration-200 focus:outline-none hover:bg-blue-600">
                            <i class="fas fa-save mr-2"></i>Update Appointment
                        </button>
                        <button type="button" onclick="closeModal('editAppointmentModal')" 
                                style="background-color: #d1d5db !important; color: #374151 !important;"
                                class="flex-1 px-4 py-3 rounded-lg font-medium transition duration-200 focus:outline-none hover:bg-gray-400">
                            <i class="fas fa-times mr-2"></i>Cancel
                        </button>
                    </div>
                </form>
                
                <div id="editAppointmentFormStatus" class="mt-4 p-3 rounded hidden"></div>
            </div>
        </div>

        <!-- Quick Update Phone Modal -->
        <div id="quickUpdatePhoneModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
            <div class="card rounded-lg p-6 w-full max-w-md mx-4">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold text-gray-900">Update Contact Phone</h3>
                    <button onclick="closeModal('quickUpdatePhoneModal')" class="text-gray-400 hover:text-gray-600">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <form id="quickUpdatePhoneForm" class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Select Contact</label>
                        <select id="quickUpdatePhoneContactSelect" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500">
                            <option value="">Choose a contact to update...</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Or Enter Contact Name</label>
                        <input type="text" id="quickUpdatePhoneName" placeholder="Contact Name" 
                               class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Current Phone</label>
                        <input type="tel" id="quickUpdatePhoneCurrent" placeholder="Current phone will appear here" readonly
                               class="w-full p-3 border border-gray-300 rounded-lg bg-gray-50 text-gray-600">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">New Phone Number</label>
                        <input type="tel" id="quickUpdatePhoneValue" placeholder="Enter new phone number" required
                               class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500">
                    </div>
                    <div class="flex space-x-3">
                        <button type="submit" class="flex-1 bg-purple-500 hover:bg-purple-600 text-white px-4 py-3 rounded-lg">
                            <i class="fas fa-save mr-2"></i>Update Phone
                        </button>
                        <button type="button" onclick="closeModal('quickUpdatePhoneModal')" class="flex-1 bg-gray-300 hover:bg-gray-400 text-gray-700 px-4 py-3 rounded-lg">
                            Cancel
                        </button>
                    </div>
                </form>
                <div id="quickUpdatePhoneStatus" class="mt-4 p-3 rounded hidden"></div>
            </div>
        </div>

        <!-- Quick Create Appointment Modal -->
        <div id="quickCreateAppointmentModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
            <div class="card rounded-lg p-6 w-full max-w-md mx-4">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold text-gray-900">Quick Create Appointment</h3>
                    <button onclick="closeModal('quickCreateAppointmentModal')" class="text-gray-400 hover:text-gray-600">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <form id="quickCreateAppointmentForm" class="space-y-4">
                    <input type="text" id="quickAppointmentTitle" placeholder="Appointment Title" required
                           class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Select Contact</label>
                        <select id="quickAppointmentContactSelect" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                            <option value="">Loading contacts...</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Or Enter Contact Name</label>
                        <input type="text" id="quickAppointmentContact" placeholder="Contact Name"
                               class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                    </div>
                    <div class="grid grid-cols-2 gap-4">
                        <input type="date" id="quickAppointmentDate" required
                               class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                        <input type="time" id="quickAppointmentTime" required
                               class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                    </div>
                    <select id="quickAppointmentDuration" required
                            class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                        <option value="">Select Duration</option>
                        <option value="30">30 minutes</option>
                        <option value="60">1 hour</option>
                        <option value="90">1.5 hours</option>
                        <option value="120">2 hours</option>
                    </select>
                    <div class="flex space-x-3">
                        <button type="submit" class="flex-1 bg-green-500 hover:bg-green-600 text-white px-4 py-3 rounded-lg">
                            <i class="fas fa-calendar-plus mr-2"></i>Create Appointment
                        </button>
                        <button type="button" onclick="closeModal('quickCreateAppointmentModal')" class="flex-1 bg-gray-300 hover:bg-gray-400 text-gray-700 px-4 py-3 rounded-lg">
                            Cancel
                        </button>
                    </div>
                </form>
                <div id="quickCreateAppointmentStatus" class="mt-4 p-3 rounded hidden"></div>
            </div>
        </div>

        <!-- Quick SMS Modal -->
        <div id="quickSMSModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
            <div class="card rounded-lg p-6 w-full max-w-md mx-4">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold text-gray-900">Quick SMS</h3>
                    <button onclick="closeModal('quickSMSModal')" class="text-gray-400 hover:text-gray-600">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <form id="quickSMSForm" class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Select Contact</label>
                        <select id="quickSMSContactSelect" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                            <option value="">Loading contacts...</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Or Enter Phone Number</label>
                        <input type="text" id="quickSMSRecipient" placeholder="Contact Name or Phone Number"
                               class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                    </div>
                    <textarea id="quickSMSMessage" placeholder="Message..." rows="4" required
                              class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"></textarea>
                    <div class="flex space-x-3">
                        <button type="submit" class="flex-1 bg-green-500 hover:bg-green-600 text-white px-4 py-3 rounded-lg">
                            <i class="fas fa-paper-plane mr-2"></i>Send SMS
                        </button>
                        <button type="button" onclick="closeModal('quickSMSModal')" class="flex-1 bg-gray-300 hover:bg-gray-400 text-gray-700 px-4 py-3 rounded-lg">
                            Cancel
                        </button>
                    </div>
                </form>
                <div id="quickSMSStatus" class="mt-4 p-3 rounded hidden"></div>
            </div>
        </div>

        <!-- Quick Email Modal -->
        <div id="quickEmailModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
            <div class="card rounded-lg p-6 w-full max-w-md mx-4">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold text-gray-900">Quick Email</h3>
                    <button onclick="closeModal('quickEmailModal')" class="text-gray-400 hover:text-gray-600">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <form id="quickEmailForm" class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Select Contact</label>
                        <select id="quickEmailContactSelect" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                            <option value="">Loading contacts...</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Or Enter Email</label>
                        <input type="text" id="quickEmailRecipient" placeholder="Contact Name or Email"
                               class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                    </div>
                    <input type="text" id="quickEmailSubject" placeholder="Subject" required
                           class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                    <textarea id="quickEmailMessage" placeholder="Message..." rows="4" required
                              class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"></textarea>
                    <div class="flex space-x-3">
                        <button type="submit" class="flex-1 bg-blue-500 hover:bg-blue-600 text-white px-4 py-3 rounded-lg">
                            <i class="fas fa-envelope mr-2"></i>Send Email
                        </button>
                        <button type="button" onclick="closeModal('quickEmailModal')" class="flex-1 bg-gray-300 hover:bg-gray-400 text-gray-700 px-4 py-3 rounded-lg">
                            Cancel
                        </button>
                    </div>
                </form>
                <div id="quickEmailStatus" class="mt-4 p-3 rounded hidden"></div>
            </div>
        </div>

        <!-- Voice Command Modal -->
<!-- Reload Credits Modal -->
<div id="reloadCreditsModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
    <div class="card rounded-lg p-6 w-full max-w-md mx-4">
        <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-semibold text-gray-900">Add Credits</h3>
            <button onclick="closeModal('reloadCreditsModal')" class="text-gray-400 hover:text-gray-600">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <form id="reloadCreditsForm" class="space-y-4">
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Amount to Add</label>
                <select id="reloadAmount" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500">
                    <option value="5.00">$5.00 - ~50 minutes</option>
                    <option value="10.00">$10.00 - ~100 minutes</option>
                    <option value="25.00">$25.00 - ~250 minutes</option>
                    <option value="50.00">$50.00 - ~500 minutes</option>
                </select>
            </div>
            <div class="bg-blue-50 p-3 rounded-lg">
                <p class="text-sm text-blue-800">
                    <i class="fas fa-info-circle mr-2"></i>
                    Rate: $0.10/minute after your 100 free monthly minutes
                </p>
            </div>
            <div class="flex space-x-3">
                <button type="submit" class="flex-1 bg-orange-500 hover:bg-orange-600 text-white px-4 py-3 rounded-lg">
                    <i class="fas fa-credit-card mr-2"></i>Add Credits
                </button>
                <button type="button" onclick="closeModal('reloadCreditsModal')" class="flex-1 bg-gray-300 hover:bg-gray-400 text-gray-700 px-4 py-3 rounded-lg">
                    Cancel
                </button>
            </div>
        </form>
        <div id="reloadCreditsStatus" class="mt-4 p-3 rounded hidden"></div>
    </div>
</div>

        <!-- Main Display Cards - Mobile Responsive -->
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6 mb-8">
            <!-- Card 1: All Contacts Display -->
            <div class="card rounded-lg shadow-lg border-l-4 border-blue-500 min-h-[500px] flex flex-col card-hover">
                <div class="p-3 sm:p-4 border-b border-gray-200 bg-blue-50">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center">
                            <div class="p-2 sm:p-3 rounded-full bg-blue-500 text-white">
                                <i class="fas fa-users text-sm sm:text-base"></i>
                            </div>
                            <div class="ml-3">
                                <h3 class="text-sm sm:text-base font-semibold text-gray-800">All Contacts</h3>
                                <p class="text-xs sm:text-sm text-gray-600">Total: <span id="total-contacts" class="font-bold">0</span></p>
                            </div>
                        </div>
                        <button onclick="showQuickCreateContact()" class="bg-blue-500 hover:bg-blue-600 text-white px-2 py-1 rounded text-xs transition duration-200">
                            <i class="fas fa-plus"></i>
                        </button>
                    </div>
                </div>
                <div class="flex-1 overflow-hidden">
                    <div class="p-2 sm:p-3 border-b border-gray-100">
                        <input type="text" id="contacts-search" placeholder="Search contacts..." 
                               class="w-full p-2 text-xs border border-gray-300 rounded focus:ring-2 focus:ring-blue-500"
                               onkeyup="filterContacts(this.value)">
                    </div>
                    <div id="all-contacts-list" class="p-2 sm:p-3 space-y-2 overflow-y-auto max-h-[400px]">
                        <div class="text-center py-8">
                            <i class="fas fa-spinner fa-spin text-gray-400 text-xl"></i>
                            <p class="text-gray-500 mt-2 text-sm">Loading contacts...</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Card 2: Today's Appointments Display -->
            <div class="card rounded-lg shadow-lg border-l-4 border-green-500 min-h-[500px] flex flex-col card-hover">
                <div class="p-3 sm:p-4 border-b border-gray-200 bg-green-50">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center">
                            <div class="p-2 sm:p-3 rounded-full bg-green-500 text-white">
                                <i class="fas fa-calendar-check text-sm sm:text-base"></i>
                            </div>
                            <div class="ml-3">
                                <h3 class="text-sm sm:text-base font-semibold text-gray-800">Today's Appointments</h3>
                                <p class="text-xs sm:text-sm text-gray-600">Count: <span id="appointments-today" class="font-bold">0</span></p>
                            </div>
                        </div>
                        <button onclick="showQuickCreateAppointment()" class="bg-green-500 hover:bg-green-600 text-white px-2 py-1 rounded text-xs transition duration-200">
                            <i class="fas fa-plus"></i>
                        </button>
                    </div>
                    <div class="mt-2">
                        <p class="text-xs text-gray-600" id="today-date-display"></p>
                    </div>
                </div>
                <div class="flex-1 overflow-hidden">
                    <div id="all-appointments-list" class="p-2 sm:p-3 space-y-2 overflow-y-auto max-h-[430px]">
                        <div class="text-center py-8">
                            <i class="fas fa-calendar text-gray-400 text-xl mb-2"></i>
                            <p class="text-gray-500 text-sm">No appointments today</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Card 3: Today's SMS Messages Display -->
            <div class="card rounded-lg shadow-lg border-l-4 border-purple-500 min-h-[500px] flex flex-col card-hover">
                <div class="p-3 sm:p-4 border-b border-gray-200 bg-purple-50">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center">
                            <div class="p-2 sm:p-3 rounded-full bg-purple-500 text-white">
                                <i class="fas fa-sms text-sm sm:text-base"></i>
                            </div>
                            <div class="ml-3">
                                <h3 class="text-sm sm:text-base font-semibold text-gray-800">SMS Today</h3>
                                <p class="text-xs sm:text-sm text-gray-600">Count: <span id="messages-today" class="font-bold">0</span></p>
                            </div>
                        </div>
                        <button onclick="showQuickSMS()" class="bg-purple-500 hover:bg-purple-600 text-white px-2 py-1 rounded text-xs transition duration-200">
                            <i class="fas fa-paper-plane"></i>
                        </button>
                    </div>
                </div>
                <div class="flex-1 overflow-hidden">
                    <div class="p-2 border-b border-gray-100">
                        <div class="flex space-x-1 text-xs">
                            <button onclick="filterMessages('all')" class="px-2 py-1 bg-gray-200 text-gray-700 rounded hover:bg-gray-300 transition" id="filter-all-messages">All</button>
                            <button onclick="filterMessages('sent')" class="px-2 py-1 bg-gray-100 text-gray-600 rounded hover:bg-gray-200 transition" id="filter-sent-messages">Sent</button>
                            <button onclick="filterMessages('received')" class="px-2 py-1 bg-gray-100 text-gray-600 rounded hover:bg-gray-200 transition" id="filter-received-messages">Received</button>
                        </div>
                    </div>
                    <div id="all-messages-list" class="p-2 sm:p-3 space-y-2 overflow-y-auto max-h-[400px]">
                        <div class="text-center py-8">
                            <i class="fas fa-sms text-gray-400 text-xl mb-2"></i>
                            <p class="text-gray-500 text-sm">No SMS messages today</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Card 4: Today's Calls Display -->
            <div class="card rounded-lg shadow-lg border-l-4 border-yellow-500 min-h-[500px] flex flex-col card-hover">
                <div class="p-3 sm:p-4 border-b border-gray-200 bg-yellow-50">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center">
                            <div class="p-2 sm:p-3 rounded-full bg-yellow-500 text-white">
                                <i class="fas fa-phone text-sm sm:text-base"></i>
                            </div>
                            <div class="ml-3">
                                <h3 class="text-sm sm:text-base font-semibold text-gray-800">Calls Today</h3>
                                <p class="text-xs sm:text-sm text-gray-600">Count: <span id="calls-today" class="font-bold">0</span></p>
                            </div>
                        </div>
                        <button onclick="initiateCall()" class="bg-yellow-500 hover:bg-yellow-600 text-white px-2 py-1 rounded text-xs transition duration-200">
                            <i class="fas fa-phone"></i>
                        </button>
                    </div>
                </div>
                <div class="flex-1 overflow-hidden">
                    <div class="p-2 border-b border-gray-100">
                        <div class="flex space-x-1 text-xs">
                            <button onclick="filterCalls('all')" class="px-2 py-1 bg-gray-200 text-gray-700 rounded hover:bg-gray-300 transition" id="filter-all-calls">All</button>
                            <button onclick="filterCalls('incoming')" class="px-2 py-1 bg-gray-100 text-gray-600 rounded hover:bg-gray-200 transition" id="filter-incoming-calls">Incoming</button>
                            <button onclick="filterCalls('outgoing')" class="px-2 py-1 bg-gray-100 text-gray-600 rounded hover:bg-gray-200 transition" id="filter-outgoing-calls">Outgoing</button>
                            <button onclick="filterCalls('missed')" class="px-2 py-1 bg-gray-100 text-gray-600 rounded hover:bg-gray-200 transition" id="filter-missed-calls">Missed</button>
                        </div>
                    </div>
                    <div id="all-calls-list" class="p-2 sm:p-3 space-y-2 overflow-y-auto max-h-[400px]">
                        <div class="text-center py-8">
                            <i class="fas fa-phone text-gray-400 text-xl mb-2"></i>
                            <p class="text-gray-500 text-sm">No calls today</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Mobile Sticky Action Bar -->
        <div class="mobile-action-bar">
            <div class="flex justify-around items-center">
                <button onclick="showQuickCreateContact()" class="flex flex-col items-center p-2 text-blue-500">
                    <i class="fas fa-user-plus text-lg"></i>
                    <span class="text-xs mt-1">Contact</span>
                </button>
                <button onclick="showQuickSMS()" class="flex flex-col items-center p-2 text-purple-500">
                    <i class="fas fa-sms text-lg"></i>
                    <span class="text-xs mt-1">SMS</span>
                </button>
                <button onclick="showQuickCreateAppointment()" class="flex flex-col items-center p-2 text-green-500">
                    <i class="fas fa-calendar-plus text-lg"></i>
                    <span class="text-xs mt-1">Appointment</span>
                </button>
                <button onclick="activateVoiceCommand()" class="flex flex-col items-center p-2 text-orange-500">
                    <i class="fas fa-microphone text-lg"></i>
                    <span class="text-xs mt-1">Voice</span>
                </button>
            </div>
        </div>

        <!-- Large Logo at Bottom -->
        <div class="mt-16 mb-8 text-center">
            <div class="flex flex-col items-center space-y-4">
                <img src="https://assets.cdn.filesafe.space/3lSeAHXNU9t09Hhp9oai/media/68a15064d7c434d8cab7644b.png" 
                     alt="RinglyPro Logo" 
                     class="w-32 h-32 sm:w-40 sm:h-40 md:w-48 md:h-48 object-contain bg-white rounded-2xl shadow-2xl p-4">
                <div class="text-center">
                    <div class="text-3xl sm:text-4xl md:text-5xl font-bold text-gray-800 mb-2">
                        <span class="text-blue-600">Ringly</span><span class="text-blue-400">Pro</span>
                    </div>
                    <p class="text-xl sm:text-2xl font-medium text-gray-600">Customer Relationship Management</p>
                    <p class="text-sm sm:text-base text-gray-500 mt-2">Professional CRM Solution for Modern Businesses</p>
                </div>
            </div>
        </div>
    </div>

    <script>
        const apiUrl = window.location.origin;

        // JWT Authentication variables
        let authToken = localStorage.getItem('jwt_token');
        
        // Authentication functions
        function showLoginOverlay() {
            document.getElementById('loginOverlay').classList.remove('hidden');
            document.body.style.overflow = 'hidden';
        }

        function hideLoginOverlay() {
            document.getElementById('loginOverlay').classList.add('hidden');
            document.body.style.overflow = 'auto';
        }

        async function handleLogin(e) {
            e.preventDefault();
            
            const email = document.getElementById('loginEmail').value;
            const password = document.getElementById('loginPassword').value;
            const status = document.getElementById('loginStatus');
            const button = document.getElementById('loginButton');
            
            button.disabled = true;
            button.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Signing in...';
            
            try {
                const response = await fetch('/api/auth/login', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ email, password })
                });
                
                const result = await response.json();
                
                if (result.token) {
                    localStorage.setItem('jwt_token', result.token);
                    authToken = result.token;
                    
                    status.className = 'mt-4 p-3 rounded bg-green-100 text-green-800';
                    status.innerHTML = '<i class="fas fa-check-circle mr-2"></i>Login successful!';
                    status.classList.remove('hidden');
                    
                    setTimeout(() => {
                        hideLoginOverlay();
                        loadContacts();
                        loadAppointments();
                        loadTodaysData();
                    }, 1000);
                } else {
                    throw new Error(result.error || 'Login failed');
                }
            } catch (error) {
                status.className = 'mt-4 p-3 rounded bg-red-100 text-red-800';
                status.innerHTML = `<i class="fas fa-exclamation-circle mr-2"></i>Error: ${error.message}`;
                status.classList.remove('hidden');
            } finally {
                button.disabled = false;
                button.innerHTML = 'Sign In';
            }
        }

        function logout() {
            localStorage.removeItem('jwt_token');
            authToken = null;
            showToast('Logged out successfully', 'info', '<i class="fas fa-sign-out-alt"></i>');
            setTimeout(() => {
                location.reload();
            }, 1000);
        }

        // Global state
        // API Request Helper with JWT
        async function authenticatedFetch(url, options = {}) {
            if (!authToken) {
                showLoginOverlay();
                throw new Error('Authentication required');
            }

            const headers = {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${authToken}`,
                ...options.headers
            };

            const response = await fetch(url, {
                ...options,
                headers
            });

            if (response.status === 401) {
                localStorage.removeItem('jwt_token');
                authToken = null;
                showLoginOverlay();
                showToast('Session expired. Please login again.', 'error', '<i class="fas fa-sign-out-alt"></i>');
                throw new Error('Session expired');
            }

            return response;
        }

        // Global state
        let contacts = [];
        let totalContacts = 0;
        let appointments = [];
        let todaysMessages = [];
        let todaysCalls = [];
        let filteredContacts = [];
        let messageFilter = 'all';
        let callFilter = 'all';

        // Missing setupSearchInput function - FIX 1
        function setupSearchInput() {
            const searchInput = document.getElementById('search-input');
            if (searchInput) {
                searchInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        searchContacts();
                    }
                });
            }
        }

        // Dark Mode Management
        function initDarkMode() {
            const savedTheme = localStorage.getItem('theme') || 'light';
            document.documentElement.setAttribute('data-theme', savedTheme);
            updateThemeUI(savedTheme);
        }

        function toggleDarkMode() {
            const currentTheme = document.documentElement.getAttribute('data-theme');
            const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
            
            document.documentElement.setAttribute('data-theme', newTheme);
            localStorage.setItem('theme', newTheme);
            updateThemeUI(newTheme);
            
            showToast(
                `Switched to ${newTheme} mode`, 
                'info', 
                `<i class="fas fa-${newTheme === 'dark' ? 'moon' : 'sun'}"></i>`
            );
        }

        function updateThemeUI(theme) {
            const themeIcon = document.getElementById('theme-icon');
            const themeText = document.getElementById('theme-text');
            
            if (theme === 'dark') {
                themeIcon.className = 'fas fa-sun mr-1';
                themeText.textContent = 'Light';
            } else {
                themeIcon.className = 'fas fa-moon mr-1';
                themeText.textContent = 'Dark';
            }
        }

        // Mobile Menu Functions
        let isMobileMenuOpen = false;

        function toggleMobileMenu() {
            const mobileMenu = document.getElementById('mobile-menu');
            const overlay = document.getElementById('mobile-menu-overlay');
            const hamburgerIcon = document.getElementById('hamburger-icon');
            const body = document.body;
            
            if (isMobileMenuOpen) {
                closeMobileMenu();
            } else {
                openMobileMenu();
            }
        }

        function openMobileMenu() {
            const mobileMenu = document.getElementById('mobile-menu');
            const overlay = document.getElementById('mobile-menu-overlay');
            const hamburgerIcon = document.getElementById('hamburger-icon');
            const body = document.body;
            
            // Show overlay
            overlay.classList.remove('hidden');
            
            // Slide in menu
            setTimeout(() => {
                mobileMenu.classList.add('mobile-menu-open');
            }, 10);
            
            // Change hamburger to X
            hamburgerIcon.className = 'fas fa-times text-xl hamburger-open';
            
            // Prevent body scroll
            body.classList.add('mobile-menu-open-body');
            
            isMobileMenuOpen = true;
            
            // Update mobile theme text
            updateMobileThemeText();
            updateMobileToggleText();
        }

        function closeMobileMenu() {
            const mobileMenu = document.getElementById('mobile-menu');
            const overlay = document.getElementById('mobile-menu-overlay');
            const hamburgerIcon = document.getElementById('hamburger-icon');
            const body = document.body;
            
            // Slide out menu
            mobileMenu.classList.remove('mobile-menu-open');
            
            // Hide overlay after animation
            setTimeout(() => {
                overlay.classList.add('hidden');
            }, 300);
            
            // Change X back to hamburger
            hamburgerIcon.className = 'fas fa-bars text-xl';
            
            // Restore body scroll
            body.classList.remove('mobile-menu-open-body');
            
            isMobileMenuOpen = false;
        }

        // Update mobile theme text to match desktop
        function updateMobileThemeText() {
            const currentTheme = document.documentElement.getAttribute('data-theme');
            const mobileThemeIcon = document.getElementById('mobile-theme-icon');
            const mobileThemeText = document.getElementById('mobile-theme-text');
            
            if (currentTheme === 'dark') {
                mobileThemeIcon.className = 'fas fa-sun text-yellow-400 mr-3 w-5';
                mobileThemeText.textContent = 'Light Mode';
            } else {
                mobileThemeIcon.className = 'fas fa-moon text-yellow-400 mr-3 w-5';
                mobileThemeText.textContent = 'Dark Mode';
            }
        }

        // Update mobile toggle text to match desktop
        function updateMobileToggleText() {
            const desktopToggleText = document.getElementById('toggle-all-text');
            const mobileToggleText = document.getElementById('mobile-toggle-all-text');
            
            if (desktopToggleText && mobileToggleText) {
                mobileToggleText.textContent = desktopToggleText.textContent;
            }
        }

        // Close mobile menu when clicking outside or when window is resized to desktop
        window.addEventListener('resize', function() {
            if (window.innerWidth >= 768 && isMobileMenuOpen) {
                closeMobileMenu();
            }
        });

        // Close mobile menu when pressing Escape key
        document.addEventListener('keydown', function(event) {
            if (event.key === 'Escape' && isMobileMenuOpen) {
                closeMobileMenu();
            }
        });

        // Delete appointment function
        function deleteAppointment(appointmentId) {
            const appointment = appointments.find(apt => apt.id === appointmentId);
            if (!appointment) {
                showToast('Appointment not found', 'error', '<i class="fas fa-exclamation-circle"></i>');
                return;
            }
            
            // Show confirmation dialog
            if (confirm(`Are you sure you want to delete the appointment "${appointment.purpose}" with ${appointment.contact}?`)) {
                // Remove from appointments array
                appointments = appointments.filter(apt => apt.id !== appointmentId);
                
                // Update display
                updateAllAppointmentsDisplay();
                updateAppointmentsCount();
                
                showToast(`Appointment "${appointment.purpose}" deleted successfully`, 'success', '<i class="fas fa-trash"></i>');
                
                console.log(`Deleted appointment: ${appointment.purpose} with ${appointment.contact}`);
            }
        }

        // Edit appointment function
        function editAppointment(appointmentId) {
            const appointment = appointments.find(apt => apt.id === appointmentId);
            if (!appointment) {
                showToast('Appointment not found', 'error', '<i class="fas fa-exclamation-circle"></i>');
                return;
            }
            
            // Populate the edit form with current appointment data
            document.getElementById('editAppointmentId').value = appointment.id;
            document.getElementById('editAppointmentTitle').value = appointment.purpose;
            document.getElementById('editAppointmentContact').value = appointment.contact;
            document.getElementById('editAppointmentDate').value = getTodayDate(); // Assuming today's appointments
            document.getElementById('editAppointmentTime').value = appointment.time;
            document.getElementById('editAppointmentDuration').value = appointment.duration;
            document.getElementById('editAppointmentStatus').value = appointment.status;
            
            // Show the edit modal
            openModal('editAppointmentModal');
        }

        // Helper function to get today's date in YYYY-MM-DD format
        function getTodayDate() {
            const today = new Date();
            return today.toISOString().split('T')[0];
        }

        // Setup edit appointment form handler
        function setupEditAppointmentForm() {
            const form = document.getElementById('editAppointmentForm');
            if (!form) return;
            
            // Remove existing listeners to prevent duplicates
            const newForm = form.cloneNode(true);
            form.parentNode.replaceChild(newForm, form);
            
            newForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                e.stopPropagation();
                
                const appointmentId = parseInt(document.getElementById('editAppointmentId').value);
                const title = document.getElementById('editAppointmentTitle').value;
                const contact = document.getElementById('editAppointmentContact').value;
                const date = document.getElementById('editAppointmentDate').value;
                const time = document.getElementById('editAppointmentTime').value;
                const duration = document.getElementById('editAppointmentDuration').value;
                const status = document.getElementById('editAppointmentStatus').value;
                
                if (!title || !contact || !date || !time || !duration) {
                    showToast('Please fill in all fields', 'warning', '<i class="fas fa-exclamation-triangle"></i>');
                    return;
                }

                // Check for scheduling conflicts
                const conflictingAppointment = appointments.find(apt => {
                    return apt.time === time && 
                           apt.status !== 'cancelled' && 
                           apt.status !== 'completed' &&
                           apt.id !== appointmentId; // Exclude current appointment
                });

                if (conflictingAppointment) {
                    showToast(`Time slot ${time} is already booked for ${conflictingAppointment.contact}`, 'error', '<i class="fas fa-calendar-times"></i>');
                    
                    // Highlight the conflicting time input
                    const timeInput = document.getElementById('editAppointmentTime');
                    if (timeInput) {
                        timeInput.style.borderColor = '#ef4444';
                        timeInput.style.backgroundColor = '#fef2f2';
                        
                        // Reset styling after 3 seconds
                        setTimeout(() => {
                            timeInput.style.borderColor = '';
                            timeInput.style.backgroundColor = '';
                        }, 3000);
                    }
                    
                    return;
                }
                
                const submitButton = newForm.querySelector('button[type="submit"]');
                const originalText = submitButton.innerHTML;
                
                try {
                    // Disable submit button
                    submitButton.disabled = true;
                    submitButton.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Updating...';
                    
                    // Find and update the appointment
                    const appointmentIndex = appointments.findIndex(apt => apt.id === appointmentId);
                    if (appointmentIndex === -1) {
                        throw new Error('Appointment not found');
                    }
                    
                    // Update appointment data
                    appointments[appointmentIndex] = {
                        ...appointments[appointmentIndex],
                        purpose: title,
                        contact: contact,
                        time: time,
                        duration: parseInt(duration),
                        status: status,
                        updatedAt: new Date().toISOString()
                    };
                    
                    // Sort appointments by time
                    appointments.sort((a, b) => a.time.localeCompare(b.time));
                    
                    // Update display
                    updateAllAppointmentsDisplay();
                    updateAppointmentsCount();
                    
                    showToast(`Appointment "${title}" updated successfully`, 'success', '<i class="fas fa-edit"></i>');
                    
                    // Close modal
                    closeModal('editAppointmentModal');
                    
                    console.log(`Updated appointment:`, appointments[appointmentIndex]);
                    
                } catch (error) {
                    console.error('Error updating appointment:', error);
                    showToast('Failed to update appointment: ' + error.message, 'error', '<i class="fas fa-exclamation-circle"></i>');
                } finally {
                    // Re-enable submit button
                    submitButton.disabled = false;
                    submitButton.innerHTML = originalText;
                }
            });
        }

        // Improved Toast Notification System with timing control
        function showToast(message, type = 'info', icon = '', duration = 5000) {
            const container = document.getElementById('toastContainer');
            if (!container) {
                console.warn('Toast container not found');
                return;
            }
            
            // Prevent duplicate toasts with same message
            const existingToasts = container.querySelectorAll('.toast');
            for (let toast of existingToasts) {
                const messageSpan = toast.querySelector('span:last-child');
                if (messageSpan && messageSpan.textContent === message) {
                    console.log('Duplicate toast prevented:', message);
                    return;
                }
            }
            
            const toast = document.createElement('div');
            const toastId = 'toast-' + Date.now() + '-' + Math.random().toString(36).substr(2, 9);
            toast.id = toastId;
            
            toast.className = `toast ${type}`;
            toast.innerHTML = `
                <div class="flex items-center">
                    ${icon ? `<span class="mr-2">${icon}</span>` : ''}
                    <span class="flex-1">${message}</span>
                    <button onclick="removeToast('${toastId}')" class="ml-2 text-gray-400 hover:text-gray-600 focus:outline-none">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            `;
            
            container.appendChild(toast);
            
            // Trigger animation
            setTimeout(() => {
                if (document.getElementById(toastId)) {
                    toast.classList.add('show');
                }
            }, 100);
            
            // Auto remove after specified duration
            setTimeout(() => {
                removeToast(toastId);
            }, duration);
            
            console.log(`Toast shown: [${type.toUpperCase()}] ${message}`);
        }

        // Helper function to remove specific toast
        function removeToast(toastId) {
            const toast = document.getElementById(toastId);
            if (toast) {
                toast.classList.remove('show');
                setTimeout(() => {
                    if (toast.parentNode) {
                        toast.remove();
                    }
                }, 300);
            }
        }

        // Export Functionality
        function exportContacts() {
            if (contacts.length === 0) {
                showToast('No contacts to export', 'warning', '<i class="fas fa-exclamation-triangle"></i>');
                return;
            }

            const csvContent = convertToCSV(contacts);
            const blob = new Blob([csvContent], { type: 'text/csv' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `contacts-${new Date().toISOString().split('T')[0]}.csv`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);
            
            showToast(`Exported ${contacts.length} contacts`, 'success', '<i class="fas fa-download"></i>');
        }

        function convertToCSV(data) {
            const headers = ['firstName', 'lastName', 'email', 'phone', 'company', 'notes'];
            const csvRows = [headers.join(',')];
            
            data.forEach(contact => {
                const row = headers.map(header => {
                    const value = contact[header] || '';
                    return `"${value.toString().replace(/"/g, '""')}"`;
                });
                csvRows.push(row.join(','));
            });
            
            return csvRows.join('\n');
        }

        // Update All Contacts Display
        function updateAllContactsDisplay() {
            const listElement = document.getElementById('all-contacts-list');
            if (!listElement) return;
            
            const displayContacts = filteredContacts.length > 0 ? filteredContacts : contacts;
            
            if (displayContacts.length === 0) {
                listElement.innerHTML = `
                    <div class="text-center py-8">
                        <i class="fas fa-users text-gray-400 text-xl mb-2"></i>
                        <p class="text-gray-500 text-sm">No contacts found</p>
                        <button onclick="showQuickCreateContact()" class="mt-2 bg-blue-500 text-white px-3 py-2 rounded text-sm">
                            <i class="fas fa-plus mr-1"></i> Add Contact
                        </button>
                    </div>
                `;
                return;
            }
            
            listElement.innerHTML = displayContacts.map(contact => `
                <div class="border border-gray-200 rounded-lg p-2 hover:bg-gray-50 transition duration-200">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center space-x-2">
                            <div class="w-6 h-6 sm:w-8 sm:h-8 bg-blue-500 rounded-full flex items-center justify-center text-white text-xs font-semibold">
                                ${contact.firstName ? contact.firstName.charAt(0) : ''}${contact.lastName ? contact.lastName.charAt(0) : ''}
                            </div>
                            <div class="flex-1 min-w-0">
                                <h4 class="font-semibold text-xs sm:text-sm truncate">${contact.fullName || contact.firstName + ' ' + contact.lastName}</h4>
                                <p class="text-xs text-gray-600 truncate">${contact.phone || ''}</p>
                                <p class="text-xs text-gray-500 truncate">${contact.email || ''}</p>
                            </div>
                        </div>
                        <div class="flex space-x-1">
                            <button onclick="callContact('${contact.phone}')" class="bg-blue-500 text-white px-1.5 py-1 rounded text-xs hover:bg-blue-600" title="Call">
                                <i class="fas fa-phone"></i>
                            </button>
                            <button onclick="textContact('${contact.phone}')" class="bg-green-500 text-white px-1.5 py-1 rounded text-xs hover:bg-green-600" title="Text">
                                <i class="fas fa-sms"></i>
                            </button>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        // Filter contacts by search query
        function filterContacts(query) {
            if (!query.trim()) {
                filteredContacts = [];
            } else {
                const searchTerm = query.toLowerCase();
                filteredContacts = contacts.filter(contact => 
                    (contact.fullName || '').toLowerCase().includes(searchTerm) ||
                    (contact.firstName || '').toLowerCase().includes(searchTerm) ||
                    (contact.lastName || '').toLowerCase().includes(searchTerm) ||
                    (contact.phone || '').toLowerCase().includes(searchTerm) ||
                    (contact.email || '').toLowerCase().includes(searchTerm)
                );
            }
            updateAllContactsDisplay();
        }
        
        // FIXED: Update All Appointments Display - Now displays REAL PostgreSQL data
        function updateAllAppointmentsDisplay() {
            const listElement = document.getElementById('all-appointments-list');
            if (!listElement) return;
            
            if (appointments.length === 0) {
                listElement.innerHTML = `
                    <div class="text-center py-8">
                        <i class="fas fa-calendar text-gray-400 text-xl mb-2"></i>
                        <p class="text-gray-500 text-sm">No appointments today</p>
                        <button onclick="showQuickCreateAppointment()" class="mt-2 bg-green-500 text-white px-3 py-2 rounded text-sm">
                            <i class="fas fa-plus mr-1"></i> Add Appointment
                        </button>
                    </div>
                `;
                return;
            }
            
            listElement.innerHTML = appointments.map(apt => `
                <div class="border border-gray-200 rounded-lg p-2 hover:bg-gray-50 transition duration-200">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center space-x-2">
                            <div class="text-center">
                                <div class="text-xs sm:text-sm font-bold text-green-600">${apt.time}</div>
                                <div class="text-xs text-gray-500">${apt.duration || 30}min</div>
                            </div>
                            <div class="flex-1 min-w-0">
                                <h4 class="font-semibold text-xs sm:text-sm truncate">${apt.contact}</h4>
                                <p class="text-xs text-gray-600 truncate">${apt.purpose || 'General consultation'}</p>
                                <span class="inline-block px-1.5 py-0.5 rounded-full text-xs ${apt.status === 'confirmed' ? 'bg-green-100 text-green-800' : apt.status === 'pending' ? 'bg-yellow-100 text-yellow-800' : 'bg-red-100 text-red-800'}">
                                    ${apt.status || 'confirmed'}
                                </span>
                                ${apt.confirmationCode ? `<span class="inline-block px-1.5 py-0.5 rounded-full text-xs bg-blue-100 text-blue-800 ml-1">${apt.confirmationCode}</span>` : ''}
                            </div>
                        </div>
                        <div class="flex space-x-1">
<button onclick="editAppointment(${apt.id})" class="bg-blue-500 text-white px-1.5 py-1 rounded text-xs hover:bg-blue-600" title="Edit">
    <i class="fas fa-edit"></i>
</button>
<button onclick="sendAppointmentConfirmation(${apt.id})" class="bg-purple-500 text-white px-1.5 py-1 rounded text-xs hover:bg-purple-600" title="Send SMS Confirmation">
    <i class="fas fa-sms"></i>
</button>
<button onclick="deleteAppointment(${apt.id})" class="bg-red-500 text-white px-1.5 py-1 rounded text-xs hover:bg-red-600" title="Delete">
    <i class="fas fa-trash"></i>
</button>
<button onclick="callContact('${apt.phone || ''}')" class="bg-green-500 text-white px-1.5 py-1 rounded text-xs hover:bg-green-600" title="Call">
    <i class="fas fa-phone"></i>
</button>
                        </div>
                    </div>
                </div>
            `).join('');
        }
        
        // Update All Messages Display
        function updateAllMessagesDisplay() {
            const listElement = document.getElementById('all-messages-list');
            if (!listElement) return;
            
            let displayMessages = todaysMessages;
            if (messageFilter !== 'all') {
                displayMessages = todaysMessages.filter(msg => msg.direction === messageFilter || 
                    (messageFilter === 'sent' && msg.direction === 'outgoing') ||
                    (messageFilter === 'received' && msg.direction === 'incoming'));
            }
            
            if (displayMessages.length === 0) {
                listElement.innerHTML = `
                    <div class="text-center py-8">
                        <i class="fas fa-sms text-gray-400 text-xl mb-2"></i>
                        <p class="text-gray-500 text-sm">No SMS messages today</p>
                    </div>
                `;
                return;
            }
            
            listElement.innerHTML = displayMessages.map(msg => `
                <div class="border border-gray-200 rounded-lg p-2 hover:bg-gray-50 transition duration-200">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center space-x-2">
                            <div class="w-6 h-6 ${msg.direction === 'incoming' ? 'bg-purple-500' : 'bg-blue-500'} rounded-full flex items-center justify-center text-white text-xs">
                                <i class="fas ${msg.direction === 'incoming' ? 'fa-arrow-down' : 'fa-arrow-up'}"></i>
                            </div>
                            <div class="flex-1 min-w-0">
                                <h4 class="font-semibold text-xs sm:text-sm truncate">${msg.contact}</h4>
                                <p class="text-xs text-gray-600">${msg.time} • ${msg.phone}</p>
                                <p class="text-xs text-gray-700 mt-1 truncate">"${msg.message}"</p>
                            </div>
                        </div>
                        <button onclick="textContact('${msg.phone}')" class="bg-purple-500 text-white px-1.5 py-1 rounded text-xs hover:bg-purple-600" title="Reply">
                            <i class="fas fa-reply"></i>
                        </button>
                    </div>
                </div>
            `).join('');
        }

        // Filter messages
        function filterMessages(filter) {
            messageFilter = filter;
            
            // Update filter buttons
            document.querySelectorAll('[id^="filter-"][id$="-messages"]').forEach(btn => {
                btn.className = 'px-2 py-1 bg-gray-100 text-gray-600 rounded hover:bg-gray-200 transition';
            });
            document.getElementById(`filter-${filter}-messages`).className = 'px-2 py-1 bg-gray-200 text-gray-700 rounded hover:bg-gray-300 transition';
            
            updateAllMessagesDisplay();
        }
        
        // Update All Calls Display
        function updateAllCallsDisplay() {
            const listElement = document.getElementById('all-calls-list');
            if (!listElement) return;
            
            let displayCalls = todaysCalls;
            if (callFilter !== 'all') {
                displayCalls = todaysCalls.filter(call => 
                    call.direction === callFilter || call.status === callFilter);
            }
            
            if (displayCalls.length === 0) {
                listElement.innerHTML = `
                    <div class="text-center py-8">
                        <i class="fas fa-phone text-gray-400 text-xl mb-2"></i>
                        <p class="text-gray-500 text-sm">No calls today</p>
                    </div>
                `;
                return;
            }
            
            listElement.innerHTML = displayCalls.map(call => `
                <div class="border border-gray-200 rounded-lg p-2 hover:bg-gray-50 transition duration-200">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center space-x-2">
                            <div class="w-6 h-6 ${call.status === 'missed' ? 'bg-red-500' : call.direction === 'incoming' ? 'bg-green-500' : 'bg-yellow-500'} rounded-full flex items-center justify-center text-white text-xs">
                                <i class="fas ${call.status === 'missed' ? 'fa-phone-slash' : call.direction === 'incoming' ? 'fa-phone-volume' : 'fa-phone'}"></i>
                            </div>
                            <div class="flex-1 min-w-0">
                                <h4 class="font-semibold text-xs sm:text-sm truncate">${call.contact}</h4>
                                <p class="text-xs text-gray-600 truncate">${call.time} • ${call.phone}</p>
                                <p class="text-xs text-gray-500">Duration: ${call.duration}</p>
                                <span class="inline-block px-1.5 py-0.5 rounded-full text-xs ${call.status === 'missed' ? 'bg-red-100 text-red-800' : call.direction === 'incoming' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'}">
                                    ${call.direction} • ${call.status}
                                </span>
                            </div>
                        </div>
                        <div class="flex space-x-1">
                            <button onclick="callContact('${call.phone}')" class="bg-green-500 text-white px-1.5 py-1 rounded text-xs hover:bg-green-600" title="Call back">
                                <i class="fas fa-phone"></i>
                            </button>
                            <button onclick="textContact('${call.phone}')" class="bg-blue-500 text-white px-1.5 py-1 rounded text-xs hover:bg-blue-600" title="Text">
                                <i class="fas fa-sms"></i>
                            </button>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        // Filter calls
        function filterCalls(filter) {
            callFilter = filter;
            
            // Update filter buttons
            document.querySelectorAll('[id^="filter-"][id$="-calls"]').forEach(btn => {
                btn.className = 'px-2 py-1 bg-gray-100 text-gray-600 rounded hover:bg-gray-200 transition';
            });
            document.getElementById(`filter-${filter}-calls`).className = 'px-2 py-1 bg-gray-200 text-gray-700 rounded hover:bg-gray-300 transition';
            
            updateAllCallsDisplay();
        }

        // Initiate a call (placeholder function)
        function initiateCall() {
            const phoneNumber = prompt('Enter phone number to call:');
            if (phoneNumber) {
                callContact(phoneNumber);
            }
        }

        // Collapsible section management - ALL COLLAPSED BY DEFAULT
        const sectionStates = {
            'add-contact': false,
            'search-contacts': false,
            'appointments-today': false,
            'send-sms': false
        };

        // Load saved section states from localStorage with error handling
        function loadSectionStates() {
            try {
                const saved = localStorage.getItem('crm-section-states');
                if (saved) {
                    Object.assign(sectionStates, JSON.parse(saved));
                }
                
                // Apply saved states with error checking - Default is COLLAPSED
                Object.keys(sectionStates).forEach(sectionId => {
                    const content = document.getElementById(`${sectionId}-content`);
                    
                    // Check if element exists before proceeding
                    if (!content) {
                        console.warn(`Section content not found: ${sectionId}-content`);
                        return;
                    }
                    
                    const header = content.parentElement.querySelector('.section-header');
                    
                    if (!header) {
                        console.warn(`Section header not found for: ${sectionId}`);
                        return;
                    }
                    
                    // Default behavior: COLLAPSED
                    if (sectionStates[sectionId]) {
                        content.classList.add('expanded');
                        content.classList.remove('collapsed');
                        header.classList.remove('collapsed');
                    } else {
                        content.classList.add('collapsed');
                        content.classList.remove('expanded');
                        header.classList.add('collapsed');
                    }
                });
                
                // Update toggle all button text - Default to "Expand All"
                const toggleAllText = document.getElementById('toggle-all-text');
                if (toggleAllText) {
                    const allExpanded = Object.values(sectionStates).every(state => state);
                    toggleAllText.textContent = allExpanded ? 'Collapse All' : 'Expand All';
                }
            } catch (error) {
                console.error('Error loading section states:', error);
                // Reset to default states if there's an error - ALL COLLAPSED
                Object.keys(sectionStates).forEach(key => {
                    sectionStates[key] = false;
                });
                // Ensure button shows "Expand All"
                const toggleAllText = document.getElementById('toggle-all-text');
                if (toggleAllText) {
                    toggleAllText.textContent = 'Expand All';
                }
            }
        }

        // Save section states to localStorage
        function saveSectionStates() {
            try {
                localStorage.setItem('crm-section-states', JSON.stringify(sectionStates));
            } catch (error) {
                console.error('Error saving section states:', error);
            }
        }

        // Toggle individual section
        function toggleSection(sectionId) {
            const content = document.getElementById(`${sectionId}-content`);
            const header = content?.parentElement?.querySelector('.section-header');
            
            if (!content || !header) {
                console.error(`Section elements not found for: ${sectionId}`);
                return;
            }
            
            if (content.classList.contains('expanded')) {
                content.classList.remove('expanded');
                content.classList.add('collapsed');
                header.classList.add('collapsed');
                sectionStates[sectionId] = false;
            } else {
                content.classList.remove('collapsed');
                content.classList.add('expanded');
                header.classList.remove('collapsed');
                sectionStates[sectionId] = true;
            }
            
            saveSectionStates();
            
            // Update toggle all button text
            const toggleAllText = document.getElementById('toggle-all-text');
            if (toggleAllText) {
                const allExpanded = Object.values(sectionStates).every(state => state);
                toggleAllText.textContent = allExpanded ? 'Collapse All' : 'Expand All';
            }
        }

        // Toggle all sections
        function toggleAllSections() {
            const allExpanded = Object.values(sectionStates).every(state => state);
            const newState = !allExpanded;
            
            Object.keys(sectionStates).forEach(sectionId => {
                const content = document.getElementById(`${sectionId}-content`);
                const header = content?.parentElement?.querySelector('.section-header');
                
                if (!content || !header) {
                    console.warn(`Section elements not found for: ${sectionId}`);
                    return;
                }
                
                if (newState) {
                    content.classList.remove('collapsed');
                    content.classList.add('expanded');
                    header.classList.remove('collapsed');
                } else {
                    content.classList.remove('expanded');
                    content.classList.add('collapsed');
                    header.classList.add('collapsed');
                }
                
                sectionStates[sectionId] = newState;
            });
            
            const toggleAllText = document.getElementById('toggle-all-text');
            if (toggleAllText) {
                toggleAllText.textContent = newState ? 'Collapse All' : 'Expand All';
            }
            saveSectionStates();
        }

        // Update credit balance display
async function updateCreditBalance() {
    try {
        const response = await fetch('/api/credits/1/balance');
        const result = await response.json();
        
        if (result.success) {
            const data = result.data;
            
            // Update credit balance
            const balanceEl = document.getElementById('kpi-credit-balance');
            if (balanceEl) {
                balanceEl.textContent = `$${parseFloat(data.balance).toFixed(2)}`;
            }
            
            // Update free minutes info
            const freeMinutesEl = document.getElementById('kpi-free-minutes');
            if (freeMinutesEl) {
                freeMinutesEl.textContent = `${data.freeMinutesUsed}/${data.freeMinutesRemaining + data.freeMinutesUsed} free`;
            }
            
            // Show low balance warning if needed
            const creditCard = balanceEl?.closest('.bg-orange-500');
            if (creditCard && data.isLowBalance) {
                creditCard.classList.remove('bg-orange-500');
                creditCard.classList.add('bg-red-500');
            }
            
            console.log('Credit balance updated:', data);
        }
    } catch (error) {
        console.error('Error loading credit balance:', error);
    }
}

        // Load contacts from database
        // Load contacts from database
        async function loadContacts() {
            try {
                console.log('Loading contacts from database...');
                const response = await authenticatedFetch('/api/contacts?limit=50&sortBy=createdAt&sortOrder=DESC');
                const result = await response.json();
                
                if (result.success) {
                    contacts = result.data.contacts;
                    totalContacts = result.data.pagination.totalContacts;
                    updateContactCount();
                    updateAllContactsDisplay();
                    
                    // Update any open modal dropdowns
                    updateOpenModalDropdowns();
                    
                    console.log(`Loaded ${contacts.length} contacts`);
                } else {
                    throw new Error(result.error || 'Failed to load contacts');
                }
            } catch (error) {
                console.error('Error loading contacts:', error);
                // Show error in contacts display
                const contactsList = document.getElementById('all-contacts-list');
                if (contactsList) {
                    contactsList.innerHTML = `
                        <div class="text-center py-8 text-red-500">
                            <i class="fas fa-exclamation-triangle text-xl mb-2"></i>
                            <p class="text-sm">Error loading contacts: ${error.message}</p>
                            <button onclick="loadContacts()" class="mt-2 bg-blue-500 text-white px-3 py-2 rounded text-sm">
                                Try Again
                            </button>
                        </div>
                    `;
                }
            }
        }
                    
                    // Update any open modal dropdowns
                    updateOpenModalDropdowns();
                    
                    console.log(`Loaded ${contacts.length} contacts`);
                } else {
                    throw new Error(result.error || 'Failed to load contacts');
                }
            } catch (error) {
                console.error('Error loading contacts:', error);
                // Show error in contacts display
                const contactsList = document.getElementById('all-contacts-list');
                if (contactsList) {
                    contactsList.innerHTML = `
                        <div class="text-center py-8 text-red-500">
                            <i class="fas fa-exclamation-triangle text-xl mb-2"></i>
                            <p class="text-sm">Error loading contacts: ${error.message}</p>
                            <button onclick="loadContacts()" class="mt-2 bg-blue-500 text-white px-3 py-2 rounded text-sm">
                                Try Again
                            </button>
                        </div>
                    `;
                }
            }
        }

        // FIXED: Load appointments from PostgreSQL API - NO MORE HARDCODED DATA
        // Load appointments from PostgreSQL API with JWT
        async function loadAppointments() {
            try {
                console.log('Loading today\'s appointments from PostgreSQL API...');
                
                const response = await authenticatedFetch('/api/appointments/today');
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                const result = await response.json();
                
                console.log('Received appointments from API:', result);
                
                if (result.success && result.appointments) {
                    // Transform API data to match dashboard format
                    appointments = result.appointments.map(apt => ({
                        id: apt.id,
                        time: apt.appointmentTime ? apt.appointmentTime.substring(0, 5) : '00:00', // Format HH:MM
                        duration: apt.duration || 30,
                        contact: apt.customerName,
                        phone: apt.customerPhone || '',
                        purpose: apt.purpose || 'General consultation',
                        status: apt.status || 'confirmed',
                        confirmationCode: apt.confirmationCode,
                        source: apt.source
                    }));
                    
                    console.log(`Loaded ${appointments.length} real appointments from PostgreSQL`);
                    console.log('Appointment details:', appointments);
                } else {
                    console.warn('API returned no appointments or invalid format');
                    appointments = [];
                }
                
                // Display today's date
                const today = new Date();
                const todayDateEl = document.getElementById('today-date-display');
                if (todayDateEl) {
                    todayDateEl.textContent = today.toLocaleDateString('en-US', {
                        weekday: 'long',
                        month: 'long',
                        day: 'numeric'
                    });
                }

                updateAllAppointmentsDisplay();
                updateAppointmentsCount();
                
            } catch (error) {
                console.error('Error loading appointments from API:', error);
                
                // Show error in appointments display
                const appointmentsList = document.getElementById('all-appointments-list');
                if (appointmentsList) {
                    appointmentsList.innerHTML = `
                        <div class="text-center py-8 text-red-500">
                            <i class="fas fa-exclamation-triangle text-xl mb-2"></i>
                            <p class="text-sm">Error loading appointments: ${error.message}</p>
                            <button onclick="loadAppointments()" class="mt-2 bg-green-500 text-white px-3 py-2 rounded text-sm">
                                Try Again
                            </button>
                        </div>
                    `;
                }
                
                // Fallback to empty array
                appointments = [];
                updateAppointmentsCount();
            }
        }
                    // Transform API data to match dashboard format
                    appointments = result.appointments.map(apt => ({
                        id: apt.id,
                        time: apt.appointmentTime ? apt.appointmentTime.substring(0, 5) : '00:00', // Format HH:MM
                        duration: apt.duration || 30,
                        contact: apt.customerName,
                        phone: apt.customerPhone || '',
                        purpose: apt.purpose || 'General consultation',
                        status: apt.status || 'confirmed',
                        confirmationCode: apt.confirmationCode,
                        source: apt.source
                    }));
                    
                    console.log(`Loaded ${appointments.length} real appointments from PostgreSQL`);
                    console.log('Appointment details:', appointments);
                } else {
                    console.warn('API returned no appointments or invalid format');
                    appointments = [];
                }
                
                // Display today's date
                const today = new Date();
                const todayDateEl = document.getElementById('today-date-display');
                if (todayDateEl) {
                    todayDateEl.textContent = today.toLocaleDateString('en-US', {
                        weekday: 'long',
                        month: 'long',
                        day: 'numeric'
                    });
                }

                updateAllAppointmentsDisplay();
                updateAppointmentsCount();
                
            } catch (error) {
                console.error('Error loading appointments from API:', error);
                
                // Show error in appointments display
                const appointmentsList = document.getElementById('all-appointments-list');
                if (appointmentsList) {
                    appointmentsList.innerHTML = `
                        <div class="text-center py-8 text-red-500">
                            <i class="fas fa-exclamation-triangle text-xl mb-2"></i>
                            <p class="text-sm">Error loading appointments: ${error.message}</p>
                            <button onclick="loadAppointments()" class="mt-2 bg-green-500 text-white px-3 py-2 rounded text-sm">
                                Try Again
                            </button>
                        </div>
                    `;
                }
                
                // Fallback to empty array
                appointments = [];
                updateAppointmentsCount();
            }
        }

// Add to your dashboard.ejs <script> section:

async function sendAppointmentConfirmation(appointmentId) {
  try {
    const appointment = appointments.find(apt => apt.id === appointmentId);
    if (!appointment) {
      showToast('Appointment not found', 'error', '<i class="fas fa-exclamation-circle"></i>');
      return;
    }

    showToast('Sending confirmation SMS...', 'info', '<i class="fas fa-paper-plane"></i>');

    const response = await fetch('/api/messages/appointment-confirmation', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        appointmentId: appointment.id,
        customerPhone: appointment.phone,
        customerName: appointment.contact,
        appointmentDate: getTodayDate(), // Today's date
        appointmentTime: appointment.time,
        duration: appointment.duration,
        confirmationCode: appointment.confirmationCode
      })
    });

    const result = await response.json();
    
    if (result.success) {
      showToast(`Confirmation SMS sent to ${appointment.contact}`, 'success', '<i class="fas fa-check-circle"></i>');
    } else {
      throw new Error(result.error);
    }
  } catch (error) {
    console.error('Error sending confirmation:', error);
    showToast('Failed to send confirmation: ' + error.message, 'error', '<i class="fas fa-exclamation-circle"></i>');
  }
}

// Replace your existing deleteAppointment function in dashboard.ejs with this:

// Replace your existing deleteAppointment function in dashboard.ejs with this:

async function deleteAppointment(appointmentId) {
    const appointment = appointments.find(apt => apt.id === appointmentId);
    if (!appointment) {
        showToast('Appointment not found', 'error', '<i class="fas fa-exclamation-circle"></i>');
        return;
    }
    
    // Show confirmation dialog
    if (confirm(`Cancel the appointment "${appointment.purpose}" with ${appointment.contact}?\n\nThis will:\n• Mark appointment as cancelled\n• Send SMS notification to customer\n• Keep record for audit trail`)) {
        try {
            showToast('Cancelling appointment and sending SMS...', 'info', '<i class="fas fa-spinner fa-spin"></i>');
            
            console.log(`🔄 Cancelling appointment ${appointmentId}`);
            
            // Call the API to cancel the appointment
            const response = await fetch(`/api/appointments/${appointmentId}`, {
                method: 'DELETE',
                headers: { 
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    reason: 'Cancelled from dashboard'
                })
            });
            
            console.log(`📡 API Response Status: ${response.status}`);
            
            const result = await response.json();
            console.log('📋 API Response:', result);
            
            if (response.ok && result.success) {
                // Remove from local appointments array
                appointments = appointments.filter(apt => apt.id !== appointmentId);
                
                // Update display
                updateAllAppointmentsDisplay();
                updateAppointmentsCount();
                
                // Show success message with SMS status
                let successMessage = `Appointment with ${appointment.contact} cancelled successfully`;
                let successIcon = '<i class="fas fa-calendar-times"></i>';
                
                if (result.smsNotification && result.smsNotification.sent) {
                    successMessage += ' • SMS notification sent';
                    successIcon = '<i class="fas fa-check-double"></i>';
                } else {
                    successMessage += ' • SMS notification failed';
                }
                
                showToast(successMessage, 'success', successIcon);
                
                console.log(`✅ Successfully cancelled appointment: ${appointment.purpose} with ${appointment.contact}`);
                console.log(`📱 SMS Status:`, result.smsNotification);
                
                // Refresh messages to show the cancellation SMS
                setTimeout(async () => {
                    await loadTodaysMessages();
                }, 2000);
            } else {
                throw new Error(result.error || `API returned ${response.status}`);
            }
        } catch (error) {
            console.error('❌ Error cancelling appointment:', error);
            showToast('Failed to cancel appointment: ' + error.message, 'error', '<i class="fas fa-exclamation-circle"></i>');
        }
    }
}

        // Load today's messages from database
       // Load today's messages from database
        async function loadTodaysMessages() {
            try {
                console.log('Loading today\'s SMS messages from database...');
                
                const response = await authenticatedFetch('/api/messages/today');
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                const messages = await response.json();
                
                console.log(`Successfully loaded ${messages.length} messages from database`);
                
                // Update global todaysMessages array with real data
                todaysMessages = messages.map(msg => ({
                    id: msg.id,
                    contact: msg.direction === 'outgoing' ? formatPhoneNumber(msg.toNumber) : formatPhoneNumber(msg.fromNumber),
                    phone: msg.direction === 'outgoing' ? msg.toNumber : msg.fromNumber,
                    time: formatMessageTime(msg.createdAt),
                    message: msg.body,
                    direction: msg.direction,
                    status: msg.status,
                    twilioSid: msg.twilioSid,
                    originalData: msg
                }));
                
                // Update displays
                updateMessagesCount();
                updateAllMessagesDisplay();
                
                return messages;
                
            } catch (error) {
                console.error('Error loading messages:', error);
                
                // Show error but don't completely fail
                todaysMessages = [];
                updateMessagesCount();
                updateAllMessagesDisplay();
                
                return [];
            }
        }
                // Update global todaysMessages array with real data
                todaysMessages = messages.map(msg => ({
                    id: msg.id,
                    contact: msg.direction === 'outgoing' ? formatPhoneNumber(msg.toNumber) : formatPhoneNumber(msg.fromNumber),
                    phone: msg.direction === 'outgoing' ? msg.toNumber : msg.fromNumber,
                    time: formatMessageTime(msg.createdAt),
                    message: msg.body,
                    direction: msg.direction,
                    status: msg.status,
                    twilioSid: msg.twilioSid,
                    originalData: msg
                }));
                
                // Update displays
                updateMessagesCount();
                updateAllMessagesDisplay();
                
                return messages;
                
            } catch (error) {
                console.error('Error loading messages:', error);
                
                // Show error but don't completely fail
                todaysMessages = [];
                updateMessagesCount();
                updateAllMessagesDisplay();
                
                return [];
            }
        }

        // Load today's calls
        async function loadTodaysCalls() {
            try {
                console.log('Loading today\'s calls from database...');
                
                const response = await fetch('/api/calls/today');
                
                if (!response.ok) {
                    // If API fails, fall back to mock data for now
                    console.log('Call API not available, using mock data');
                    
                    // Keep existing mock data as fallback
                    todaysCalls = [
                        {
                            id: 1,
                            contact: 'John Doe',
                            phone: '+1234567890',
                            time: '08:45 AM',
                            duration: '05:23',
                            direction: 'incoming',
                            status: 'completed'
                        },
                        {
                            id: 2,
                            contact: 'Jane Smith',
                            phone: '+1987654321',
                            time: '10:15 AM',
                            duration: '12:45',
                            direction: 'outgoing',
                            status: 'completed'
                        }
                    ];
                    
                    updateCallsCount();
                    updateAllCallsDisplay();
                    return;
                }
                
                const calls = await response.json();
                
                console.log(`Successfully loaded ${calls.length} calls from database`);
                
                // Update global todaysCalls array with real data
                todaysCalls = calls.map(call => ({
                    id: call.id,
                    contact: call.contact || formatPhoneNumber(call.direction === 'outgoing' ? call.toNumber : call.fromNumber),
                    phone: call.direction === 'outgoing' ? call.toNumber : call.fromNumber,
                    time: formatCallTime(call.createdAt),
                    duration: formatCallDuration(call.duration),
                    direction: call.direction,
                    status: call.callStatus || call.status,
                    originalData: call
                }));
                
                // Update displays
                updateCallsCount();
                updateAllCallsDisplay();
                
                return calls;
                
            } catch (error) {
                console.error('Error loading calls:', error);
                
                // Keep mock data on error
                console.log('Keeping existing mock data due to error');
                updateCallsCount();
                updateAllCallsDisplay();
                
                return [];
            }
        }

        // Helper functions for formatting
        function formatPhoneNumber(phone) {
            if (!phone) return 'Unknown';
            
            // Remove +1 country code for US numbers
            let formatted = phone.replace(/^\+1/, '');
            
            // Format as (XXX) XXX-XXXX
            if (formatted.length === 10) {
                return `(${formatted.slice(0, 3)}) ${formatted.slice(3, 6)}-${formatted.slice(6)}`;
            }
            
            return phone; // Return original if can't format
        }

        function formatMessageTime(timestamp) {
            const date = new Date(timestamp);
            const now = new Date();
            
            // Check if it's today
            if (date.toDateString() === now.toDateString()) {
                return date.toLocaleTimeString('en-US', { 
                    hour: '2-digit', 
                    minute: '2-digit',
                    hour12: true 
                });
            } else {
                return date.toLocaleDateString('en-US', { 
                    month: 'short', 
                    day: 'numeric',
                    hour: '2-digit', 
                    minute: '2-digit',
                    hour12: true 
                });
            }
        }

        function formatCallTime(timestamp) {
            const date = new Date(timestamp);
            const now = new Date();
            
            // Check if it's today
            if (date.toDateString() === now.toDateString()) {
                return date.toLocaleTimeString('en-US', { 
                    hour: '2-digit', 
                    minute: '2-digit',
                    hour12: true 
                });
            } else {
                return date.toLocaleDateString('en-US', { 
                    month: 'short', 
                    day: 'numeric',
                    hour: '2-digit', 
                    minute: '2-digit',
                    hour12: true 
                });
            }
        }

        function formatCallDuration(durationSeconds) {
            if (!durationSeconds || durationSeconds <= 0) return '00:00';
            
            const minutes = Math.floor(durationSeconds / 60);
            const seconds = durationSeconds % 60;
            return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        }

        // Update count displays
        function updateContactCount() {
            const contactCountEl = document.getElementById('total-contacts');
            if (contactCountEl) {
                contactCountEl.textContent = totalContacts;
            }
            // Update KPI too
            const kpiEl = document.getElementById('kpi-total-contacts');
            if (kpiEl) {
                kpiEl.textContent = totalContacts;
            }
        }

        // Better appointment count display
        function updateAppointmentsCount() {
            const appointmentsEl = document.getElementById('appointments-today');
            if (appointmentsEl) {
                appointmentsEl.textContent = appointments.length;
            }
            // Update KPI too
            const kpiEl = document.getElementById('kpi-appointments');
            if (kpiEl) {
                kpiEl.textContent = appointments.length;
            }
        }

        function updateMessagesCount() {
            const messagesEl = document.getElementById('messages-today');
            if (messagesEl) {
                messagesEl.textContent = todaysMessages.length;
            }
            // Update KPI too
            const kpiEl = document.getElementById('kpi-messages');
            if (kpiEl) {
                kpiEl.textContent = todaysMessages.length;
            }
        }

        function updateCallsCount() {
            const callsEl = document.getElementById('calls-today');
            if (callsEl) {
                callsEl.textContent = todaysCalls.length;
            }
        }

        // Load all today's data
        function loadTodaysData() {
            loadTodaysMessages();
            loadTodaysCalls();
            updateCreditBalance();  // Add this line
        }

        // Update dropdowns in any open modals
        function updateOpenModalDropdowns() {
            // Check if SMS modal is open
            if (!document.getElementById('quickSMSModal').classList.contains('hidden')) {
                populateContactDropdown('quickSMSContactSelect', true, false);
            }
            
            // Check if Email modal is open
            if (!document.getElementById('quickEmailModal').classList.contains('hidden')) {
                populateContactDropdown('quickEmailContactSelect', false, true);
            }
            
            // Check if Appointment modal is open
            if (!document.getElementById('quickCreateAppointmentModal').classList.contains('hidden')) {
                populateContactDropdown('quickAppointmentContactSelect', false, false);
            }
            
            // Check if Update Email modal is open
            if (!document.getElementById('quickUpdateEmailModal').classList.contains('hidden')) {
                populateContactDropdown('quickUpdateEmailContactSelect', false, true);
            }
            
            // Check if Update Phone modal is open
            if (!document.getElementById('quickUpdatePhoneModal').classList.contains('hidden')) {
                populateContactDropdown('quickUpdatePhoneContactSelect', true, false);
            }
        }

        // Handle appointment form submission
        function setupAppointmentForm() {
            const form = document.getElementById('appointment-form');
            if (!form) return;
            
            form.addEventListener('submit', function(e) {
                e.preventDefault();
                
                const contactName = document.getElementById('apt-contact-name')?.value;
                const contactPhone = document.getElementById('apt-contact-phone')?.value;
                const time = document.getElementById('apt-time')?.value;
                const duration = document.getElementById('apt-duration')?.value;
                const purpose = document.getElementById('apt-purpose')?.value;
                
                if (!contactName || !contactPhone || !time || !duration || !purpose) {
                    showToast('Please fill in all fields', 'warning', '<i class="fas fa-exclamation-triangle"></i>');
                    return;
                }
                
                // Add new appointment (simulation)
                const newAppointment = {
                    id: appointments.length + 1,
                    time: time,
                    duration: parseInt(duration),
                    contact: contactName,
                    phone: contactPhone,
                    purpose: purpose,
                    status: 'confirmed'
                };
                
                appointments.push(newAppointment);
                appointments.sort((a, b) => a.time.localeCompare(b.time));
                
                // Update display
                updateAllAppointmentsDisplay();
                updateAppointmentsCount();
                
                // Show success message
                const status = document.getElementById('appointment-status');
                if (status) {
                    status.className = 'mt-3 p-3 rounded bg-green-100 text-green-800';
                    status.innerHTML = `<i class="fas fa-check-circle mr-2"></i>Appointment booked for ${contactName} at ${time}`;
                    status.classList.remove('hidden');
                    
                    // Clear form
                    form.reset();
                    
                    // Hide success message after 3 seconds
                    setTimeout(() => {
                        status.classList.add('hidden');
                    }, 3000);
                }
                
                showToast(`Appointment booked for ${contactName}`, 'success', '<i class="fas fa-calendar-plus"></i>');
            });
        }

        // Add Contact Form Handler
        function setupContactForm() {
            const form = document.getElementById('contact-form');
            if (!form) return;
            
            form.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const formData = {
                    firstName: document.getElementById('firstName')?.value,
                    lastName: document.getElementById('lastName')?.value,
                    phone: document.getElementById('phone')?.value,
                    email: document.getElementById('email')?.value,
                    notes: document.getElementById('notes')?.value,
                    source: 'dashboard'
                };

                const button = document.getElementById('add-contact-btn');
                const status = document.getElementById('contact-status');
                
                if (!button || !status) return;
                
                // Update button state
                button.disabled = true;
                button.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Adding to Database...';
                
                try {
                    const response = await fetch('/api/contacts', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(formData)
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        // Show success message
                        status.className = 'mt-4 p-4 rounded-lg bg-green-100 text-green-800';
                        status.innerHTML = `<i class="fas fa-check-circle mr-2"></i>${result.message}`;
                        status.classList.remove('hidden');
                        
                        // Clear form
                        form.reset();
                        
                        // Reload contacts from database
                        await loadContacts();
                        
                        // Show toast
                        showToast('Contact added successfully!', 'success', '<i class="fas fa-user-plus"></i>');
                        
                    } else {
                        throw new Error(result.error || 'Failed to create contact');
                    }
                } catch (error) {
                    console.error('Error creating contact:', error);
                    status.className = 'mt-4 p-4 rounded-lg bg-red-100 text-red-800';
                    status.innerHTML = `<i class="fas fa-exclamation-circle mr-2"></i>Error: ${error.message}`;
                    status.classList.remove('hidden');
                    
                    showToast('Failed to add contact', 'error', '<i class="fas fa-exclamation-circle"></i>');
                } finally {
                    // Reset button
                    button.disabled = false;
                    button.innerHTML = '<i class="fas fa-plus mr-2"></i>Add Contact to Database';
                }
            });
        }

        // Search contacts
        async function searchContacts() {
            const query = document.getElementById('search-input')?.value?.trim();
            if (!query) return;

            try {
                const response = await fetch(`/api/contacts/search/${encodeURIComponent(query)}`);
                const result = await response.json();
                
                if (result.success) {
                    const searchResults = document.getElementById('search-results');
                    const searchList = document.getElementById('search-contacts-list');
                    
                    if (!searchResults || !searchList) return;
                    
                    if (result.data.contacts.length === 0) {
                        searchList.innerHTML = '<p class="text-gray-500 text-center py-4">No contacts found matching your search</p>';
                    } else {
                        searchList.innerHTML = result.data.contacts.map(contact => `
                            <div class="border border-gray-200 rounded-lg p-3 flex items-center justify-between hover:bg-gray-50 transition duration-200">
                                <div>
                                    <h4 class="font-semibold">${contact.fullName}</h4>
                                    <p class="text-sm text-gray-600">${contact.phone} • ${contact.email}</p>
                                </div>
                                <div class="flex space-x-2">
                                    <button onclick="callContact('${contact.phone}')" class="bg-blue-500 text-white px-2 py-1 rounded text-sm hover:bg-blue-600" title="Call ${contact.fullName}">
                                        <i class="fas fa-phone"></i>
                                    </button>
                                    <button onclick="textContact('${contact.phone}')" class="bg-green-500 text-white px-2 py-1 rounded text-sm hover:bg-green-600" title="Text ${contact.fullName}">
                                        <i class="fas fa-sms"></i>
                                    </button>
                                </div>
                            </div>
                        `).join('');
                    }
                    
                    searchResults.classList.remove('hidden');
                } else {
                    throw new Error(result.error);
                }
            } catch (error) {
                console.error('Search error:', error);
                showToast('Search failed: ' + error.message, 'error', '<i class="fas fa-exclamation-circle"></i>');
            }
        }

        // Quick actions
        function callContact(phone) {
            showToast(`Calling ${phone}`, 'info', '<i class="fas fa-phone"></i>');
            // In a real system, RinglyPro would initiate a call via Twilio
        }

        function textContact(phone) {
            // Open Quick SMS modal and pre-fill phone number
            showQuickSMS();
            const recipientInput = document.getElementById('quickSMSRecipient');
            if (recipientInput) {
                recipientInput.value = phone;
                recipientInput.placeholder = `Texting ${phone}`;
            }
            const messageInput = document.getElementById('quickSMSMessage');
            if (messageInput) {
                messageInput.focus();
            }
        }

        // Better refresh function with proper error handling
        async function refreshData() {
            console.log('Starting comprehensive data refresh...');
            
            // Show loading indicators
            const loadingElements = [
                'total-contacts', 'appointments-today', 'messages-today', 'calls-today',
                'kpi-total-contacts', 'kpi-appointments', 'kpi-messages'
            ];
            
            loadingElements.forEach(id => {
                const element = document.getElementById(id);
                if (element) {
                    element.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
                }
            });
            
            try {
                // Force fresh API calls with cache busting
                const timestamp = Date.now();
                
                // Refresh contacts
                console.log('Refreshing contacts...');
                await fetch(`/api/contacts?_t=${timestamp}`)
                    .then(response => response.json())
                    .then(result => {
                        if (result.success) {
                            contacts = result.data.contacts;
                            totalContacts = result.data.pagination.totalContacts;
                            updateContactCount();
                            updateAllContactsDisplay();
                            updateOpenModalDropdowns();
                            console.log(`Loaded ${contacts.length} contacts`);
                        }
                    });
                
                // Refresh appointments
                console.log('Refreshing appointments...');
                await fetch(`/api/appointments/today?_t=${timestamp}`)
                    .then(response => response.json())
                    .then(result => {
                        if (result.success && result.appointments) {
                            appointments = result.appointments.map(apt => ({
                                id: apt.id,
                                time: apt.appointmentTime ? apt.appointmentTime.substring(0, 5) : '00:00',
                                duration: apt.duration || 30,
                                contact: apt.customerName,
                                phone: apt.customerPhone || '',
                                purpose: apt.purpose || 'General consultation',
                                status: apt.status || 'confirmed',
                                confirmationCode: apt.confirmationCode
                            }));
                            updateAllAppointmentsDisplay();
                            updateAppointmentsCount();
                            console.log(`Loaded ${appointments.length} appointments`);
                        } else {
                            console.warn('No appointments returned from API');
                            appointments = [];
                            updateAllAppointmentsDisplay();
                            updateAppointmentsCount();
                        }
                    });
                
                // Refresh messages
                console.log('Refreshing messages...');
                await loadTodaysMessages();
                
                // Refresh calls
                console.log('Refreshing calls...');
                await loadTodaysCalls();
                
                showToast('All data refreshed successfully', 'success', '<i class="fas fa-sync-alt"></i>');
                console.log('Complete data refresh finished');
                
            } catch (error) {
                console.error('Error during refresh:', error);
                showToast('Refresh failed: ' + error.message, 'error', '<i class="fas fa-exclamation-circle"></i>');
                
                // Restore original counts on error
                updateContactCount();
                updateAppointmentsCount();
                updateMessagesCount();
                updateCallsCount();
            }
        }

        // ==================== QUICK ACTIONS FUNCTIONALITY ====================
        
        // Dropdown menu management
        let activeDropdown = null;
        
        function toggleDropdown(dropdownName) {
            const menu = document.getElementById(`${dropdownName}-menu`);
            
            // Close other dropdowns
            if (activeDropdown && activeDropdown !== dropdownName) {
                const otherMenu = document.getElementById(`${activeDropdown}-menu`);
                if (otherMenu) {
                    otherMenu.classList.add('hidden');
                }
            }
            
            // Toggle current dropdown
            if (menu.classList.contains('hidden')) {
                menu.classList.remove('hidden');
                activeDropdown = dropdownName;
            } else {
                menu.classList.add('hidden');
                activeDropdown = null;
            }
        }
        
        // Close dropdowns when clicking outside
        document.addEventListener('click', function(event) {
            if (activeDropdown && !event.target.closest(`#${activeDropdown}-dropdown`)) {
                const menu = document.getElementById(`${activeDropdown}-menu`);
                if (menu) {
                    menu.classList.add('hidden');
                    activeDropdown = null;
                }
            }
        });
        
        // Modal management
        function openModal(modalId) {
            document.getElementById(modalId).classList.remove('hidden');
            // Close any open dropdowns
            if (activeDropdown) {
                const menu = document.getElementById(`${activeDropdown}-menu`);
                if (menu) {
                    menu.classList.add('hidden');
                    activeDropdown = null;
                }
            }
        }
        
        function closeModal(modalId) {
            document.getElementById(modalId).classList.add('hidden');
            // Clear any status messages
            const statusEl = document.querySelector(`#${modalId} [id$="Status"]`);
            if (statusEl) {
                statusEl.classList.add('hidden');
            }
            // Reset forms
            const form = document.querySelector(`#${modalId} form`);
            if (form) {
                form.reset();
            }
        }
        
        // Quick action functions
        function showQuickCreateContact() {
            openModal('quickCreateContactModal');
        }
        
        function showQuickSearchContact() {
            openModal('quickSearchContactModal');
            document.getElementById('quickSearchInput').focus();
        }
        
        function showQuickUpdateEmail() {
            openModal('quickUpdateEmailModal');
            populateContactDropdown('quickUpdateEmailContactSelect', false, true); // Show email addresses
            document.getElementById('quickUpdateEmailName').focus();
        }
        
        function showQuickUpdatePhone() {
            openModal('quickUpdatePhoneModal');
            populateContactDropdown('quickUpdatePhoneContactSelect', true, false); // Show phone numbers
            document.getElementById('quickUpdatePhoneName').focus();
        }
        
        function showQuickCreateAppointment() {
            openModal('quickCreateAppointmentModal');
            populateContactDropdown('quickAppointmentContactSelect', false, false); // Show names only
            // Set default date to today
            const today = new Date().toISOString().split('T')[0];
            document.getElementById('quickAppointmentDate').value = today;
            // Set default time to next hour
            const now = new Date();
            now.setHours(now.getHours() + 1, 0, 0, 0);
            document.getElementById('quickAppointmentTime').value = now.toTimeString().slice(0, 5);
        }
        
        // Quick update appointment function (shows today's appointments for editing)
        function showQuickUpdateAppointment() {
            if (appointments.length === 0) {
                showToast('No appointments to update', 'info', '<i class="fas fa-info-circle"></i>');
                return;
            }
            
            // Show a selection modal for appointments to update
            showAppointmentSelectionModal();
        }

        // Show appointment selection modal
        function showAppointmentSelectionModal() {
            // Create the modal content dynamically
            const modalHtml = `
                <div id="appointmentSelectionModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
                    <div class="card rounded-lg p-6 w-full max-w-lg mx-4">
                        <div class="flex justify-between items-center mb-4">
                            <h3 class="text-lg font-semibold text-gray-900">Select Appointment to Edit</h3>
                            <button onclick="closeAppointmentSelectionModal()" class="text-gray-400 hover:text-gray-600">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                        
                        <div class="mb-4">
                            <p class="text-sm text-gray-600">Click on an appointment to edit it:</p>
                        </div>
                        
                        <div id="appointmentSelectionList" class="space-y-2 max-h-64 overflow-y-auto">
                            ${appointments.map(apt => `
                                <div class="border border-gray-200 rounded-lg p-3 hover:bg-gray-50 cursor-pointer transition duration-200" onclick="selectAppointmentToEdit(${apt.id})">
                                    <div class="flex items-center justify-between">
                                        <div>
                                            <h4 class="font-semibold">${apt.purpose}</h4>
                                            <p class="text-sm text-gray-600">${apt.contact} • ${apt.time} • ${apt.duration}min</p>
                                            <span class="inline-block px-2 py-1 rounded-full text-xs ${apt.status === 'confirmed' ? 'bg-green-100 text-green-800' : apt.status === 'pending' ? 'bg-yellow-100 text-yellow-800' : 'bg-red-100 text-red-800'}">
                                                ${apt.status}
                                            </span>
                                        </div>
                                        <i class="fas fa-edit text-blue-500"></i>
                                    </div>
                                </div>
                            `).join('')}
                        </div>
                        
                        <div class="mt-4 flex justify-end">
                            <button onclick="closeAppointmentSelectionModal()" 
                                    style="background-color: #d1d5db !important; color: #374151 !important;"
                                    class="px-4 py-2 rounded-lg font-medium transition duration-200 hover:bg-gray-400">
                                Close
                            </button>
                        </div>
                    </div>
                </div>
            `;
            
            // Add modal to page
            document.body.insertAdjacentHTML('beforeend', modalHtml);
        }

        // Close appointment selection modal
        function closeAppointmentSelectionModal() {
            const modal = document.getElementById('appointmentSelectionModal');
            if (modal) {
                modal.remove();
            }
        }

        // Select appointment to edit from the selection modal
        function selectAppointmentToEdit(appointmentId) {
            closeAppointmentSelectionModal();
            editAppointment(appointmentId);
        }
        
        function showTodaysAppointments() {
            // Scroll to appointments section
            const appointmentsSection = document.querySelector('.border-green-500');
            if (appointmentsSection) {
                appointmentsSection.scrollIntoView({ behavior: 'smooth' });
            }
        }
        
        // Contact dropdown management
        function populateContactDropdown(selectId, showPhone = false, showEmail = false) {
            const select = document.getElementById(selectId);
            if (!select) return;
            
            // Clear existing options
            select.innerHTML = '<option value="">Select a contact...</option>';
            
            // Add contacts to dropdown
            contacts.forEach(contact => {
                const option = document.createElement('option');
                option.value = JSON.stringify({
                    id: contact.id,
                    name: contact.fullName,
                    phone: contact.phone || '',
                    email: contact.email || ''
                });
                
                let displayText = contact.fullName;
                if (showPhone && contact.phone) {
                    displayText += ` (${contact.phone})`;
                }
                if (showEmail && contact.email) {
                    displayText += ` - ${contact.email}`;
                }
                
                option.textContent = displayText;
                select.appendChild(option);
            });
            
            // Add manual entry option
            const manualOption = document.createElement('option');
            manualOption.value = 'manual';
            manualOption.textContent = '➕ Enter manually...';
            select.appendChild(manualOption);
        }
        
        // Handle contact selection for SMS
        function handleSMSContactSelection() {
            const select = document.getElementById('quickSMSContactSelect');
            const recipientInput = document.getElementById('quickSMSRecipient');
            
            if (!select || !recipientInput) return;
            
            select.addEventListener('change', function() {
                const selectedValue = this.value;
                
                if (selectedValue === 'manual') {
                    recipientInput.value = '';
                    recipientInput.focus();
                    recipientInput.placeholder = 'Enter phone number or contact name';
                } else if (selectedValue) {
                    try {
                        const contactData = JSON.parse(selectedValue);
                        recipientInput.value = contactData.phone || contactData.name;
                        recipientInput.placeholder = `Selected: ${contactData.name}`;
                    } catch (e) {
                        console.error('Error parsing contact data:', e);
                    }
                } else {
                    recipientInput.value = '';
                    recipientInput.placeholder = 'Contact Name or Phone Number';
                }
            });
        }

        // Add missing contact selection handlers for update forms
        function handleUpdateEmailContactSelection() {
            const select = document.getElementById('quickUpdateEmailContactSelect');
            const nameInput = document.getElementById('quickUpdateEmailName');
            const currentEmailInput = document.getElementById('quickUpdateEmailCurrent');
            
            if (!select || !nameInput || !currentEmailInput) return;
            
            select.addEventListener('change', function() {
                const selectedValue = this.value;
                
                if (selectedValue === 'manual') {
                    nameInput.value = '';
                    currentEmailInput.value = '';
                    nameInput.focus();
                    nameInput.placeholder = 'Enter contact name';
                    currentEmailInput.placeholder = 'Current email will appear here';
                } else if (selectedValue) {
                    try {
                        const contactData = JSON.parse(selectedValue);
                        nameInput.value = contactData.name;
                        currentEmailInput.value = contactData.email || 'No email on file';
                        nameInput.placeholder = `Selected: ${contactData.name}`;
                        currentEmailInput.placeholder = contactData.email || 'No current email';
                    } catch (e) {
                        console.error('Error parsing contact data:', e);
                        nameInput.value = '';
                        currentEmailInput.value = '';
                    }
                } else {
                    nameInput.value = '';
                    currentEmailInput.value = '';
                    nameInput.placeholder = 'Contact Name';
                    currentEmailInput.placeholder = 'Current email will appear here';
                }
            });
        }

        function handleUpdatePhoneContactSelection() {
            const select = document.getElementById('quickUpdatePhoneContactSelect');
            const nameInput = document.getElementById('quickUpdatePhoneName');
            const currentPhoneInput = document.getElementById('quickUpdatePhoneCurrent');
            
            if (!select || !nameInput || !currentPhoneInput) return;
            
            select.addEventListener('change', function() {
                const selectedValue = this.value;
                
                if (selectedValue === 'manual') {
                    nameInput.value = '';
                    currentPhoneInput.value = '';
                    nameInput.focus();
                    nameInput.placeholder = 'Enter contact name';
                    currentPhoneInput.placeholder = 'Current phone will appear here';
                } else if (selectedValue) {
                    try {
                        const contactData = JSON.parse(selectedValue);
                        nameInput.value = contactData.name;
                        currentPhoneInput.value = contactData.phone || 'No phone on file';
                        nameInput.placeholder = `Selected: ${contactData.name}`;
                        currentPhoneInput.placeholder = contactData.phone || 'No current phone';
                    } catch (e) {
                        console.error('Error parsing contact data:', e);
                        nameInput.value = '';
                        currentPhoneInput.value = '';
                    }
                } else {
                    nameInput.value = '';
                    currentPhoneInput.value = '';
                    nameInput.placeholder = 'Contact Name';
                    currentPhoneInput.placeholder = 'Current phone will appear here';
                }
            });
        }
        
        // Handle contact selection for Email
        function handleEmailContactSelection() {
            const select = document.getElementById('quickEmailContactSelect');
            const recipientInput = document.getElementById('quickEmailRecipient');
            
            if (!select || !recipientInput) return;
            
            select.addEventListener('change', function() {
                const selectedValue = this.value;
                
                if (selectedValue === 'manual') {
                    recipientInput.value = '';
                    recipientInput.focus();
                    recipientInput.placeholder = 'Enter email address or contact name';
                } else if (selectedValue) {
                    try {
                        const contactData = JSON.parse(selectedValue);
                        recipientInput.value = contactData.email || contactData.name;
                        recipientInput.placeholder = `Selected: ${contactData.name}`;
                    } catch (e) {
                        console.error('Error parsing contact data:', e);
                    }
                } else {
                    recipientInput.value = '';
                    recipientInput.placeholder = 'Contact Name or Email';
                }
            });
        }
        
        // Handle contact selection for Appointments
        function handleAppointmentContactSelection() {
            const select = document.getElementById('quickAppointmentContactSelect');
            const contactInput = document.getElementById('quickAppointmentContact');
            
            if (!select || !contactInput) return;
            
            select.addEventListener('change', function() {
                const selectedValue = this.value;
                
                if (selectedValue === 'manual') {
                    contactInput.value = '';
                    contactInput.focus();
                    contactInput.placeholder = 'Enter contact name';
                } else if (selectedValue) {
                    try {
                        const contactData = JSON.parse(selectedValue);
                        contactInput.value = contactData.name;
                        contactInput.placeholder = `Selected: ${contactData.name}`;
                    } catch (e) {
                        console.error('Error parsing contact data:', e);
                    }
                } else {
                    contactInput.value = '';
                    contactInput.placeholder = 'Contact Name';
                }
            });
        }
        
        // Updated quick action functions to populate dropdowns
        function showQuickSMS() {
            openModal('quickSMSModal');
            populateContactDropdown('quickSMSContactSelect', true, false); // Show phone numbers
            document.getElementById('quickSMSRecipient').focus();
        }
        
        function showQuickEmail() {
            // Reload Credits functionality
function showReloadCreditsModal() {
    openModal('reloadCreditsModal');
}

function setupReloadCreditsForm() {
    const form = document.getElementById('reloadCreditsForm');
    if (!form) return;
    
    // Remove existing listeners to prevent duplicates
    const newForm = form.cloneNode(true);
    form.parentNode.replaceChild(newForm, form);
    
    newForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        e.stopPropagation();
        
        const amount = document.getElementById('reloadAmount').value;
        const status = document.getElementById('reloadCreditsStatus');
        const submitButton = newForm.querySelector('button[type="submit"]');
        
        if (submitButton) {
            submitButton.disabled = true;
            submitButton.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Processing...';
        }
        
        try {
            // Simulate credit reload (since Stripe is not configured)
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            status.className = 'mt-4 p-3 rounded bg-green-100 text-green-800';
            status.innerHTML = `<i class="fas fa-check-circle mr-2"></i>$${amount} credits added successfully! (Demo mode)`;
            status.classList.remove('hidden');
            
            // Refresh credit balance display
            await updateCreditBalance();
            
            showToast(`$${amount} credits added`, 'success', '<i class="fas fa-credit-card"></i>');
            
            setTimeout(() => {
                closeModal('reloadCreditsModal');
            }, 2000);
            
        } catch (error) {
            status.className = 'mt-4 p-3 rounded bg-red-100 text-red-800';
            status.innerHTML = `<i class="fas fa-exclamation-circle mr-2"></i>Error: ${error.message}`;
            status.classList.remove('hidden');
        } finally {
            if (submitButton) {
                submitButton.disabled = false;
                submitButton.innerHTML = '<i class="fas fa-credit-card mr-2"></i>Add Credits';
            }
        }
    });
}
            openModal('quickEmailModal');
            populateContactDropdown('quickEmailContactSelect', false, true); // Show email addresses
            document.getElementById('quickEmailRecipient').focus();
        }
        
        function activateVoiceCommand() {
            openModal('voiceCommandModal');
        }

        // Debouncer to prevent duplicate API calls
        function createDebouncer(delay) {
            let timeoutId;
            let isProcessing = false;
            
            return function(func) {
                return new Promise((resolve, reject) => {
                    if (isProcessing) {
                        console.warn('Operation already in progress, skipping duplicate request');
                        return reject(new Error('Duplicate request prevented'));
                    }
                    
                    clearTimeout(timeoutId);
                    timeoutId = setTimeout(async () => {
                        if (isProcessing) return;
                        
                        isProcessing = true;
                        try {
                            const result = await func();
                            resolve(result);
                        } catch (error) {
                            reject(error);
                        } finally {
                            isProcessing = false;
                        }
                    }, delay);
                });
            };
        }

        // Create debouncer instances
        const debouncedContactCreate = createDebouncer(1000);
        const debouncedEmailUpdate = createDebouncer(1000);
        const debouncedPhoneUpdate = createDebouncer(1000);
        const debouncedAppointmentCreate = createDebouncer(2000);
        
        // Form handlers
        function setupQuickCreateForm() {
            const form = document.getElementById('quickCreateForm');
            if (!form) return;
            
            // Remove existing listeners to prevent duplicates
            const newForm = form.cloneNode(true);
            form.parentNode.replaceChild(newForm, form);
            
            newForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                e.stopPropagation();
                
                // Use debouncer to prevent duplicate submissions
                return debouncedContactCreate(async () => {
                    const submitButton = newForm.querySelector('button[type="submit"]');
                    
                    // Prevent double submission
                    if (submitButton && submitButton.disabled) {
                        console.warn('Form already submitting, ignoring duplicate');
                        return;
                    }
                    
                    const formData = {
                        firstName: document.getElementById('quickFirstName').value,
                        lastName: document.getElementById('quickLastName').value,
                        email: document.getElementById('quickEmail').value,
                        phone: document.getElementById('quickPhone').value,
                        company: document.getElementById('quickCompany').value,
                        source: 'quick_action'
                    };
                    
                    const status = document.getElementById('quickCreateStatus');
                    
                    // Disable submit button immediately
                    if (submitButton) {
                        submitButton.disabled = true;
                        const originalText = submitButton.innerHTML;
                        submitButton.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Creating...';
                        
                        // Re-enable after delay
                        setTimeout(() => {
                            submitButton.disabled = false;
                            submitButton.innerHTML = originalText;
                        }, 3000);
                    }
                    
                    try {
                        console.log('Creating contact:', formData);
                        
                        const response = await fetch('/api/contacts', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(formData)
                        });
                        
                        const result = await response.json();
                        console.log('Contact creation response:', result);
                        
                        if (result.success) {
                            status.className = 'mt-4 p-3 rounded bg-green-100 text-green-800';
                            status.innerHTML = `<i class="fas fa-check-circle mr-2"></i>${result.message}`;
                            status.classList.remove('hidden');
                            
                            newForm.reset();
                            await loadContacts();
                            
                            showToast('Contact created successfully!', 'success', '<i class="fas fa-user-plus"></i>');
                            
                            setTimeout(() => {
                                closeModal('quickCreateContactModal');
                            }, 2000);
                        } else {
                            throw new Error(result.error || 'Failed to create contact');
                        }
                    } catch (error) {
                        console.error('Error creating contact:', error);
                        status.className = 'mt-4 p-3 rounded bg-red-100 text-red-800';
                        status.innerHTML = `<i class="fas fa-exclamation-circle mr-2"></i>Error: ${error.message}`;
                        status.classList.remove('hidden');
                        
                        showToast('Failed to create contact: ' + error.message, 'error', '<i class="fas fa-exclamation-circle"></i>');
                    }
                }).catch(error => {
                    if (error.message !== 'Duplicate request prevented') {
                        console.error('Debounced contact creation error:', error);
                    }
                });
            });
        }
        
        async function performQuickSearch() {
            const query = document.getElementById('quickSearchInput').value.trim();
            if (!query) return;
            
            const resultsContainer = document.getElementById('quickSearchResults');
            
            try {
                const response = await fetch(`/api/contacts/search/${encodeURIComponent(query)}`);
                const result = await response.json();
                
                if (result.success && result.data.contacts.length > 0) {
                    resultsContainer.innerHTML = result.data.contacts.map(contact => `
                        <div class="border border-gray-200 rounded-lg p-3 hover:bg-gray-50">
                            <h4 class="font-semibold">${contact.fullName}</h4>
                            <p class="text-sm text-gray-600">${contact.phone} • ${contact.email}</p>
                            <div class="flex space-x-2 mt-2">
                                <button onclick="callContact('${contact.phone}')" class="bg-blue-500 text-white px-2 py-1 rounded text-xs">
                                    <i class="fas fa-phone"></i> Call
                                </button>
                                <button onclick="textContact('${contact.phone}')" class="bg-green-500 text-white px-2 py-1 rounded text-xs">
                                    <i class="fas fa-sms"></i> Text
                                </button>
                            </div>
                        </div>
                    `).join('');
                } else {
                    resultsContainer.innerHTML = '<p class="text-gray-500 text-center py-4">No contacts found</p>';
                }
            } catch (error) {
                resultsContainer.innerHTML = '<p class="text-red-500 text-center py-4">Search failed</p>';
                showToast('Search failed', 'error', '<i class="fas fa-exclamation-circle"></i>');
            }
        }
        
        function setupQuickUpdateEmailForm() {
            const form = document.getElementById('quickUpdateEmailForm');
            if (!form) return;
            
            // Remove existing listeners to prevent duplicates
            const newForm = form.cloneNode(true);
            form.parentNode.replaceChild(newForm, form);
            
            newForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                e.stopPropagation();
                
                // Use debouncer to prevent duplicate submissions
                return debouncedEmailUpdate(async () => {
                    const submitButton = newForm.querySelector('button[type="submit"]');
                    
                    // Prevent double submission
                    if (submitButton && submitButton.disabled) {
                        console.warn('Email update already in progress');
                        return;
                    }
                    
                    // Get contact from either dropdown selection or manual input
                    const contactSelect = document.getElementById('quickUpdateEmailContactSelect');
                    const nameInput = document.getElementById('quickUpdateEmailName');
                    
                    let contactName = nameInput.value.trim();
                    let contactId = null;
                    
                    // If a contact was selected from dropdown, get the details
                    if (contactSelect.value && contactSelect.value !== 'manual') {
                        try {
                            const contactData = JSON.parse(contactSelect.value);
                            contactName = contactData.name;
                            contactId = contactData.id;
                        } catch (e) {
                            contactName = nameInput.value.trim();
                        }
                    }
                    
                    const newEmail = document.getElementById('quickUpdateEmailValue').value;
                    const status = document.getElementById('quickUpdateEmailStatus');
                    
                    if (!contactName || !newEmail) {
                        status.className = 'mt-4 p-3 rounded bg-yellow-100 text-yellow-800';
                        status.innerHTML = '<i class="fas fa-exclamation-triangle mr-2"></i>Please select a contact and enter a new email address';
                        status.classList.remove('hidden');
                        showToast('Please fill in all fields', 'warning', '<i class="fas fa-exclamation-triangle"></i>');
                        return;
                    }
                    
                    // Disable submit button
                    if (submitButton) {
                        submitButton.disabled = true;
                        const originalText = submitButton.innerHTML;
                        submitButton.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Updating...';
                        
                        setTimeout(() => {
                            submitButton.disabled = false;
                            submitButton.innerHTML = originalText;
                        }, 3000);
                    }
                    
                    try {
                        let updateResponse;
                        
                        if (contactId) {
                            // Update by ID if we have it
                            console.log(`Updating contact ID ${contactId} email to:`, newEmail);
                            updateResponse = await fetch(`/api/contacts/${contactId}`, {
                                method: 'PUT',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({ email: newEmail })
                            });
                        } else {
                            // Search for contact by name first, then update
                            console.log(`Searching for contact: ${contactName}`);
                            const searchResponse = await fetch(`/api/contacts/search/${encodeURIComponent(contactName)}`);
                            const searchResult = await searchResponse.json();
                            
                            if (searchResult.success && searchResult.data.contacts.length > 0) {
                                const foundContact = searchResult.data.contacts[0];
                                console.log(`Found contact, updating email:`, foundContact);
                                
                                updateResponse = await fetch(`/api/contacts/${foundContact.id}`, {
                                    method: 'PUT',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({ email: newEmail })
                                });
                            } else {
                                throw new Error(`Contact "${contactName}" not found`);
                            }
                        }
                        
                        if (updateResponse && updateResponse.ok) {
                            const result = await updateResponse.json();
                            
                            if (result.success) {
                                status.className = 'mt-4 p-3 rounded bg-green-100 text-green-800';
                                status.innerHTML = `<i class="fas fa-check-circle mr-2"></i>Email updated for ${contactName} to ${newEmail}!`;
                                status.classList.remove('hidden');
                                
                                newForm.reset();
                                
                                // Reset dropdown
                                const select = document.getElementById('quickUpdateEmailContactSelect');
                                if (select) select.selectedIndex = 0;
                                
                                // Clear current email display
                                const currentEmailInput = document.getElementById('quickUpdateEmailCurrent');
                                if (currentEmailInput) currentEmailInput.value = '';
                                
                                await loadContacts();
                                
                                showToast(`Email updated for ${contactName}`, 'success', '<i class="fas fa-envelope"></i>');
                                
                                setTimeout(() => {
                                    closeModal('quickUpdateEmailModal');
                                }, 2000);
                            } else {
                                throw new Error(result.error || 'Failed to update email');
                            }
                        } else {
                            throw new Error('Failed to update contact email');
                        }
                    } catch (error) {
                        console.error('Error updating email:', error);
                        status.className = 'mt-4 p-3 rounded bg-red-100 text-red-800';
                        status.innerHTML = `<i class="fas fa-exclamation-circle mr-2"></i>Error: ${error.message}`;
                        status.classList.remove('hidden');
                        
                        showToast('Failed to update email: ' + error.message, 'error', '<i class="fas fa-exclamation-circle"></i>');
                    }
                }).catch(error => {
                    if (error.message !== 'Duplicate request prevented') {
                        console.error('Debounced email update error:', error);
                    }
                });
            });
        }
        
        function setupQuickUpdatePhoneForm() {
            const form = document.getElementById('quickUpdatePhoneForm');
            if (!form) return;
            
            // Remove existing listeners to prevent duplicates
            const newForm = form.cloneNode(true);
            form.parentNode.replaceChild(newForm, form);
            
            newForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                e.stopPropagation();
                
                // Use debouncer to prevent duplicate submissions
                return debouncedPhoneUpdate(async () => {
                    const submitButton = newForm.querySelector('button[type="submit"]');
                    
                    // Prevent double submission
                    if (submitButton && submitButton.disabled) {
                        console.warn('Phone update already in progress');
                        return;
                    }
                    
                    // Get contact from either dropdown selection or manual input
                    const contactSelect = document.getElementById('quickUpdatePhoneContactSelect');
                    const nameInput = document.getElementById('quickUpdatePhoneName');
                    
                    let contactName = nameInput.value.trim();
                    let contactId = null;
                    
                    // If a contact was selected from dropdown, get the details
                    if (contactSelect.value && contactSelect.value !== 'manual') {
                        try {
                            const contactData = JSON.parse(contactSelect.value);
                            contactName = contactData.name;
                            contactId = contactData.id;
                        } catch (e) {
                            contactName = nameInput.value.trim();
                        }
                    }
                    
                    const newPhone = document.getElementById('quickUpdatePhoneValue').value;
                    const status = document.getElementById('quickUpdatePhoneStatus');
                    
                    if (!contactName || !newPhone) {
                        status.className = 'mt-4 p-3 rounded bg-yellow-100 text-yellow-800';
                        status.innerHTML = '<i class="fas fa-exclamation-triangle mr-2"></i>Please select a contact and enter a new phone number';
                        status.classList.remove('hidden');
                        showToast('Please fill in all fields', 'warning', '<i class="fas fa-exclamation-triangle"></i>');
                        return;
                    }
                    
                    // Disable submit button
                    if (submitButton) {
                        submitButton.disabled = true;
                        const originalText = submitButton.innerHTML;
                        submitButton.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Updating...';
                        
                        setTimeout(() => {
                            submitButton.disabled = false;
                            submitButton.innerHTML = originalText;
                        }, 3000);
                    }
                    
                    try {
                        let updateResponse;
                        
                        if (contactId) {
                            // Update by ID if we have it
                            console.log(`Updating contact ID ${contactId} phone to:`, newPhone);
                            updateResponse = await fetch(`/api/contacts/${contactId}`, {
                                method: 'PUT',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({ phone: newPhone })
                            });
                        } else {
                            // Search for contact by name first, then update
                            console.log(`Searching for contact: ${contactName}`);
                            const searchResponse = await fetch(`/api/contacts/search/${encodeURIComponent(contactName)}`);
                            const searchResult = await searchResponse.json();
                            
                            if (searchResult.success && searchResult.data.contacts.length > 0) {
                                const foundContact = searchResult.data.contacts[0];
                                console.log(`Found contact, updating phone:`, foundContact);
                                
                                updateResponse = await fetch(`/api/contacts/${foundContact.id}`, {
                                    method: 'PUT',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({ phone: newPhone })
                                });
                            } else {
                                throw new Error(`Contact "${contactName}" not found`);
                            }
                        }
                        
                        if (updateResponse && updateResponse.ok) {
                            const result = await updateResponse.json();
                            
                            if (result.success) {
                                status.className = 'mt-4 p-3 rounded bg-green-100 text-green-800';
                                status.innerHTML = `<i class="fas fa-check-circle mr-2"></i>Phone updated for ${contactName} to ${newPhone}!`;
                                status.classList.remove('hidden');
                                
                                newForm.reset();
                                
                                // Reset dropdown
                                const select = document.getElementById('quickUpdatePhoneContactSelect');
                                if (select) select.selectedIndex = 0;
                                
                                // Clear current phone display
                                const currentPhoneInput = document.getElementById('quickUpdatePhoneCurrent');
                                if (currentPhoneInput) currentPhoneInput.value = '';
                                
                                await loadContacts();
                                
                                showToast(`Phone updated for ${contactName}`, 'success', '<i class="fas fa-phone"></i>');
                                
                                setTimeout(() => {
                                    closeModal('quickUpdatePhoneModal');
                                }, 2000);
                            } else {
                                throw new Error(result.error || 'Failed to update phone');
                            }
                        } else {
                            throw new Error('Failed to update contact phone');
                        }
                    } catch (error) {
                        console.error('Error updating phone:', error);
                        status.className = 'mt-4 p-3 rounded bg-red-100 text-red-800';
                        status.innerHTML = `<i class="fas fa-exclamation-circle mr-2"></i>Error: ${error.message}`;
                        status.classList.remove('hidden');
                        
                        showToast('Failed to update phone: ' + error.message, 'error', '<i class="fas fa-exclamation-circle"></i>');
                    }
                }).catch(error => {
                    if (error.message !== 'Duplicate request prevented') {
                        console.error('Debounced phone update error:', error);
                    }
                });
            });
        }

        function setupQuickCreateAppointmentForm() {
            const form = document.getElementById('quickCreateAppointmentForm');
            if (!form) return;
            
            // Remove existing listeners to prevent duplicates
            const newForm = form.cloneNode(true);
            form.parentNode.replaceChild(newForm, form);
            
            newForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                e.stopPropagation();
                
                // Prevent double submission with debouncing
                return debouncedAppointmentCreate(async () => {
                    const submitButton = newForm.querySelector('button[type="submit"]');
                    
                    // Disable submit button to prevent double clicks
                    if (submitButton && submitButton.disabled) {
                        console.warn('Appointment form already submitting, ignoring duplicate');
                        return;
                    }
                    
                    const title = document.getElementById('quickAppointmentTitle').value;
                    
                    // Get contact from either dropdown selection or manual input
                    const contactSelect = document.getElementById('quickAppointmentContactSelect');
                    const contactInput = document.getElementById('quickAppointmentContact');
                    
                    let contact = contactInput.value.trim();
                    let contactPhone = '';
                    
                    // If a contact was selected from dropdown, get the details
                    if (contactSelect.value && contactSelect.value !== 'manual') {
                        try {
                            const contactData = JSON.parse(contactSelect.value);
                            contact = contactData.name;
                            contactPhone = contactData.phone || '+1234567890'; // Fallback phone
                        } catch (e) {
                            // Fallback to manual input
                            contact = contactInput.value.trim();
                            contactPhone = '+1234567890'; // Placeholder phone
                        }
                    }
                    
                    const date = document.getElementById('quickAppointmentDate').value;
                    const time = document.getElementById('quickAppointmentTime').value;
                    const duration = document.getElementById('quickAppointmentDuration').value;
                    const status = document.getElementById('quickCreateAppointmentStatus');
                    
                    if (!title || !contact || !date || !time || !duration) {
                        showToast('Please fill in all fields', 'warning', '<i class="fas fa-exclamation-triangle"></i>');
                        return;
                    }
                    
                    // Check for scheduling conflicts
                    const conflictingAppointment = appointments.find(apt => {
                        return apt.time === time && 
                               apt.status !== 'cancelled' && 
                               apt.status !== 'completed';
                    });

                    if (conflictingAppointment) {
                        showToast(`Time slot ${time} is already booked for ${conflictingAppointment.contact}`, 'error', '<i class="fas fa-calendar-times"></i>');
                        
                        // Highlight the conflicting time input
                        const timeInput = document.getElementById('quickAppointmentTime');
                        if (timeInput) {
                            timeInput.style.borderColor = '#ef4444';
                            timeInput.style.backgroundColor = '#fef2f2';
                            
                            // Reset styling after 3 seconds
                            setTimeout(() => {
                                timeInput.style.borderColor = '';
                                timeInput.style.backgroundColor = '';
                            }, 3000);
                        }
                        
                        return;
                    }
                    
                    // Disable submit button and show loading state
                    if (submitButton) {
                        submitButton.disabled = true;
                        const originalText = submitButton.innerHTML;
                        submitButton.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Creating...';
                        
                        // Re-enable after delay to prevent rapid clicks
                        setTimeout(() => {
                            submitButton.disabled = false;
                            submitButton.innerHTML = originalText;
                        }, 3000);
                    }
                    
                    // Show loading status
                    if (status) {
                        status.className = 'mt-4 p-3 rounded bg-blue-100 text-blue-800';
                        status.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Creating appointment...';
                        status.classList.remove('hidden');
                    }
                    
                    try {
                        // Simulate API call with realistic delay
                        await new Promise(resolve => setTimeout(resolve, 1500));
                        
                        // Add to appointments array for demo
                        const newAppointment = {
                            id: appointments.length + 1,
                            time: time,
                            duration: parseInt(duration),
                            contact: contact,
                            phone: contactPhone,
                            purpose: title,
                            status: 'confirmed'
                        };
                        
                        appointments.push(newAppointment);
                        appointments.sort((a, b) => a.time.localeCompare(b.time));
                        updateAllAppointmentsDisplay();
                        updateAppointmentsCount();
                        
                        // Show success status
                        if (status) {
                            status.className = 'mt-4 p-3 rounded bg-green-100 text-green-800';
                            status.innerHTML = `<i class="fas fa-check-circle mr-2"></i>Appointment "${title}" created for ${contact}!`;
                        }
                        
                        // Reset form
                        newForm.reset();
                        
                        // Reset dropdown
                        const select = document.getElementById('quickAppointmentContactSelect');
                        if (select) select.selectedIndex = 0;
                        
                        // Single toast notification (no duplicates)
                        showToast(`Appointment created for ${contact}`, 'success', '<i class="fas fa-calendar-plus"></i>', 3000);
                        
                        // Auto-close modal after short delay
                        setTimeout(() => {
                            closeModal('quickCreateAppointmentModal');
                        }, 2000);
                        
                    } catch (error) {
                        console.error('Error creating appointment:', error);
                        
                        if (status) {
                            status.className = 'mt-4 p-3 rounded bg-red-100 text-red-800';
                            status.innerHTML = `<i class="fas fa-exclamation-circle mr-2"></i>Error: ${error.message}`;
                        }
                        
                        showToast('Failed to create appointment', 'error', '<i class="fas fa-exclamation-circle"></i>');
                    }
                });
            });
        }
        
        // FIX: Replace setupQuickSMSForm() function to prevent duplicates
        function setupQuickSMSForm() {
            const form = document.getElementById('quickSMSForm');
            if (!form) return;
            
            // Remove existing listeners to prevent duplicates
            const newForm = form.cloneNode(true);
            form.parentNode.replaceChild(newForm, form);
            
            let isSubmitting = false; // Prevent double submission
            
            newForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                e.stopPropagation();
                
                // Prevent duplicate submissions
                if (isSubmitting) {
                    console.log('SMS form already submitting, ignoring duplicate');
                    return;
                }
                
                const submitButton = newForm.querySelector('button[type="submit"]');
                if (submitButton && submitButton.disabled) {
                    console.log('Submit button disabled, ignoring submission');
                    return;
                }
                
                isSubmitting = true;
                
                // Get recipient from either dropdown selection or manual input
                const contactSelect = document.getElementById('quickSMSContactSelect');
                const recipientInput = document.getElementById('quickSMSRecipient');
                
                let recipient = recipientInput.value.trim();
                let contactName = '';
                
                // If a contact was selected from dropdown, get the phone number
                if (contactSelect.value && contactSelect.value !== 'manual') {
                    try {
                        const contactData = JSON.parse(contactSelect.value);
                        recipient = contactData.phone || contactData.name;
                        contactName = contactData.name;
                    } catch (e) {
                        recipient = recipientInput.value.trim();
                    }
                }
                
                const message = document.getElementById('quickSMSMessage').value;
                const status = document.getElementById('quickSMSStatus');
                
                if (!recipient || !message) {
                    status.className = 'mt-4 p-3 rounded bg-yellow-100 text-yellow-800';
                    status.innerHTML = '<i class="fas fa-exclamation-triangle mr-2"></i>Please select a contact or enter a phone number and message';
                    status.classList.remove('hidden');
                    showToast('Please fill in all fields', 'warning', '<i class="fas fa-exclamation-triangle"></i>');
                    isSubmitting = false;
                    return;
                }
                
                // Disable submit button immediately
                if (submitButton) {
                    submitButton.disabled = true;
                    submitButton.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Sending...';
                }
                
                try {
                    console.log(`Sending single SMS to ${recipient}: ${message}`);
                    
                    // Use the existing SMS endpoint
                    const response = await fetch('/api/messages/sms', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ to: recipient, message: message })
                    });
                    
                    if (response.ok) {
                        const result = await response.json();
                        
                        if (result.success) {
                            const displayName = contactName || recipient;
                            status.className = 'mt-4 p-3 rounded bg-green-100 text-green-800';
                            status.innerHTML = `<i class="fas fa-check-circle mr-2"></i>SMS sent to ${displayName}!`;
                            
                            showToast(`SMS sent to ${displayName}`, 'success', '<i class="fas fa-paper-plane"></i>');
                            
                            // Refresh messages to show the new one
                            setTimeout(async () => {
                                await loadTodaysMessages();
                            }, 1000);
                            
                        } else {
                            throw new Error(result.error || 'Failed to send SMS');
                        }
                    } else {
                        throw new Error('SMS service not available');
                    }
                    
                    status.classList.remove('hidden');
                    newForm.reset();
                    
                    // Reset dropdown
                    const select = document.getElementById('quickSMSContactSelect');
                    if (select) select.selectedIndex = 0;
                    
                    setTimeout(() => {
                        closeModal('quickSMSModal');
                    }, 2000);
                    
                } catch (error) {
                    console.error('SMS send error:', error);
                    status.className = 'mt-4 p-3 rounded bg-red-100 text-red-800';
                    status.innerHTML = `<i class="fas fa-exclamation-circle mr-2"></i>Error: ${error.message}`;
                    status.classList.remove('hidden');
                    
                    showToast('Failed to send SMS: ' + error.message, 'error', '<i class="fas fa-exclamation-circle"></i>');
                } finally {
                    // Always re-enable the button and reset state
                    isSubmitting = false;
                    if (submitButton) {
                        submitButton.disabled = false;
                        submitButton.innerHTML = '<i class="fas fa-paper-plane mr-2"></i>Send SMS';
                    }
                }
            });
        }

        // Setup main SMS form (for the main SMS form in the dashboard)
        function setupSMSForm() {
            const sendButton = document.getElementById('send-sms');
            if (!sendButton) return;
            
            let isMainSMSSubmitting = false; // Prevent double submission
            
            // Remove existing listeners
            const newButton = sendButton.cloneNode(true);
            sendButton.parentNode.replaceChild(newButton, sendButton);
            
            newButton.addEventListener('click', async function() {
                // Prevent duplicate submissions
                if (isMainSMSSubmitting) {
                    console.log('Main SMS form already submitting, ignoring duplicate');
                    return;
                }
                
                if (this.disabled) {
                    console.log('Main SMS button disabled, ignoring click');
                    return;
                }
                
                isMainSMSSubmitting = true;
                
                const status = document.getElementById('sms-status');
                const phone = document.getElementById('test-phone')?.value;
                const message = document.getElementById('test-message')?.value;
                
                if (!phone || !message) {
                    if (status) {
                        status.className = 'mt-4 p-4 rounded-lg bg-yellow-100 text-yellow-800';
                        status.innerHTML = '<i class="fas fa-exclamation-triangle mr-2"></i>Please enter both phone number and message';
                        status.classList.remove('hidden');
                    }
                    showToast('Please enter both phone number and message', 'warning', '<i class="fas fa-exclamation-triangle"></i>');
                    isMainSMSSubmitting = false;
                    return;
                }
                
                // Disable button immediately
                this.disabled = true;
                this.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Sending via Twilio...';
                
                try {
                    console.log(`Sending main SMS to ${phone}: ${message}`);
                    
                    const response = await fetch('/api/messages/sms', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ to: phone, message: message })
                    });
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        if (status) {
                            status.className = 'mt-4 p-4 rounded-lg bg-green-100 text-green-800';
                            status.innerHTML = `<i class="fas fa-check-circle mr-2"></i>SMS sent successfully! Message SID: ${data.twilioSid || data.messageSid}`;
                            status.classList.remove('hidden');
                        }
                        
                        // Clear form
                        const phoneInput = document.getElementById('test-phone');
                        const messageInput = document.getElementById('test-message');
                        if (phoneInput) phoneInput.value = '';
                        if (messageInput) messageInput.value = '';
                        
                        showToast('SMS sent successfully!', 'success', '<i class="fas fa-paper-plane"></i>');
                        
                        // Refresh messages to show the new one
                        setTimeout(async () => {
                            await loadTodaysMessages();
                        }, 1000);
                        
                    } else {
                        throw new Error(data.error || 'Failed to send SMS');
                    }
                } catch (error) {
                    console.error('Main SMS error:', error);
                    if (status) {
                        status.className = 'mt-4 p-4 rounded-lg bg-red-100 text-red-800';
                        status.innerHTML = `<i class="fas fa-exclamation-circle mr-2"></i>Error: ${error.message}`;
                        status.classList.remove('hidden');
                    }
                    showToast('Failed to send SMS: ' + error.message, 'error', '<i class="fas fa-exclamation-circle"></i>');
                } finally {
                    // Always re-enable and reset
                    isMainSMSSubmitting = false;
                    this.disabled = false;
                    this.innerHTML = '<i class="fas fa-paper-plane mr-2"></i>Send SMS via Twilio';
                }
            });
        }
        
        function setupQuickEmailForm() {
            const form = document.getElementById('quickEmailForm');
            if (!form) return;
            
            form.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                // Get recipient from either dropdown selection or manual input
                const contactSelect = document.getElementById('quickEmailContactSelect');
                const recipientInput = document.getElementById('quickEmailRecipient');
                
                let recipient = recipientInput.value.trim();
                let contactName = '';
                
                // If a contact was selected from dropdown, get the email
                if (contactSelect.value && contactSelect.value !== 'manual') {
                    try {
                        const contactData = JSON.parse(contactSelect.value);
                        recipient = contactData.email || contactData.name;
                        contactName = contactData.name;
                    } catch (e) {
                        // Fallback to manual input
                        recipient = recipientInput.value.trim();
                    }
                }
                
                const subject = document.getElementById('quickEmailSubject').value;
                const message = document.getElementById('quickEmailMessage').value;
                const status = document.getElementById('quickEmailStatus');
                
                if (!recipient || !subject || !message) {
                    status.className = 'mt-4 p-3 rounded bg-yellow-100 text-yellow-800';
                    status.innerHTML = '<i class="fas fa-exclamation-triangle mr-2"></i>Please fill in all fields';
                    status.classList.remove('hidden');
                    showToast('Please fill in all fields', 'warning', '<i class="fas fa-exclamation-triangle"></i>');
                    return;
                }
                
                try {
                    // Simulate email sending for demo - replace with actual endpoint
                    await new Promise(resolve => setTimeout(resolve, 1500));
                    
                    const displayName = contactName || recipient;
                    status.className = 'mt-4 p-3 rounded bg-green-100 text-green-800';
                    status.innerHTML = `<i class="fas fa-check-circle mr-2"></i>Email sent to ${displayName}!`;
                    status.classList.remove('hidden');
                    
                    form.reset();
                    
                    // Reset dropdown
                    const select = document.getElementById('quickEmailContactSelect');
                    if (select) select.selectedIndex = 0;
                    
                    showToast(`Email sent to ${displayName}`, 'success', '<i class="fas fa-envelope"></i>');
                    
                    setTimeout(() => {
                        closeModal('quickEmailModal');
                    }, 2000);
                } catch (error) {
                    status.className = 'mt-4 p-3 rounded bg-red-100 text-red-800';
                    status.innerHTML = `<i class="fas fa-exclamation-circle mr-2"></i>Error: ${error.message}`;
                    status.classList.remove('hidden');
                    
                    showToast('Failed to send email', 'error', '<i class="fas fa-exclamation-circle"></i>');
                }
            });
        }
        
        // Voice Command functionality
        let voiceRecognition = null;
        let isVoiceListening = false;
        
        function initVoiceRecognition() {
            if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
                const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
                voiceRecognition = new SpeechRecognition();
                
                voiceRecognition.continuous = false;
                voiceRecognition.interimResults = true;
                voiceRecognition.lang = 'en-US';
                
                voiceRecognition.onstart = function() {
                    isVoiceListening = true;
                    document.getElementById('voiceIndicator').className = 'w-20 h-20 bg-green-500 rounded-full flex items-center justify-center text-white text-2xl mx-auto animate-pulse';
                    document.getElementById('voiceStatus').textContent = 'Listening... speak your command';
                    document.getElementById('startVoiceBtn').disabled = true;
                    document.getElementById('stopVoiceBtn').disabled = false;
                };
                
                voiceRecognition.onresult = function(event) {
                    let transcript = '';
                    for (let i = event.resultIndex; i < event.results.length; i++) {
                        transcript += event.results[i][0].transcript;
                    }
                    document.getElementById('voiceTranscript').textContent = transcript;
                    
                    if (event.results[event.results.length - 1].isFinal) {
                        processVoiceCommand(transcript);
                    }
                };
                
                voiceRecognition.onerror = function(event) {
                    console.error('Voice recognition error:', event.error);
                    stopVoiceListening();
                    document.getElementById('voiceStatus').textContent = 'Error: ' + event.error;
                    showToast('Voice recognition error: ' + event.error, 'error', '<i class="fas fa-microphone-slash"></i>');
                };
                
                voiceRecognition.onend = function() {
                    stopVoiceListening();
                };
                
                return true;
            }
            return false;
        }
        
        function startVoiceListening() {
            if (voiceRecognition && !isVoiceListening) {
                voiceRecognition.start();
            }
        }
        
        function stopVoiceListening() {
            if (voiceRecognition && isVoiceListening) {
                voiceRecognition.stop();
            }
            isVoiceListening = false;
            document.getElementById('voiceIndicator').className = 'w-20 h-20 bg-blue-500 rounded-full flex items-center justify-center text-white text-2xl mx-auto';
            document.getElementById('voiceStatus').textContent = 'Click "Start Listening" to begin';
            document.getElementById('startVoiceBtn').disabled = false;
            document.getElementById('stopVoiceBtn').disabled = true;
        }
        
        async function processVoiceCommand(transcript) {
            const status = document.getElementById('voiceCommandStatus');
            
            try {
                document.getElementById('voiceStatus').textContent = 'Processing command...';
                
                // For now, simulate the voice command processing
                // This would integrate with your Flask app's /execute endpoint
                const response = await fetch('/api/execute-voice-command', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ text: transcript })
                });
                
                let result;
                if (response.ok) {
                    result = await response.json();
                } else {
                    // Fallback to simulated processing for demo
                    result = await simulateVoiceCommand(transcript);
                }
                
                if (result.success !== false) {
                    status.className = 'p-3 rounded bg-green-100 text-green-800';
                    status.innerHTML = `<i class="fas fa-check-circle mr-2"></i>${result.response || result.message || 'Command processed successfully'}`;
                    document.getElementById('voiceStatus').textContent = 'Command executed successfully!';
                    
                    showToast('Voice command executed', 'success', '<i class="fas fa-microphone"></i>');
                    
                    // Refresh data if needed
                    await loadContacts();
                    loadAppointments();
                } else {
                    throw new Error(result.error || result.message || 'Command failed');
                }
            } catch (error) {
                status.className = 'p-3 rounded bg-red-100 text-red-800';
                status.innerHTML = `<i class="fas fa-exclamation-circle mr-2"></i>Error: ${error.message}`;
                document.getElementById('voiceStatus').textContent = 'Command failed';
                
                showToast('Voice command failed: ' + error.message, 'error', '<i class="fas fa-microphone-slash"></i>');
            }
            
            status.classList.remove('hidden');
            
            setTimeout(() => {
                status.classList.add('hidden');
                document.getElementById('voiceTranscript').textContent = '';
            }, 5000);
        }
        
        // Simulate voice command processing for demo purposes
        async function simulateVoiceCommand(transcript) {
            await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate processing delay
            
            const lowerText = transcript.toLowerCase();
            
            if (lowerText.includes('create contact')) {
                return { success: true, response: 'Contact creation command received. Use the Create Contact form for detailed entry.' };
            } else if (lowerText.includes('update') && lowerText.includes('email')) {
                return { success: true, response: 'Email update command received. Use the Update Email quick action for changes.' };
            } else if (lowerText.includes('update') && lowerText.includes('phone')) {
                return { success: true, response: 'Phone update command received. Use the Update Phone quick action for changes.' };
            } else if (lowerText.includes('schedule') || lowerText.includes('appointment')) {
                return { success: true, response: 'Appointment scheduling command received. Use the Create Appointment quick action.' };
            } else if (lowerText.includes('text') || lowerText.includes('sms')) {
                return { success: true, response: 'SMS command received. Use the Quick SMS action to send messages.' };
            } else if (lowerText.includes('email')) {
                return { success: true, response: 'Email command received. Use the Quick Email action to send emails.' };
            } else if (lowerText.includes('search') || lowerText.includes('find')) {
                return { success: true, response: 'Search command received. Use the Search Contact feature to find contacts.' };
            } else {
                return { 
                    success: true, 
                    response: `Voice command recognized: "${transcript}". Use the quick action buttons above for CRM operations.` 
                };
            }
        }

        // SINGLE DOMContentLoaded - Replace all existing ones with this
        document.addEventListener('DOMContentLoaded', function() {
            console.log('RinglyPro CRM Dashboard loaded');
            
            // Initialize theme first
            initDarkMode();
            
            // Initialize all components safely
            try {
                loadSectionStates();
                setupContactForm();
                setupAppointmentForm();
                setupSearchInput(); // Now this function exists
                setupSMSForm();
                setupEditAppointmentForm();
                
                // Quick action forms
                setupQuickCreateForm();
                setupQuickUpdateEmailForm();
                setupQuickUpdatePhoneForm();
                setupQuickCreateAppointmentForm();
                setupQuickSMSForm();
                setupQuickEmailForm();
                setupReloadCreditsForm();  // Add this line
                // Quick action forms

                
                // Contact selection handlers
                handleSMSContactSelection();
                handleEmailContactSelection();
                handleAppointmentContactSelection();
                handleUpdateEmailContactSelection();
                handleUpdatePhoneContactSelection();
                
                console.log('All form handlers initialized');
            } catch (error) {
                console.error('Error initializing forms:', error);
            }
            
            // Initialize voice recognition
            try {
                if (initVoiceRecognition()) {
                    console.log('Voice recognition initialized');
                }
            } catch (error) {
                console.warn('Voice recognition not available:', error);
            }
            
            // Load initial data
            try {
                loadContacts();
                loadAppointments();
                loadTodaysData();
            } catch (error) {
                console.error('Error loading initial data:', error);
            }
            
            // Setup additional event listeners
            try {
                const quickSearchInput = document.getElementById('quickSearchInput');
                if (quickSearchInput) {
                    quickSearchInput.addEventListener('keypress', function(e) {
                        if (e.key === 'Enter') {
                            performQuickSearch();
                        }
                    });
                }
                
                const contactsSearch = document.getElementById('contacts-search');
                if (contactsSearch) {
                    contactsSearch.addEventListener('input', function(e) {
                        filterContacts(e.target.value);
                    });
                }
            } catch (error) {
                console.warn('Error setting up search inputs:', error);
            }
            
            // Mobile theme initialization
            updateMobileThemeText();
            updateMobileToggleText();
            
            // Welcome message
            setTimeout(() => {
                showToast('Welcome to RinglyPro CRM!', 'success', '<i class="fas fa-rocket"></i>');
            }, 1500);
            
            console.log('RinglyPro CRM Dashboard initialized successfully');
        });
    </script>
</body>
</html>