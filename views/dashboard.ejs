<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="theme-color" content="#4F46E5">
    <meta name="description" content="RinglyPro - AI-Powered Phone Receptionist Service">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="default">
    <meta name="apple-mobile-web-app-title" content="RinglyPro">

    <title>RinglyPro CRM - Dashboard</title>

    <!-- Favicon -->
    <link rel="icon" type="image/png" href="https://assets.cdn.filesafe.space/3lSeAHXNU9t09Hhp9oai/media/68e1ca42554f6a328ff4f6a5.png">
    <link rel="apple-touch-icon" href="https://assets.cdn.filesafe.space/3lSeAHXNU9t09Hhp9oai/media/68e1ca42554f6a328ff4f6a5.png">

    <!-- PWA Manifest -->
    <link rel="manifest" href="/manifest.json">

    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            background: #f3f4f6;
            color: #111827;
            line-height: 1.5;
        }

        /* Low Balance Alert Banner */
        .low-balance-alert {
            background: linear-gradient(135deg, #fee2e2 0%, #fecaca 100%);
            border-left: 4px solid #dc2626;
            padding: 1rem;
            margin: 0;
            display: none;
            align-items: center;
            gap: 0.75rem;
        }

        .low-balance-alert.show {
            display: flex;
        }

        .low-balance-alert svg {
            width: 1.5rem;
            height: 1.5rem;
            color: #dc2626;
            flex-shrink: 0;
        }

        .low-balance-alert-content {
            flex: 1;
        }

        .low-balance-alert-content h3 {
            font-size: 0.9375rem;
            font-weight: 600;
            color: #991b1b;
            margin-bottom: 0.25rem;
        }

        .low-balance-alert-content p {
            font-size: 0.8125rem;
            color: #7f1d1d;
        }

        .low-balance-alert button {
            background: #dc2626;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 0.5rem;
            font-size: 0.875rem;
            font-weight: 500;
            cursor: pointer;
            transition: background 0.2s;
            flex-shrink: 0;
        }

        .low-balance-alert button:hover {
            background: #b91c1c;
        }

        /* Header */
        .header {
            background: white;
            border-bottom: 1px solid #e5e7eb;
            position: sticky;
            top: 0;
            z-index: 40;
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
        }

        .header-content {
            padding: 1rem;
        }

        .header-top {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 1rem;
        }

        .header-top h1 {
            font-size: 1.25rem;
            font-weight: 700;
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            margin-bottom: 1rem;
        }

        .username {
            font-size: 0.875rem;
            color: #4b5563;
            font-weight: 500;
        }

        .header-minutes-btn {
            background: #8b5cf6;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 0.5rem;
            font-size: 0.875rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s;
            display: flex;
            align-items: center;
            gap: 0.25rem;
        }

        .header-minutes-btn:hover {
            background: #7c3aed;
            transform: translateY(-1px);
            box-shadow: 0 2px 4px rgba(139, 92, 246, 0.3);
        }

        .logout-btn {
            background: #ef4444;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 0.5rem;
            font-size: 0.875rem;
            font-weight: 500;
            cursor: pointer;
            transition: background 0.2s;
        }

        .logout-btn:hover {
            background: #dc2626;
        }

        /* Rachel Toggle Card */
        .rachel-card {
            background: linear-gradient(135deg, #eff6ff 0%, #e0e7ff 100%);
            border: 2px solid #3b82f6;
            border-radius: 0.75rem;
            padding: 1rem;
        }

        .rachel-toggle-row {
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .rachel-info {
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .status-dot {
            width: 0.75rem;
            height: 0.75rem;
            border-radius: 50%;
            animation: pulse 2s ease-in-out infinite;
        }

        .status-dot.active {
            background: #10b981;
        }

        .status-dot.inactive {
            background: #ef4444;
            animation: none;
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        .rachel-text h3 {
            font-size: 0.95rem;
            font-weight: 600;
            color: #1f2937;
            margin-bottom: 0.125rem;
        }

        .rachel-text p {
            font-size: 0.75rem;
            color: #6b7280;
        }

        /* Toggle Switch */
        .toggle-switch {
            position: relative;
            display: inline-block;
            width: 3rem;
            height: 1.5rem;
        }

        .toggle-switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .toggle-slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #d1d5db;
            transition: 0.3s;
            border-radius: 1.5rem;
        }

        .toggle-slider:before {
            position: absolute;
            content: "";
            height: 1.125rem;
            width: 1.125rem;
            left: 0.1875rem;
            bottom: 0.1875rem;
            background-color: white;
            transition: 0.3s;
            border-radius: 50%;
        }

        input:checked + .toggle-slider {
            background-color: #3b82f6;
        }

        input:checked + .toggle-slider:before {
            transform: translateX(1.5rem);
        }

        /* Quick Actions */
        .quick-actions {
            padding: 1rem;
            background: white;
            border-bottom: 1px solid #e5e7eb;
        }

        .action-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 0.75rem;
        }

        .action-btn {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 0.75rem;
            border: none;
            border-radius: 0.5rem;
            font-size: 0.75rem;
            font-weight: 500;
            cursor: pointer;
            transition: transform 0.2s, box-shadow 0.2s;
            color: white;
        }

        .action-btn:active {
            transform: scale(0.95);
        }

        .action-btn svg {
            width: 1.25rem;
            height: 1.25rem;
            margin-bottom: 0.25rem;
        }

        .btn-sms {
            background: #3b82f6;
        }

        .btn-sms:hover {
            background: #2563eb;
        }

        .btn-call {
            background: #10b981;
        }

        .btn-call:hover {
            background: #059669;
        }

        .btn-credits {
            background: #8b5cf6;
        }

        .btn-credits:hover {
            background: #7c3aed;
        }

        .btn-copilot {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }

        .btn-copilot:hover {
            background: linear-gradient(135deg, #5568d3 0%, #653a8c 100%);
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(102, 126, 234, 0.4);
        }

        .btn-share {
            background: #f97316;
        }

        .btn-share:hover {
            background: #ea580c;
        }

        .btn-ivr {
            background: #06b6d4;
        }

        .btn-ivr:hover {
            background: #0891b2;
        }

        .credit-amount {
            font-size: 0.875rem;
            font-weight: 600;
            margin-top: 0.125rem;
        }

        /* Navigation Tabs */
        .nav-tabs {
            display: flex;
            background: white;
            border-bottom: 1px solid #e5e7eb;
        }

        .nav-tab {
            flex: 1;
            padding: 0.75rem 1rem;
            border: none;
            background: transparent;
            font-size: 0.875rem;
            font-weight: 500;
            color: #6b7280;
            cursor: pointer;
            border-bottom: 2px solid transparent;
            transition: all 0.2s;
        }

        .nav-tab.active {
            color: #3b82f6;
            background: #eff6ff;
            border-bottom-color: #3b82f6;
        }

        .nav-tab svg {
            width: 1rem;
            height: 1rem;
            display: inline;
            margin-right: 0.5rem;
            vertical-align: middle;
        }

        .tab-badge {
            display: inline-block;
            margin-left: 0.5rem;
            padding: 0.125rem 0.5rem;
            background: #ef4444;
            color: white;
            font-size: 0.75rem;
            font-weight: 600;
            border-radius: 1rem;
            min-width: 1.25rem;
            text-align: center;
        }

        .nav-tab.active .tab-badge {
            background: #dc2626;
        }

        /* Content Area */
        .content {
            padding: 1rem;
            padding-bottom: 5rem;
        }

        .content-section {
            display: none;
        }

        .content-section.active {
            display: block;
        }

        .section-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 1rem;
        }

        .section-header h2 {
            font-size: 1.125rem;
            font-weight: 600;
        }

        .btn-primary {
            background: #3b82f6;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 0.5rem;
            font-size: 0.875rem;
            font-weight: 500;
            cursor: pointer;
            transition: background 0.2s;
        }

        .btn-primary:hover {
            background: #2563eb;
        }

        .btn-refresh {
            background: #10b981;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 0.5rem;
            font-size: 0.875rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s;
        }

        .btn-refresh:hover {
            background: #059669;
        }

        .btn-refresh:active {
            transform: scale(0.95);
        }

        .btn-refresh.refreshing svg {
            animation: spin 1s linear infinite;
        }

        .btn-refresh:disabled {
            background: #9ca3af;
            cursor: not-allowed;
        }

        /* Appointment Card */
        .appointment-card {
            background: white;
            border-radius: 0.75rem;
            border: 1px solid #e5e7eb;
            margin-bottom: 0.75rem;
            overflow: hidden;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .appointment-main {
            padding: 1rem;
            display: flex;
            justify-content: space-between;
            align-items: start;
        }

        .appointment-info {
            flex: 1;
        }

        .appointment-info h3 {
            font-size: 1rem;
            font-weight: 600;
            margin-bottom: 0.25rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .appointment-info p {
            font-size: 0.875rem;
            color: #6b7280;
            margin-bottom: 0.25rem;
        }

        .appointment-time {
            text-align: right;
            margin-left: 1rem;
        }

        .appointment-time .time {
            font-size: 1.125rem;
            font-weight: 600;
            color: #3b82f6;
            margin-bottom: 0.25rem;
        }

        .status-badge {
            display: inline-block;
            padding: 0.25rem 0.5rem;
            border-radius: 9999px;
            font-size: 0.75rem;
            font-weight: 500;
        }

        .status-confirmed {
            background: #d1fae5;
            color: #065f46;
        }

        .status-pending {
            background: #fed7aa;
            color: #9a3412;
        }

        .appointment-actions {
            background: #f9fafb;
            padding: 0.5rem 1rem;
            display: flex;
            gap: 0.5rem;
        }

        .appointment-actions button {
            display: flex;
            align-items: center;
            gap: 0.25rem;
            padding: 0.375rem 0.75rem;
            border: none;
            border-radius: 9999px;
            font-size: 0.75rem;
            font-weight: 500;
            cursor: pointer;
            color: white;
        }

        .appointment-actions button svg {
            width: 0.875rem;
            height: 0.875rem;
        }

        .appointment-actions .btn-text {
            background: #3b82f6;
        }

        .appointment-actions .btn-call-apt {
            background: #10b981;
        }

        /* Communication Card */
        .comm-card {
            background: white;
            border-radius: 0.75rem;
            border: 1px solid #e5e7eb;
            padding: 1rem;
            margin-bottom: 0.75rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .comm-card-content {
            display: flex;
            gap: 0.75rem;
        }

        .comm-icon {
            padding: 0.5rem;
            border-radius: 9999px;
            width: 2.5rem;
            height: 2.5rem;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .comm-icon.sms {
            background: #dbeafe;
            color: #2563eb;
        }

        .comm-icon.call {
            background: #d1fae5;
            color: #059669;
        }

        .comm-info {
            flex: 1;
        }

        .comm-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 0.25rem;
        }

        .comm-header h4 {
            font-size: 0.9375rem;
            font-weight: 600;
        }

        .comm-header .time {
            font-size: 0.75rem;
            color: #6b7280;
        }

        .comm-info p {
            font-size: 0.875rem;
            color: #6b7280;
            margin-bottom: 0.5rem;
        }

        .comm-badge {
            display: inline-block;
            padding: 0.25rem 0.5rem;
            border-radius: 9999px;
            font-size: 0.75rem;
        }

        .comm-badge.received {
            background: #dbeafe;
            color: #1e40af;
        }

        .comm-badge.sent {
            background: #e5e7eb;
            color: #374151;
        }

        /* Empty State */
        .empty-state {
            text-align: center;
            padding: 3rem 1rem;
            color: #9ca3af;
        }

        .empty-state svg {
            width: 3rem;
            height: 3rem;
            margin: 0 auto 1rem;
            opacity: 0.5;
        }

        /* Loading State */
        .loading {
            text-align: center;
            padding: 2rem;
            color: #6b7280;
        }

        .spinner {
            border: 3px solid #f3f4f6;
            border-top: 3px solid #3b82f6;
            border-radius: 50%;
            width: 2.5rem;
            height: 2.5rem;
            animation: spin 1s linear infinite;
            margin: 0 auto 1rem;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Message Cards */
        .message-card {
            background: white;
            border-radius: 0.75rem;
            border: 1px solid #e5e7eb;
            margin-bottom: 0.75rem;
            overflow: hidden;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .message-card.unread {
            background: #eff6ff;
            border-left: 3px solid #3b82f6;
            font-weight: 500;
        }

        .message-header {
            padding: 1rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            cursor: pointer;
            user-select: none;
        }

        .message-header:hover {
            background: #f9fafb;
        }

        .message-info {
            flex: 1;
        }

        .message-info h3 {
            font-size: 0.95rem;
            font-weight: 600;
            margin-bottom: 0.25rem;
            color: #111827;
        }

        .message-info p {
            font-size: 0.8125rem;
            color: #6b7280;
            margin-bottom: 0.125rem;
        }

        .message-preview {
            font-size: 0.875rem;
            color: #374151;
            margin-top: 0.5rem;
            line-height: 1.4;
            max-height: 2.8em;
            overflow: hidden;
            text-overflow: ellipsis;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
        }

        .message-toggle {
            width: 1.5rem;
            height: 1.5rem;
            color: #6b7280;
            transition: transform 0.2s;
        }

        .message-card.expanded .message-toggle {
            transform: rotate(180deg);
        }

        .message-body {
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.3s ease-out;
            border-top: 1px solid #e5e7eb;
        }

        .message-card.expanded .message-body {
            max-height: 500px;
        }

        .message-content {
            padding: 1rem;
            font-size: 0.875rem;
            line-height: 1.6;
            color: #374151;
            background: #f9fafb;
        }

        .message-actions {
            background: #f3f4f6;
            padding: 0.75rem 1rem;
            display: flex;
            gap: 0.5rem;
            justify-content: flex-end;
        }

        .btn-reply-sms {
            background: #3b82f6;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 0.5rem;
            font-size: 0.8125rem;
            font-weight: 500;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 0.375rem;
            transition: background 0.2s;
        }

        .btn-reply-sms:hover {
            background: #2563eb;
        }

        .btn-reply-sms svg {
            width: 1rem;
            height: 1rem;
        }

        /* SMS compose form CSS removed - using device SMS app instead */

        /* Calendar Settings Modal */
        .setting-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem 0;
        }

        .setting-label {
            flex: 1;
        }

        .setting-title {
            display: block;
            font-weight: 600;
            font-size: 0.875rem;
            color: #111827;
            margin-bottom: 0.25rem;
        }

        .setting-description {
            display: block;
            font-size: 0.75rem;
            color: #6b7280;
        }

        .divider {
            height: 1px;
            background: #e5e7eb;
            margin: 1rem 0;
        }

        .section-heading {
            font-size: 0.875rem;
            font-weight: 600;
            color: #374151;
            margin: 1rem 0 0.75rem 0;
        }

        .day-setting {
            border: 1px solid #e5e7eb;
            border-radius: 0.5rem;
            padding: 0.75rem;
            margin-bottom: 0.75rem;
            background: #f9fafb;
        }

        .day-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 0.75rem;
        }

        .day-name {
            font-weight: 600;
            font-size: 0.875rem;
            color: #111827;
        }

        .day-controls {
            display: flex;
            gap: 0.75rem;
            align-items: center;
        }

        .time-inputs {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 0.5rem;
        }

        .time-group {
            display: flex;
            flex-direction: column;
        }

        .time-group label {
            font-size: 0.75rem;
            color: #6b7280;
            margin-bottom: 0.25rem;
        }

        .time-group input[type="time"] {
            padding: 0.5rem;
            border: 1px solid #d1d5db;
            border-radius: 0.375rem;
            font-size: 0.875rem;
        }

        .time-group input[type="time"]:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

        .time-group input[type="time"]:disabled {
            background: #f3f4f6;
            color: #9ca3af;
            cursor: not-allowed;
        }

        .checkbox-label {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 0.75rem;
            color: #374151;
            cursor: pointer;
        }

        .checkbox-label input[type="checkbox"] {
            width: 1rem;
            height: 1rem;
            cursor: pointer;
        }

        .modal-actions {
            display: flex;
            gap: 0.75rem;
            justify-content: flex-end;
            margin-top: 1.5rem;
            padding-top: 1rem;
            border-top: 1px solid #e5e7eb;
        }

        .btn-save {
            background: #3b82f6;
            color: white;
            border: none;
            padding: 0.625rem 1.25rem;
            border-radius: 0.5rem;
            font-size: 0.875rem;
            font-weight: 500;
            cursor: pointer;
            transition: background 0.2s;
        }

        .btn-save:hover {
            background: #2563eb;
        }

        .btn-save:disabled {
            background: #9ca3af;
            cursor: not-allowed;
        }

        .btn-calendar {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

        .btn-calendar:hover {
            background: linear-gradient(135deg, #5568d3 0%, #653b8b 100%);
        }

        /* Date Filter Tabs */
        .filter-tab {
            padding: 0.5rem 1rem;
            border: 1px solid #d1d5db;
            background: white;
            color: #6b7280;
            border-radius: 0.375rem;
            font-size: 0.875rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s;
        }

        .filter-tab:hover {
            background: #f3f4f6;
            border-color: #9ca3af;
        }

        .filter-tab.active {
            background: #3b82f6;
            color: white;
            border-color: #3b82f6;
        }

        /* Contact Search Modal */
        .modal-overlay {
            display: none;
            position: fixed;
            inset: 0;
            background: rgba(0, 0, 0, 0.5);
            z-index: 50;
            align-items: flex-end;
        }

        .modal-overlay.active {
            display: flex;
        }

        .modal-content {
            background: white;
            width: 100%;
            max-height: 80vh;
            border-radius: 1rem 1rem 0 0;
            overflow: hidden;
        }

        .modal-header {
            padding: 1rem;
            border-bottom: 1px solid #e5e7eb;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .modal-header h3 {
            font-size: 1.125rem;
            font-weight: 600;
        }

        .close-modal {
            background: none;
            border: none;
            font-size: 1.5rem;
            color: #6b7280;
            cursor: pointer;
            padding: 0;
            width: 2rem;
            height: 2rem;
        }

        .modal-body {
            padding: 1rem;
        }

        .search-input-wrapper {
            position: relative;
            margin-bottom: 1rem;
        }

        .search-input-wrapper svg {
            position: absolute;
            left: 0.75rem;
            top: 50%;
            transform: translateY(-50%);
            width: 1.25rem;
            height: 1.25rem;
            color: #9ca3af;
        }

        .search-input {
            width: 100%;
            padding: 0.75rem 1rem 0.75rem 2.5rem;
            border: 1px solid #d1d5db;
            border-radius: 0.5rem;
            font-size: 1rem;
        }

        .search-input:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

        .contact-item {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            padding: 0.75rem;
            border: 1px solid #e5e7eb;
            border-radius: 0.5rem;
            margin-bottom: 0.5rem;
            cursor: pointer;
            transition: background 0.2s;
        }

        .contact-item:hover {
            background: #f9fafb;
        }

        .contact-avatar {
            width: 2.5rem;
            height: 2.5rem;
            background: #e5e7eb;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .contact-avatar svg {
            width: 1.5rem;
            height: 1.5rem;
            color: #6b7280;
        }

        .contact-details h4 {
            font-size: 0.9375rem;
            font-weight: 600;
            color: #111827;
        }

        .contact-details p {
            font-size: 0.875rem;
            color: #6b7280;
        }

        /* Credits Modal Styles */
        .credits-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 1000;
            overflow-y: auto;
        }

        .credits-modal.active {
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }

        .credits-modal-content {
            background: white;
            border-radius: 12px;
            max-width: 600px;
            width: 100%;
            max-height: 90vh;
            overflow-y: auto;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.2);
        }

        .credits-modal-header {
            padding: 24px;
            border-bottom: 1px solid #e5e7eb;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .credits-modal-header h2 {
            margin: 0;
            font-size: 24px;
            color: #1f2937;
        }

        .credits-modal-close {
            background: none;
            border: none;
            font-size: 28px;
            color: #6b7280;
            cursor: pointer;
            padding: 0;
            width: 32px;
            height: 32px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 6px;
            transition: all 0.2s;
        }

        .credits-modal-close:hover {
            background: #f3f4f6;
            color: #1f2937;
        }

        .credits-modal-body {
            padding: 24px;
        }

        /* Current Balance Display */
        .current-balance-display {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 24px;
        }

        .current-balance-display h3 {
            margin: 0 0 8px 0;
            font-size: 14px;
            opacity: 0.9;
            font-weight: 500;
        }

        .current-balance-display .balance-amount {
            font-size: 36px;
            font-weight: bold;
            margin: 0;
        }

        .balance-stats {
            display: flex;
            gap: 20px;
            margin-top: 16px;
            font-size: 14px;
        }

        .balance-stat {
            opacity: 0.9;
        }

        /* Package Selection */
        .package-selection {
            margin-bottom: 24px;
        }

        .package-selection h3 {
            margin: 0 0 16px 0;
            font-size: 18px;
            color: #1f2937;
        }

        .package-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 12px;
        }

        .package-option {
            border: 2px solid #e5e7eb;
            border-radius: 8px;
            padding: 20px;
            text-align: center;
            cursor: pointer;
            transition: all 0.2s;
            background: white;
        }

        .package-option:hover {
            border-color: #667eea;
            background: #f9fafb;
        }

        .package-option.selected {
            border-color: #667eea;
            background: #eef2ff;
        }

        .package-amount {
            font-size: 28px;
            font-weight: bold;
            color: #1f2937;
            margin-bottom: 8px;
        }

        .package-minutes {
            font-size: 14px;
            color: #6b7280;
        }

        .package-rate {
            font-size: 12px;
            color: #9ca3af;
            margin-top: 4px;
        }

        /* Payment Form */
        .payment-form {
            margin-top: 24px;
        }

        .payment-form h3 {
            margin: 0 0 16px 0;
            font-size: 18px;
            color: #1f2937;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .stripe-badge {
            display: inline-flex;
            align-items: center;
            gap: 6px;
            padding: 4px 12px;
            background: linear-gradient(135deg, #635bff 0%, #5469d4 100%);
            color: white;
            border-radius: 4px;
            font-size: 12px;
            font-weight: 600;
            letter-spacing: 0.3px;
        }

        .stripe-badge svg {
            width: 14px;
            height: 14px;
        }

        #card-element {
            border: 1px solid #e5e7eb;
            border-radius: 8px;
            padding: 16px;
            background: white;
        }

        #card-element.StripeElement--focus {
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        #card-errors {
            color: #ef4444;
            font-size: 14px;
            margin-top: 8px;
            min-height: 20px;
        }

        /* Buttons */
        .modal-actions {
            display: flex;
            gap: 12px;
            margin-top: 24px;
        }

        .btn-pay {
            flex: 1;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 16px;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s;
        }

        .btn-pay:hover:not(:disabled) {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
        }

        .btn-pay:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

        .btn-cancel {
            flex: 0 0 auto;
            background: white;
            color: #6b7280;
            border: 1px solid #e5e7eb;
            padding: 16px 24px;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s;
        }

        .btn-cancel:hover {
            background: #f9fafb;
        }

        /* Loading State */
        .loading-spinner {
            display: inline-block;
            width: 16px;
            height: 16px;
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top-color: white;
            animation: spin 0.6s linear infinite;
            margin-right: 8px;
        }

        /* Success Message */
        .success-message {
            background: #d1fae5;
            color: #065f46;
            padding: 16px;
            border-radius: 8px;
            margin-top: 16px;
            display: none;
        }

        .success-message.show {
            display: block;
        }

        /* Appointment Modal Styles */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 1100;
            overflow-y: auto;
        }

        .modal.active {
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 1rem;
        }

        .modal .modal-overlay {
            position: fixed;
            inset: 0;
            background: rgba(0, 0, 0, 0.5);
            z-index: 1;
        }

        .modal .modal-content {
            position: relative;
            background: white;
            border-radius: 12px;
            z-index: 2;
            max-height: 90vh;
            overflow-y: auto;
        }

        .modal .modal-header {
            padding: 1.5rem;
            border-bottom: 1px solid #e5e7eb;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal .modal-header h2 {
            margin: 0;
            font-size: 1.5rem;
            color: #1f2937;
        }

        .modal-close {
            background: none;
            border: none;
            color: #6b7280;
            cursor: pointer;
            padding: 0.25rem;
            border-radius: 0.375rem;
            transition: all 0.2s;
        }

        .modal-close:hover {
            background: #f3f4f6;
            color: #1f2937;
        }

        .modal .modal-body {
            padding: 1.5rem;
            max-height: 70vh;
            overflow-y: auto;
        }

        .form-section {
            margin-bottom: 0;
        }

        .form-group {
            margin-bottom: 1rem;
        }

        .form-group label {
            display: block;
            font-size: 0.875rem;
            font-weight: 500;
            color: #374151;
            margin-bottom: 0.5rem;
        }

        .form-input {
            width: 100%;
            padding: 0.625rem 0.875rem;
            border: 1px solid #d1d5db;
            border-radius: 0.5rem;
            font-size: 0.9375rem;
            color: #1f2937;
            transition: border-color 0.2s, box-shadow 0.2s;
        }

        .form-input:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

        .form-input:disabled {
            background: #f9fafb;
            color: #9ca3af;
            cursor: not-allowed;
        }

        textarea.form-input {
            resize: vertical;
            min-height: 80px;
        }

        .loading-indicator {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }

        .error-message {
            display: none;
        }

        .error-message.show {
            display: block;
        }

        /* Mobile Responsive */
        @media (max-width: 640px) {
            .package-grid {
                grid-template-columns: 1fr;
            }

            .balance-stats {
                flex-direction: column;
                gap: 8px;
            }

            .form-row {
                grid-template-columns: 1fr !important;
            }

            .modal .modal-content {
                max-width: 100%;
                margin: 0;
                border-radius: 0;
            }
        }

        @media (min-width: 640px) {
            .modal-overlay {
                align-items: center;
                justify-content: center;
            }

            .modal-content {
                max-width: 28rem;
                border-radius: 0.75rem;
            }
        }

        /* Footer Styles */
        .app-footer {
            background: #1f2937;
            color: #9ca3af;
            padding: 2rem 1.5rem;
            margin-top: 3rem;
            border-top: 1px solid #374151;
        }

        .footer-content {
            max-width: 1200px;
            margin: 0 auto;
            text-align: center;
        }

        .footer-branding {
            margin-bottom: 1rem;
        }

        .footer-logo {
            height: 160px;
            width: auto;
            margin-bottom: 0.75rem;
            display: block;
            margin-left: auto;
            margin-right: auto;
        }

        .footer-branding h3 {
            color: #f3f4f6;
            font-size: 1.125rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .footer-branding p {
            font-size: 0.875rem;
            color: #9ca3af;
        }

        .footer-links {
            display: flex;
            justify-content: center;
            gap: 1.5rem;
            margin: 1.5rem 0;
            flex-wrap: wrap;
        }

        .footer-links a {
            color: #60a5fa;
            text-decoration: none;
            font-size: 0.875rem;
            transition: color 0.2s;
        }

        .footer-links a:hover {
            color: #93c5fd;
            text-decoration: underline;
        }

        .footer-contact {
            margin: 1.5rem 0;
            font-size: 0.875rem;
        }

        .footer-contact p {
            margin: 0.25rem 0;
        }

        .footer-contact a {
            color: #60a5fa;
            text-decoration: none;
        }

        .footer-contact a:hover {
            text-decoration: underline;
        }

        .footer-copyright {
            font-size: 0.75rem;
            color: #6b7280;
            margin-top: 1.5rem;
            padding-top: 1.5rem;
            border-top: 1px solid #374151;
        }

        @media (max-width: 768px) {
            .footer-links {
                flex-direction: column;
                gap: 0.75rem;
            }
        }
    </style>
</head>
<body>
    <!-- Low Balance Alert Banner -->
    <div class="low-balance-alert" id="lowBalanceAlert">
        <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"/>
        </svg>
        <div class="low-balance-alert-content">
            <h3>Low Balance Warning</h3>
            <p id="lowBalanceMessage">Only X minutes remaining. Recharge now to avoid service interruption.</p>
        </div>
        <button onclick="showCreditsInfo()">Recharge</button>
    </div>

    <!-- Header with Rachel Toggle -->
    <div class="header">
        <div class="header-content">
            <div class="header-top">
                <div>
                    <h1>RinglyPro CRM</h1>
                    <p style="font-size: 0.75rem; color: #6b7280; margin-top: 0.25rem;">
                        <%= clientName %>
                    </p>
                </div>
                <div style="display: flex; align-items: center; gap: 0.75rem;">
                    <button class="header-minutes-btn" onclick="showCreditsInfo()">
                        <svg style="width: 1rem; height: 1rem; display: inline; vertical-align: middle; margin-right: 0.25rem;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
                        </svg>
                        <span id="headerCreditAmount">Loading...</span>
                    </button>
                    <button class="logout-btn" onclick="logout()">
                        <svg style="width: 1rem; height: 1rem; display: inline; vertical-align: middle; margin-right: 0.25rem;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"/>
                        </svg>
                        Logout
                    </button>
                </div>
            </div>
            
            <!-- User Info -->
            <div class="user-info">
                <span class="username" id="username-display">Loading...</span>
            </div>
            
            <!-- Rachel AI Toggle Card -->
            <div class="rachel-card">
                <div class="rachel-toggle-row">
                    <div class="rachel-info">
                        <div class="status-dot active" id="rachelStatusDot"></div>
                        <div class="rachel-text">
                            <h3>Rachel AI Assistant</h3>
                            <p id="rachelStatusText">Checking status...</p>
                        </div>
                    </div>
                    <label class="toggle-switch">
                        <input type="checkbox" id="rachelToggle">
                        <span class="toggle-slider"></span>
                    </label>
                </div>
            </div>
        </div>
    </div>

    <!-- Quick Actions -->
    <div class="quick-actions">
        <div class="action-grid">
            <button class="action-btn btn-copilot" onclick="window.open('https://ringlypro-crm.onrender.com/mcp-copilot/', '_blank')">
                <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"/>
                </svg>
                CRM Copilot
                <div class="credit-amount" style="background: #8b5cf6;">AI</div>
            </button>
            <button class="action-btn btn-sms" onclick="openContactSearch('sms')">
                <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z"/>
                </svg>
                Send SMS
            </button>
            <button class="action-btn btn-call" onclick="openContactSearch('call')">
                <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"/>
                </svg>
                Make Call
            </button>
            <button class="action-btn btn-calendar" onclick="openCalendarSettings()">
                <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/>
                </svg>
                Calendar Settings
            </button>
            <button class="action-btn btn-share" onclick="shareReferralLink()">
                <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.368 2.684 3 3 0 00-5.368-2.684z"/>
                </svg>
                Share
                <div class="credit-amount" id="referralCount" style="background: #10b981;">0</div>
            </button>
            <button class="action-btn btn-ivr" onclick="openIVRSettings()">
                <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"/>
                </svg>
                IVR
                <div class="credit-amount" id="ivrStatus" style="background: #6b7280;">OFF</div>
            </button>
        </div>
    </div>

    <!-- Navigation Tabs -->
    <div class="nav-tabs">
        <button class="nav-tab active" data-tab="today">
            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/>
            </svg>
            Today
        </button>
        <button class="nav-tab" data-tab="messages">
            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z"/>
            </svg>
            Messages
            <span id="messagesBadge" class="tab-badge" style="display: none;">0</span>
        </button>
        <button class="nav-tab" data-tab="userguide">
            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"/>
            </svg>
            Guide
        </button>
    </div>

    <!-- Content Area -->
    <div class="content">
        <!-- Today's Appointments -->
        <div class="content-section active" id="todaySection">
            <div class="section-header" style="flex-wrap: wrap; gap: 1rem;">
                <div style="display: flex; align-items: center; gap: 1rem; flex: 1;">
                    <h2>Upcoming Appointments</h2>
                    <div class="date-filter-tabs" style="display: flex; gap: 0.5rem;">
                        <button class="filter-tab active" onclick="filterAppointmentsByDays(7)" data-days="7">7 days</button>
                        <button class="filter-tab" onclick="filterAppointmentsByDays(14)" data-days="14">14 days</button>
                        <button class="filter-tab" onclick="filterAppointmentsByDays(30)" data-days="30">30 days</button>
                    </div>
                </div>
                <button onclick="openAppointmentModal()" class="btn-primary" style="display: flex; align-items: center; gap: 0.5rem;">
                    <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                        <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z"/>
                    </svg>
                    New Appointment
                </button>
            </div>
            <div id="appointmentsList">
                <div class="loading">
                    <div class="spinner"></div>
                    <p>Loading appointments...</p>
                </div>
            </div>
        </div>

        <!-- Messages & Voicemails -->
        <div class="content-section" id="messagesSection">
            <div class="section-header">
                <h2>Messages & Voicemails</h2>
                <button onclick="refreshMessages()" class="btn-refresh" id="refreshMessagesBtn" style="display: flex; align-items: center; gap: 0.5rem;">
                    <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                        <path fill-rule="evenodd" d="M8 3a5 5 0 1 0 4.546 2.914.5.5 0 0 1 .908-.417A6 6 0 1 1 8 2v1z"/>
                        <path d="M8 4.466V.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384L8.41 4.658A.25.25 0 0 1 8 4.466z"/>
                    </svg>
                    <span id="refreshBtnText">Refresh</span>
                </button>
            </div>

            <div id="messagesList">
                <div class="loading">
                    <div class="spinner"></div>
                    <p>Loading messages...</p>
                </div>
            </div>
        </div>

        <!-- User Guide Section -->
        <div class="content-section" id="userguideSection">
            <div class="section-header">
                <h2>Guide</h2>
                <div style="display: flex; gap: 0.5rem;">
                    <button onclick="scrollToEnglish()" class="btn-secondary" style="display: flex; align-items: center; gap: 0.5rem;">
                        <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                            <path d="M4.545 6.714 4.11 8H3l1.862-5h1.284L8 8H6.833l-.435-1.286H4.545zm1.634-.736L5.5 3.956h-.049l-.679 2.022H6.18z"/>
                            <path d="M0 2a2 2 0 0 1 2-2h7a2 2 0 0 1 2 2v3h3a2 2 0 0 1 2 2v7a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2v-3H2a2 2 0 0 1-2-2V2zm2-1a1 1 0 0 0-1 1v7a1 1 0 0 0 1 1h7a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H2zm7.138 9.995c.193.301.402.583.63.846-.748.575-1.673 1.001-2.768 1.292.178.217.451.635.555.867 1.125-.359 2.08-.844 2.886-1.494.777.665 1.739 1.165 2.93 1.472.133-.254.414-.673.629-.89-1.125-.253-2.057-.694-2.82-1.284.681-.747 1.222-1.651 1.621-2.757H14V8h-3v1.047h.765c-.318.844-.74 1.546-1.272 2.13a6.066 6.066 0 0 1-.415-.492 1.988 1.988 0 0 1-.94.31z"/>
                        </svg>
                        English
                    </button>
                    <button onclick="scrollToSpanish()" class="btn-secondary" style="display: flex; align-items: center; gap: 0.5rem;">
                        <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                            <path d="M4.545 6.714 4.11 8H3l1.862-5h1.284L8 8H6.833l-.435-1.286H4.545zm1.634-.736L5.5 3.956h-.049l-.679 2.022H6.18z"/>
                            <path d="M0 2a2 2 0 0 1 2-2h7a2 2 0 0 1 2 2v3h3a2 2 0 0 1 2 2v7a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2v-3H2a2 2 0 0 1-2-2V2zm2-1a1 1 0 0 0-1 1v7a1 1 0 0 0 1 1h7a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H2zm7.138 9.995c.193.301.402.583.63.846-.748.575-1.673 1.001-2.768 1.292.178.217.451.635.555.867 1.125-.359 2.08-.844 2.886-1.494.777.665 1.739 1.165 2.93 1.472.133-.254.414-.673.629-.89-1.125-.253-2.057-.694-2.82-1.284.681-.747 1.222-1.651 1.621-2.757H14V8h-3v1.047h.765c-.318.844-.74 1.546-1.272 2.13a6.066 6.066 0 0 1-.415-.492 1.988 1.988 0 0 1-.94.31z"/>
                        </svg>
                        Español
                    </button>
                </div>
            </div>

            <div id="userGuideContent" style="padding: 2rem; background: white; border-radius: 0.5rem; box-shadow: 0 1px 3px rgba(0,0,0,0.1); max-height: 70vh; overflow-y: auto;">
                <div class="loading">
                    <div class="spinner"></div>
                    <p>Loading user guide...</p>
                </div>
            </div>
        </div>

        <!-- Communications - DEPRECATED: Replaced by messagesSection -->
        <!-- <div class="content-section" id="communicationsSection">
            <div class="section-header">
                <h2>Recent Communications</h2>
            </div>
            <div id="communicationsList">
                <div class="loading">
                    <div class="spinner"></div>
                    <p>Loading communications...</p>
                </div>
            </div>
        </div> -->
    </div>

    <!-- Contact Search Modal -->
    <div class="modal-overlay" id="contactModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 id="modalTitle">Select Contact</h3>
                <button class="close-modal" onclick="closeContactSearch()">×</button>
            </div>
            <div class="modal-body">
                <div class="search-input-wrapper">
                    <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
                    </svg>
                    <input type="text" class="search-input" id="contactSearch" placeholder="Type name or phone number..." oninput="searchContacts()">
                </div>
                <div id="contactResults">
                    <p style="font-size: 0.875rem; font-weight: 500; color: #374151; margin-bottom: 0.5rem;">Recent Contacts</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Calendar Settings Modal -->
    <div class="modal-overlay" id="calendarModal" style="align-items: center; justify-content: center;">
        <div class="modal-content" style="max-width: 95vw; width: 800px; max-height: 95vh; border-radius: 0.75rem; display: flex; flex-direction: column;">
            <div class="modal-header">
                <h3>Calendar Settings</h3>
                <button class="close-modal" onclick="closeCalendarSettings()">×</button>
            </div>
            <div class="modal-body" style="flex: 1; overflow-y: auto;">
                <form id="calendarSettingsForm">
                    <!-- Global Enable/Disable Toggle -->
                    <div class="setting-row">
                        <label class="setting-label">
                            <span class="setting-title">Enable Appointment Booking</span>
                            <span class="setting-description">Allow customers to book appointments via phone</span>
                        </label>
                        <label class="toggle-switch">
                            <input type="checkbox" id="bookingEnabled">
                            <span class="toggle-slider"></span>
                        </label>
                    </div>

                    <div class="divider"></div>

                    <!-- Day-by-Day Settings -->
                    <h4 class="section-heading">Weekly Schedule</h4>

                    <div id="daySettingsList">
                        <!-- Days will be rendered here by JavaScript -->
                    </div>

                    <!-- Save Button -->
                    <div class="modal-actions">
                        <button type="button" class="btn-cancel" onclick="closeCalendarSettings()">Cancel</button>
                        <button type="submit" class="btn-save" id="saveCalendarBtn">Save Settings</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- IVR Settings Modal -->
    <div class="modal-overlay" id="ivrModal" style="align-items: center; justify-content: center;">
        <div class="modal-content" style="max-width: 95vw; width: 800px; max-height: 95vh; border-radius: 0.75rem; display: flex; flex-direction: column;">
            <div class="modal-header">
                <h3>IVR Settings</h3>
                <button class="close-modal" onclick="closeIVRSettings()">×</button>
            </div>
            <div class="modal-body" style="flex: 1; overflow-y: auto;">
                <form id="ivrSettingsForm">
                    <!-- Global Enable/Disable Toggle -->
                    <div class="setting-row">
                        <label class="setting-label">
                            <span class="setting-title">Enable IVR (Call Transfer)</span>
                            <span class="setting-description">Allow Rachel/Lina to offer call transfer options to your team</span>
                        </label>
                        <label class="toggle-switch">
                            <input type="checkbox" id="ivrEnabled">
                            <span class="toggle-slider"></span>
                        </label>
                    </div>

                    <div class="divider"></div>

                    <!-- Instructions -->
                    <div style="background: #f3f4f6; padding: 1rem; border-radius: 0.5rem; margin-bottom: 1.5rem;">
                        <p style="margin: 0; font-size: 0.875rem; color: #374151;">
                            <strong>How it works:</strong> When enabled, Rachel or Lina will offer callers the option to be transferred to one of your departments. Configure up to 3 transfer options below.
                        </p>
                    </div>

                    <!-- Department Configuration -->
                    <h4 class="section-heading">Transfer Options (Max 3)</h4>

                    <!-- Department 1 -->
                    <div class="ivr-department">
                        <div class="setting-row" style="align-items: flex-start;">
                            <div style="flex: 1;">
                                <label class="form-label">Department Name</label>
                                <input type="text" id="dept1Name" class="form-input" placeholder="e.g., Sales, Support, Manager" maxlength="50">
                            </div>
                            <label class="toggle-switch" style="margin-left: 1rem; margin-top: 1.75rem;">
                                <input type="checkbox" id="dept1Enabled">
                                <span class="toggle-slider"></span>
                            </label>
                        </div>
                        <div style="margin-top: 0.75rem;">
                            <label class="form-label">Phone Number</label>
                            <input type="tel" id="dept1Phone" class="form-input" placeholder="+1 (555) 123-4567" maxlength="20">
                        </div>
                    </div>

                    <div class="divider" style="margin: 1.5rem 0;"></div>

                    <!-- Department 2 -->
                    <div class="ivr-department">
                        <div class="setting-row" style="align-items: flex-start;">
                            <div style="flex: 1;">
                                <label class="form-label">Department Name</label>
                                <input type="text" id="dept2Name" class="form-input" placeholder="e.g., Sales, Support, Manager" maxlength="50">
                            </div>
                            <label class="toggle-switch" style="margin-left: 1rem; margin-top: 1.75rem;">
                                <input type="checkbox" id="dept2Enabled">
                                <span class="toggle-slider"></span>
                            </label>
                        </div>
                        <div style="margin-top: 0.75rem;">
                            <label class="form-label">Phone Number</label>
                            <input type="tel" id="dept2Phone" class="form-input" placeholder="+1 (555) 123-4567" maxlength="20">
                        </div>
                    </div>

                    <div class="divider" style="margin: 1.5rem 0;"></div>

                    <!-- Department 3 -->
                    <div class="ivr-department">
                        <div class="setting-row" style="align-items: flex-start;">
                            <div style="flex: 1;">
                                <label class="form-label">Department Name</label>
                                <input type="text" id="dept3Name" class="form-input" placeholder="e.g., Sales, Support, Manager" maxlength="50">
                            </div>
                            <label class="toggle-switch" style="margin-left: 1rem; margin-top: 1.75rem;">
                                <input type="checkbox" id="dept3Enabled">
                                <span class="toggle-slider"></span>
                            </label>
                        </div>
                        <div style="margin-top: 0.75rem;">
                            <label class="form-label">Phone Number</label>
                            <input type="tel" id="dept3Phone" class="form-input" placeholder="+1 (555) 123-4567" maxlength="20">
                        </div>
                    </div>

                    <!-- Save Button -->
                    <div class="modal-actions">
                        <button type="button" class="btn-cancel" onclick="closeIVRSettings()">Cancel</button>
                        <button type="submit" class="btn-save" id="saveIVRBtn">Save IVR Settings</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Credits Purchase Modal -->
    <div id="creditsModal" class="credits-modal">
        <div class="credits-modal-content">
            <div class="credits-modal-header">
                <h2>Add Minutes</h2>
                <button class="credits-modal-close" onclick="closeCreditsModal()">&times;</button>
            </div>
            
            <div class="credits-modal-body">
                <!-- Current Balance -->
                <div class="current-balance-display">
                    <h3>Available Minutes</h3>
                    <p class="balance-amount" id="modalBalance">0 min</p>
                    <div class="balance-stats">
                        <div class="balance-stat">
                            <strong id="modalFreeMinutes">0</strong> free minutes used
                        </div>
                        <div class="balance-stat">
                            <strong id="modalPaidMinutes">0</strong> paid minutes
                        </div>
                    </div>
                </div>

                <!-- Package Selection -->
                <div class="package-selection">
                    <h3>Select Package</h3>
                    <div class="package-grid">
                        <div class="package-option" onclick="selectPackage(10)" data-amount="10">
                            <div class="package-amount">$10</div>
                            <div class="package-minutes">50 minutes</div>
                            <div class="package-rate">$0.20/min</div>
                        </div>
                        <div class="package-option" onclick="selectPackage(20)" data-amount="20">
                            <div class="package-amount">$20</div>
                            <div class="package-minutes">100 minutes</div>
                            <div class="package-rate">$0.20/min</div>
                        </div>
                        <div class="package-option" onclick="selectPackage(50)" data-amount="50">
                            <div class="package-amount">$50</div>
                            <div class="package-minutes">250 minutes</div>
                            <div class="package-rate">$0.20/min</div>
                        </div>
                        <div class="package-option" onclick="selectPackage(100)" data-amount="100">
                            <div class="package-amount">$100</div>
                            <div class="package-minutes">500 minutes</div>
                            <div class="package-rate">$0.20/min</div>
                        </div>
                    </div>
                </div>

                <!-- Payment Form -->
                <div class="payment-form">
                    <h3>
                        Payment Details
                        <span class="stripe-badge">
                            <svg fill="currentColor" viewBox="0 0 24 24">
                                <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                            </svg>
                            SECURED BY STRIPE
                        </span>
                    </h3>
                    <div id="card-element"></div>
                    <div id="card-errors" role="alert"></div>
                </div>

                <!-- Success Message -->
                <div id="successMessage" class="success-message">
                    Payment successful! Your minutes have been added.
                </div>

                <!-- Actions -->
                <div class="modal-actions">
                    <button id="payButton" class="btn-pay" onclick="processPayment()" disabled>
                        Select a package to continue
                    </button>
                    <button class="btn-cancel" onclick="closeCreditsModal()">Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Appointment Creation Modal -->
    <div id="appointmentModal" class="modal">
        <div class="modal-overlay" onclick="closeAppointmentModal()"></div>
        <div class="modal-content" style="max-width: 600px;">
            <div class="modal-header">
                <h2>Create New Appointment</h2>
                <button class="modal-close" onclick="closeAppointmentModal()">
                    <svg width="24" height="24" fill="currentColor" viewBox="0 0 16 16">
                        <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z"/>
                    </svg>
                </button>
            </div>

            <div class="modal-body">
                <form id="appointmentForm">
                    <!-- Customer Information -->
                    <div class="form-section">
                        <h3 style="font-size: 1rem; font-weight: 600; margin-bottom: 1rem; color: #374151;">Customer Information</h3>

                        <div class="form-group">
                            <label for="customerName">Name <span style="color: #ef4444;">*</span></label>
                            <input type="text" id="customerName" class="form-input" placeholder="John Doe" required>
                        </div>

                        <div class="form-row" style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem;">
                            <div class="form-group">
                                <label for="customerPhone">Phone <span style="color: #ef4444;">*</span></label>
                                <input type="tel" id="customerPhone" class="form-input" placeholder="+1 (555) 000-0000" required>
                            </div>

                            <div class="form-group">
                                <label for="customerEmail">Email</label>
                                <input type="email" id="customerEmail" class="form-input" placeholder="john@example.com">
                            </div>
                        </div>
                    </div>

                    <!-- Appointment Date & Time -->
                    <div class="form-section" style="margin-top: 1.5rem;">
                        <h3 style="font-size: 1rem; font-weight: 600; margin-bottom: 1rem; color: #374151;">Date & Time</h3>

                        <div class="form-group">
                            <label for="appointmentDate">Date <span style="color: #ef4444;">*</span></label>
                            <input type="date" id="appointmentDate" class="form-input" required onchange="loadAvailableTimeSlots()">
                        </div>

                        <div class="form-row" style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem;">
                            <div class="form-group">
                                <label for="appointmentStartTime">Start Time <span style="color: #ef4444;">*</span></label>
                                <select id="appointmentStartTime" class="form-input" required disabled onchange="updateEndTimeOptions()">
                                    <option value="">Select a date first</option>
                                </select>
                            </div>

                            <div class="form-group">
                                <label for="appointmentEndTime">End Time <span style="color: #ef4444;">*</span></label>
                                <select id="appointmentEndTime" class="form-input" required disabled>
                                    <option value="">Select start time first</option>
                                </select>
                            </div>
                        </div>
                    </div>

                    <!-- Additional Notes -->
                    <div class="form-section" style="margin-top: 1.5rem;">
                        <h3 style="font-size: 1rem; font-weight: 600; margin-bottom: 1rem; color: #374151;">Additional Information</h3>

                        <div class="form-group">
                            <label for="appointmentNotes">Purpose / Notes</label>
                            <textarea id="appointmentNotes" class="form-input" rows="3" placeholder="Appointment reason, special requests, etc."></textarea>
                        </div>
                    </div>

                    <!-- Loading Indicator -->
                    <div id="appointmentLoadingSlots" class="loading-indicator" style="display: none; text-align: center; padding: 1rem; color: #6b7280;">
                        <i class="fas fa-spinner fa-spin"></i> Loading available time slots...
                    </div>

                    <!-- Error Message -->
                    <div id="appointmentError" class="error-message" style="display: none; background: #fee2e2; color: #991b1b; padding: 0.75rem; border-radius: 0.5rem; margin-top: 1rem;">
                    </div>

                    <!-- Success Message -->
                    <div id="appointmentSuccess" class="success-message" style="display: none;">
                        Appointment created successfully!
                    </div>

                    <!-- Actions -->
                    <div class="modal-actions" style="margin-top: 1.5rem;">
                        <button type="submit" id="createAppointmentBtn" class="btn-primary" style="padding: 0.75rem 1.5rem;">
                            Create Appointment
                        </button>
                        <button type="button" class="btn-cancel" onclick="closeAppointmentModal()">Cancel</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Footer -->
    <footer class="app-footer">
        <div class="footer-content">
            <div class="footer-branding">
                <img src="https://assets.cdn.filesafe.space/3lSeAHXNU9t09Hhp9oai/media/68e1d01be1be509a4f79755b.png" alt="RinglyPro" class="footer-logo">
                <p>AI-Powered Phone Receptionist Service</p>
            </div>

            <div class="footer-links">
                <a href="https://ringlypro.com/privacy" target="_blank">Privacy Policy</a>
                <a href="https://ringlypro.com/terms" target="_blank">Terms of Service</a>
            </div>

            <div class="footer-contact">
                <p><strong>Customer Service:</strong></p>
                <p><a href="tel:+18886103810">(888) 610-3810</a></p>
                <p><a href="mailto:info@digit2ai.com">info@digit2ai.com</a></p>
            </div>

            <div class="footer-copyright">
                <p>RinglyPro is a service of Digit2ai LLC. © All rights reserved.</p>
                <p style="margin-top: 0.5rem;">All registered trademarks herein are the property of their respective owners.</p>
            </div>
        </div>
    </footer>

    <script>
        // Register Service Worker for PWA
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', () => {
                navigator.serviceWorker.register('/service-worker.js')
                    .then((registration) => {
                        console.log('ServiceWorker registered:', registration.scope);
                    })
                    .catch((error) => {
                        console.log('ServiceWorker registration failed:', error);
                    });
            });
        }

        // Extract CLIENT_ID from JWT token in localStorage
        function getClientIdFromToken() {
            const token = localStorage.getItem('token');
            if (!token) {
                window.location.href = '/login';
                return null;
            }
            try {
                const payload = JSON.parse(atob(token.split('.')[1]));
                
                console.log('JWT Payload:', payload);
                console.log('clientId from payload:', payload.clientId);
                
                // Display username in header
                const usernameDisplay = document.getElementById('username-display');
                if (usernameDisplay) {
                    if (payload.firstName && payload.lastName) {
                        usernameDisplay.textContent = `Welcome, ${payload.firstName} ${payload.lastName}`;
                    } else if (payload.businessName) {
                        usernameDisplay.textContent = `Welcome, ${payload.businessName}`;
                    } else if (payload.email) {
                        usernameDisplay.textContent = `Welcome, ${payload.email}`;
                    }
                }
                
                return payload.clientId;
            } catch (error) {
                console.error('Invalid token:', error);
                window.location.href = '/login';
                return null;
            }
        }

        const CLIENT_ID = getClientIdFromToken();
        let currentAction = '';
        let dashboardData = null;
        let authToken = localStorage.getItem('token');
        let creditsData = null;
        let allAppointments = []; // Store all appointments for filtering
        let currentDaysFilter = 7; // Default to 7 days

        // Initialize on page load
        document.addEventListener('DOMContentLoaded', () => {
            if (!authToken) {
                window.location.href = '/login';
                return;
            }

            loadRachelStatus();
            loadDashboard();
            loadCreditsBalance();
            loadMessages(); // Load messages independently (fixes loading issue)
            loadReferralStats(); // Load referral statistics
            setupTabSwitching();
            setupRachelToggle();

            // Start auto-refresh for messages
            startMessagesAutoRefresh();
        });

        // Logout function
        function logout() {
            localStorage.removeItem('token');
            window.location.href = '/login';
        }

        // Helper function to make authenticated API calls
        async function authenticatedFetch(url, options = {}) {
            const headers = {
                ...options.headers,
                'Authorization': `Bearer ${authToken}`
            };
            
            const response = await fetch(url, { ...options, headers });
            
            if (response.status === 401) {
                localStorage.removeItem('token');
                window.location.href = '/login';
                return null;
            }
            
            return response;
        }

        // Calculate total minutes from balance and free minutes
        function calculateTotalMinutes(balance, freeMinutesUsed, monthlyFreeMinutes = 100) {
            const freeMinutesRemaining = Math.max(0, monthlyFreeMinutes - freeMinutesUsed);
            const paidMinutes = Math.floor(balance / 0.20); // $0.20 per minute
            return freeMinutesRemaining + paidMinutes;
        }

        // Load Credits Balance
        async function loadCreditsBalance() {
            try {
                const response = await authenticatedFetch(`/api/credits/balance`);
                if (!response) return;
                
                const data = await response.json();
                
                if (data.success) {
                    creditsData = data.data;
                    const freeMinutesRemaining = data.data.freeMinutesRemaining || 0;
                    const freeMinutesUsed = data.data.freeMinutesUsed || 0;
                    const paidBalance = parseFloat(data.data.balance) || 0;
                    const paidMinutes = Math.floor(paidBalance / 0.20);
                    const totalMinutes = freeMinutesRemaining + paidMinutes;

                    // Display total minutes in header
                    document.getElementById('headerCreditAmount').textContent = `${totalMinutes} min`;

                    // Check for low balance (< 10 minutes)
                    if (totalMinutes < 10) {
                        const alert = document.getElementById('lowBalanceAlert');
                        const message = document.getElementById('lowBalanceMessage');
                        message.textContent = `Only ${totalMinutes} minutes remaining. Recharge now to avoid service interruption.`;
                        alert.classList.add('show');
                    } else {
                        document.getElementById('lowBalanceAlert').classList.remove('show');
                    }
                }
            } catch (error) {
                console.error('Error loading credits:', error);
                document.getElementById('headerCreditAmount').textContent = 'N/A';
            }
        }

        // Load Rachel Status
        async function loadRachelStatus() {
            try {
                const response = await authenticatedFetch(`/api/client/rachel-status/${CLIENT_ID}`);
                if (!response) return;
                
                const data = await response.json();
                
                if (data.success) {
                    updateRachelUI(data.client.rachel_enabled);
                    document.getElementById('rachelToggle').checked = data.client.rachel_enabled;
                }
            } catch (error) {
                console.error('Error loading Rachel status:', error);
                document.getElementById('rachelStatusText').textContent = 'Status unavailable';
            }
        }

        // Update Rachel UI
        function updateRachelUI(enabled) {
            const dot = document.getElementById('rachelStatusDot');
            const text = document.getElementById('rachelStatusText');
            
            if (enabled) {
                dot.classList.add('active');
                dot.classList.remove('inactive');
                text.textContent = 'Handling calls';
            } else {
                dot.classList.remove('active');
                dot.classList.add('inactive');
                text.textContent = 'Disabled';
            }
        }

        // Setup Rachel Toggle
        function setupRachelToggle() {
            document.getElementById('rachelToggle').addEventListener('change', async (e) => {
                const enabled = e.target.checked;
                
                try {
                    const response = await authenticatedFetch(`/api/client/rachel-status/${CLIENT_ID}`, {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ rachel_enabled: enabled })
                    });
                    
                    if (!response) return;
                    const data = await response.json();
                    
                    if (data.success) {
                        updateRachelUI(enabled);
                        await showForwardingInstructions(enabled);
                    } else {
                        e.target.checked = !enabled;
                        alert('Failed to update Rachel status');
                    }
                } catch (error) {
                    console.error('Error toggling Rachel:', error);
                    e.target.checked = !enabled;
                    alert('Error updating Rachel status');
                }
            });
        }

        // Show forwarding instructions when toggle changes
        async function showForwardingInstructions(enabled) {
            try {
                let carrier = localStorage.getItem('carrier_preference');

                if (!carrier) {
                    carrier = await promptForCarrier();
                    if (!carrier) return;
                    localStorage.setItem('carrier_preference', carrier);
                }

                const response = await fetch(`/api/call-forwarding/setup/${carrier}/${CLIENT_ID}`);
                const data = await response.json();

                if (data.success && data.setup && data.setup.recommended) {
                    const businessPhone = data.client.business_phone;
                    const carrierName = data.carrier.name;

                    let message;

                    if (enabled) {
                        // ACTIVATION instructions
                        const activateCode = data.setup.recommended.activate;
                        message = `
✅ RACHEL AI ACTIVATED!

To forward calls from your business phone to Rachel AI:

Carrier: ${carrierName}
From your business phone (${businessPhone}), dial:

${activateCode}

Press the CALL button and wait for confirmation tone.

✅ All calls will then forward to Rachel AI!

(To change carrier, clear browser data)
                        `.trim();
                    } else {
                        // DEACTIVATION instructions
                        const deactivateCode = data.setup.recommended.deactivate;
                        message = `
⛔ RACHEL AI DEACTIVATED

To stop forwarding calls to Rachel AI:

Carrier: ${carrierName}
From your business phone (${businessPhone}), dial:

${deactivateCode}

Press the CALL button and wait for confirmation tone.

✅ Call forwarding has been turned off!

(To change carrier, clear browser data)
                        `.trim();
                    }

                    alert(message);
                }
            } catch (error) {
                console.error('Error getting forwarding instructions:', error);
            }
        }

        // Prompt user to select their carrier
        async function promptForCarrier() {
            const carriers = [
                { code: 'att', name: 'AT&T' },
                { code: 'verizon', name: 'Verizon' },
                { code: 'tmobile', name: 'T-Mobile' },
                { code: 'sprint', name: 'Sprint/T-Mobile' },
                { code: 'uscellular', name: 'US Cellular' },
                { code: 'boost', name: 'Boost Mobile' },
                { code: 'metro', name: 'Metro by T-Mobile' },
                { code: 'visible', name: 'Visible' },
                { code: 'cricketwireless', name: 'Cricket Wireless' }
            ];
            
            const carrierList = carriers.map((c, i) => `${i + 1}. ${c.name}`).join('\n');
            const selection = prompt(`Select your phone carrier:\n\n${carrierList}\n\nEnter number (1-${carriers.length}):`);
            
            if (!selection) return null;
            
            const index = parseInt(selection) - 1;
            if (index >= 0 && index < carriers.length) {
                return carriers[index].code;
            }

            alert('Invalid selection. Please try again.');
            return null;
        }

        // ==================== REFERRAL SYSTEM ====================

        // Load referral statistics
        async function loadReferralStats() {
            try {
                const response = await authenticatedFetch(`/api/referral/${CLIENT_ID}`);
                if (!response) {
                    console.log('No response from referral API - using fallback');
                    return;
                }

                const data = await response.json();

                if (data.success) {
                    const countBadge = document.getElementById('referralCount');
                    if (countBadge) {
                        countBadge.textContent = data.stats.totalReferrals || 0;
                    }

                    // Store referral link globally for sharing
                    window.REFERRAL_LINK = data.client.referralLink;
                    window.REFERRAL_CODE = data.client.referralCode;
                }
            } catch (error) {
                console.error('Error loading referral stats:', error);
                // Don't fail silently - keep the default 0 count
                const countBadge = document.getElementById('referralCount');
                if (countBadge) {
                    countBadge.textContent = '0';
                }
            }
        }

        // Share referral link
        async function shareReferralLink() {
            try {
                if (!window.REFERRAL_LINK) {
                    const response = await authenticatedFetch(`/api/referral/${CLIENT_ID}/link`);

                    if (!response) {
                        alert('⚠️ Referral System Not Yet Activated\n\nThe referral system needs to be set up in production.\n\nPlease contact support at info@digit2ai.com to activate your referral link.');
                        return;
                    }

                    const data = await response.json();

                    if (!data.success) {
                        alert('⚠️ Referral System Not Yet Activated\n\nYour referral code has not been generated yet.\n\nPlease contact support at info@digit2ai.com to activate your referral link.');
                        return;
                    }

                    // Check if we actually got a referral link
                    if (!data.referralLink || data.referralLink.includes('null')) {
                        alert('⚠️ Referral Code Not Generated\n\nYour account does not have a referral code yet.\n\nPlease contact support at info@digit2ai.com to generate your referral code.');
                        return;
                    }

                    window.REFERRAL_LINK = data.referralLink;
                    window.REFERRAL_CODE = data.referralCode;
                }

                // Double-check we have a valid link before sharing
                if (!window.REFERRAL_LINK || window.REFERRAL_LINK.includes('null')) {
                    alert('⚠️ Referral Code Not Generated\n\nYour account does not have a referral code yet.\n\nPlease contact support at info@digit2ai.com to generate your referral code.');
                    return;
                }

                const shareData = {
                    title: 'Join RinglyPro',
                    text: `Join me on RinglyPro! Get your own AI assistant to handle calls 24/7. Sign up with my link and we both benefit!`,
                    url: window.REFERRAL_LINK
                };

                // Try native share API (works on mobile)
                if (navigator.share) {
                    try {
                        await navigator.share(shareData);
                        console.log('✅ Referral link shared successfully');
                    } catch (shareError) {
                        // User canceled the share - this is normal, don't show error
                        if (shareError.name === 'AbortError') {
                            console.log('Share canceled by user');
                            return; // Exit gracefully
                        }
                        // For other errors, fall through to clipboard copy
                        throw shareError;
                    }
                } else {
                    // Fallback: Copy to clipboard
                    await navigator.clipboard.writeText(window.REFERRAL_LINK);

                    // Show custom alert with the link
                    alert(`✅ Referral link copied to clipboard!\n\n${window.REFERRAL_LINK}\n\nYour referral code: ${window.REFERRAL_CODE}\n\nShare this link with colleagues and contacts to earn commissions!`);
                }
            } catch (error) {
                console.error('Error sharing referral link:', error);

                // Fallback: Just show the link if we have it
                if (window.REFERRAL_LINK && !window.REFERRAL_LINK.includes('null')) {
                    alert(`Your referral link:\n\n${window.REFERRAL_LINK}\n\nCode: ${window.REFERRAL_CODE}`);
                } else {
                    alert('⚠️ Referral System Error\n\nUnable to generate referral link at this time.\n\nPlease contact support at info@digit2ai.com');
                }
            }
        }

        // Load Dashboard Data
        async function loadDashboard() {
            try {
                const response = await authenticatedFetch(`/api/mobile/dashboard/today/${CLIENT_ID}`);
                if (!response) {
                    throw new Error('No response from server');
                }

                const data = await response.json();

                if (data.success) {
                    dashboardData = data.data;
                    renderAppointments(data.data.appointments);
                    renderCommunications(data.data.communications);
                } else {
                    throw new Error(data.message || 'Failed to load dashboard');
                }
            } catch (error) {
                console.error('Error loading dashboard:', error);
                document.getElementById('appointmentsList').innerHTML = `
                    <div class="empty-state">
                        <p>Error loading appointments</p>
                        <p style="font-size: 0.75rem; color: #6b7280; margin-top: 0.5rem;">${error.message}</p>
                    </div>
                `;
            }
        }

        // Filter appointments by date range
        function filterAppointmentsByDays(days) {
            currentDaysFilter = days;

            // Update active tab
            document.querySelectorAll('.filter-tab').forEach(tab => {
                tab.classList.remove('active');
                if (tab.getAttribute('data-days') == days) {
                    tab.classList.add('active');
                }
            });

            // Filter and render
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            const endDate = new Date(today);
            endDate.setDate(today.getDate() + days);

            const filtered = allAppointments.filter(apt => {
                // Use appointmentDate (raw date) instead of date (formatted string)
                const aptDate = new Date(apt.appointmentDate);
                aptDate.setHours(0, 0, 0, 0);
                return aptDate >= today && aptDate < endDate;
            });

            console.log(`Filtering ${allAppointments.length} appointments for ${days} days:`, filtered.length, 'found');

            renderFilteredAppointments(filtered);
        }

        // Render Appointments (initial load - stores all)
        function renderAppointments(appointments) {
            // Store all appointments
            allAppointments = appointments || [];

            // Apply current filter
            filterAppointmentsByDays(currentDaysFilter);
        }

        // Render filtered appointments
        function renderFilteredAppointments(appointments) {
            const container = document.getElementById('appointmentsList');

            if (!appointments || appointments.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/>
                        </svg>
                        <p>No appointments scheduled in the next ${currentDaysFilter} days</p>
                    </div>
                `;
                return;
            }

            container.innerHTML = appointments.map(apt => `
                <div class="appointment-card">
                    <div class="appointment-main">
                        <div class="appointment-info">
                            <h3>
                                ${apt.name}
                                ${apt.status === 'confirmed' ? '<svg style="width: 1rem; height: 1rem; color: #10b981;" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/></svg>' : ''}
                            </h3>
                            <p style="font-weight: 600; color: #3b82f6; font-size: 0.875rem;">${apt.date} at ${apt.time}</p>
                            <p>${apt.notes || 'No notes'}</p>
                            <p style="font-size: 0.75rem;">${apt.phone}</p>
                        </div>
                        <div class="appointment-time">
                            <span class="status-badge status-${apt.status}">${apt.status}</span>
                        </div>
                    </div>
                    <div class="appointment-actions">
                        <button class="btn-text" onclick="sendSMS('${apt.phone}', '${apt.name}')">
                            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z"/>
                            </svg>
                            Text
                        </button>
                        <button class="btn-call-apt" onclick="makeCall('${apt.phone}', '${apt.name}')">
                            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"/>
                            </svg>
                            Call
                        </button>
                    </div>
                </div>
            `).join('');
        }

        // Render Communications (DEPRECATED - section removed)
        function renderCommunications(communications) {
            const container = document.getElementById('communicationsList');

            // Container doesn't exist anymore (section was deprecated)
            if (!container) {
                console.log('Communications section deprecated - skipping render');
                return;
            }

            if (!communications || communications.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z"/>
                        </svg>
                        <p>No recent communications</p>
                    </div>
                `;
                return;
            }

            container.innerHTML = communications.map(comm => `
                <div class="comm-card">
                    <div class="comm-card-content">
                        <div class="comm-icon ${comm.type}">
                            ${comm.type === 'sms' ?
                                '<svg fill="none" stroke="currentColor" viewBox="0 0 24 24" style="width: 1.25rem; height: 1.25rem;"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z"/></svg>' :
                                '<svg fill="none" stroke="currentColor" viewBox="0 0 24 24" style="width: 1.25rem; height: 1.25rem;"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"/></svg>'
                            }
                        </div>
                        <div class="comm-info">
                            <div class="comm-header">
                                <h4>${comm.contact}</h4>
                                <span class="time">${comm.time}</span>
                            </div>
                            <p>${comm.type === 'sms' ? `"${comm.message}"` : `Call duration: ${comm.duration}`}</p>
                            <span class="comm-badge ${comm.direction}">${comm.direction === 'inbound' ? 'Received' : 'Sent'}</span>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        // Load Messages
        async function loadMessages() {
            try {
                const response = await authenticatedFetch(`/api/messages/client/${CLIENT_ID}?limit=20`);
                if (!response) return;

                const messages = await response.json();
                renderMessages(messages);
            } catch (error) {
                console.error('Error loading messages:', error);
                document.getElementById('messagesList').innerHTML = '<div class="empty-state"><p>Error loading messages</p></div>';
            }
        }

        // Render Messages (filtered to yesterday, today, tomorrow only)
        function renderMessages(messages) {
            const container = document.getElementById('messagesList');

            if (!messages || messages.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z"/>
                        </svg>
                        <p>No voicemail messages yet</p>
                    </div>
                `;
                updateMessagesBadge(0);
                return;
            }

            // Filter messages: only show yesterday, today, and tomorrow
            const now = new Date();
            const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
            const yesterday = new Date(today);
            yesterday.setDate(yesterday.getDate() - 1);
            const tomorrow = new Date(today);
            tomorrow.setDate(tomorrow.getDate() + 2); // End of tomorrow

            const filteredMessages = messages.filter(msg => {
                const createdDate = new Date(msg.createdAt || msg.created_at);
                return createdDate >= yesterday && createdDate < tomorrow;
            });

            if (filteredMessages.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z"/>
                        </svg>
                        <p>No messages from yesterday, today, or tomorrow</p>
                    </div>
                `;
                updateMessagesBadge(0);
                return;
            }

            container.innerHTML = filteredMessages.map((msg, index) => {
                const createdDate = new Date(msg.createdAt || msg.created_at);
                const timeAgo = getTimeAgo(createdDate);
                const preview = msg.body.length > 100 ? msg.body.substring(0, 100) + '...' : msg.body;
                const isUnread = !msg.read;
                const unreadIndicator = isUnread ? '<span style="display: inline-block; width: 8px; height: 8px; background: #ef4444; border-radius: 50%; margin-right: 8px;"></span>' : '';

                // Extract recording SID from Twilio URL and use proxy endpoint
                let recordingProxyUrl = null;
                if (msg.recordingUrl || msg.recording_url) {
                    const twilioUrl = msg.recordingUrl || msg.recording_url;
                    const recordingSidMatch = twilioUrl.match(/RE[a-f0-9]{32}/i);
                    if (recordingSidMatch) {
                        recordingProxyUrl = '/api/messages/recording/' + recordingSidMatch[0];
                    }
                }

                return `
                    <div class="message-card ${isUnread ? 'unread' : ''}" id="message-${index}" data-message-id="${msg.id}">
                        <div class="message-header" onclick="toggleMessage(${index}, ${msg.id}, ${isUnread})">
                            <div class="message-info">
                                <h3>${unreadIndicator}📞 ${msg.fromNumber || msg.from_number || 'Unknown'}</h3>
                                <p>${timeAgo}</p>
                                <div class="message-preview">${preview}</div>
                            </div>
                            <svg class="message-toggle" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
                            </svg>
                        </div>
                        <div class="message-body">
                            <div class="message-content">
                                ${msg.body}
                                ${recordingProxyUrl ? `
                                    <div style="margin-top: 1rem; padding: 1rem; background: #f3f4f6; border-radius: 0.5rem;">
                                        <div style="display: flex; align-items: center; gap: 0.5rem; margin-bottom: 0.5rem;">
                                            <svg width="20" height="20" fill="currentColor" viewBox="0 0 16 16" style="color: #3b82f6;">
                                                <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                                                <path d="M6.271 5.055a.5.5 0 0 1 .52.038l3.5 2.5a.5.5 0 0 1 0 .814l-3.5 2.5A.5.5 0 0 1 6 10.5v-5a.5.5 0 0 1 .271-.445z"/>
                                            </svg>
                                            <strong style="color: #1f2937;">Voicemail Recording</strong>
                                        </div>
                                        <audio controls style="width: 100%; max-width: 400px;">
                                            <source src="${recordingProxyUrl}" type="audio/mpeg">
                                            Your browser does not support audio playback.
                                        </audio>
                                    </div>
                                ` : ''}
                            </div>
                            <div class="message-actions">
                                <button class="btn-reply-sms" onclick="sendSMS('${msg.fromNumber || msg.from_number}', 'Caller')">
                                    <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"/>
                                    </svg>
                                    Reply
                                </button>
                            </div>
                        </div>
                    </div>
                `;
            }).join('');

            // Update badge counter - count only unread messages
            const unreadCount = filteredMessages.filter(msg => !msg.read).length;
            updateMessagesBadge(unreadCount);
        }

        // Toggle message expand/collapse
        async function toggleMessage(index, messageId, isUnread) {
            const messageCard = document.getElementById(`message-${index}`);
            const wasExpanded = messageCard.classList.contains('expanded');

            messageCard.classList.toggle('expanded');

            // Mark as read when expanding an unread message
            if (!wasExpanded && isUnread) {
                try {
                    const response = await authenticatedFetch(`/api/messages/${messageId}/mark-read`, {
                        method: 'PATCH'
                    });

                    if (response && response.ok) {
                        console.log(`✅ Message ${messageId} marked as read`);

                        // Remove unread indicator
                        messageCard.classList.remove('unread');
                        const unreadDot = messageCard.querySelector('h3 span');
                        if (unreadDot) unreadDot.remove();

                        // Update badge counter (decrement by 1)
                        const badge = document.getElementById('messagesBadge');
                        if (badge && badge.textContent) {
                            const currentCount = parseInt(badge.textContent);
                            updateMessagesBadge(Math.max(0, currentCount - 1));
                        }
                    }
                } catch (error) {
                    console.error('Error marking message as read:', error);
                }
            }
        }

        // Update messages badge counter
        function updateMessagesBadge(count) {
            const badge = document.getElementById('messagesBadge');
            if (!badge) return;

            if (count > 0) {
                badge.textContent = count;
                badge.style.display = 'inline-block';

                // Update favicon title
                document.title = `(${count}) RinglyPro CRM`;
            } else {
                badge.style.display = 'none';
                document.title = 'RinglyPro CRM';
            }
        }

        // Reply function is now using sendSMS() which opens device SMS app

        // Get time ago helper
        function getTimeAgo(date) {
            const seconds = Math.floor((new Date() - date) / 1000);

            if (seconds < 60) return 'Just now';
            if (seconds < 3600) return `${Math.floor(seconds / 60)} min ago`;
            if (seconds < 86400) return `${Math.floor(seconds / 3600)} hours ago`;
            if (seconds < 604800) return `${Math.floor(seconds / 86400)} days ago`;

            return date.toLocaleDateString();
        }

        // Manual refresh messages
        async function refreshMessages() {
            const btn = document.getElementById('refreshMessagesBtn');
            const btnText = document.getElementById('refreshBtnText');

            // Visual feedback
            btn.classList.add('refreshing');
            btn.disabled = true;
            btnText.textContent = 'Refreshing...';

            try {
                await loadMessages();

                // Success feedback
                btnText.textContent = 'Updated!';
                setTimeout(() => {
                    btnText.textContent = 'Refresh';
                }, 2000);
            } catch (error) {
                console.error('Error refreshing messages:', error);
                btnText.textContent = 'Error';
                setTimeout(() => {
                    btnText.textContent = 'Refresh';
                }, 2000);
            } finally {
                btn.classList.remove('refreshing');
                btn.disabled = false;
            }
        }

        // Auto-refresh messages every 60 seconds
        let messagesAutoRefreshInterval;

        function startMessagesAutoRefresh() {
            // Clear any existing interval
            if (messagesAutoRefreshInterval) {
                clearInterval(messagesAutoRefreshInterval);
            }

            // Refresh every 60 seconds (1 minute)
            messagesAutoRefreshInterval = setInterval(async () => {
                console.log('🔄 Auto-refreshing messages...');
                try {
                    await loadMessages();
                    console.log('✅ Messages auto-refreshed');
                } catch (error) {
                    console.error('❌ Auto-refresh failed:', error);
                }
            }, 60000); // 60 seconds

            console.log('✅ Messages auto-refresh enabled (every 60 seconds)');
        }

        function stopMessagesAutoRefresh() {
            if (messagesAutoRefreshInterval) {
                clearInterval(messagesAutoRefreshInterval);
                console.log('⏹️ Messages auto-refresh stopped');
            }
        }

        // SMS compose form removed - Reply button now uses device SMS app (sendSMS function)

        // Tab Switching
        function setupTabSwitching() {
            document.querySelectorAll('.nav-tab').forEach(tab => {
                tab.addEventListener('click', () => {
                    document.querySelectorAll('.nav-tab').forEach(t => t.classList.remove('active'));
                    document.querySelectorAll('.content-section').forEach(s => s.classList.remove('active'));

                    tab.classList.add('active');
                    const tabName = tab.dataset.tab;
                    document.getElementById(`${tabName}Section`).classList.add('active');

                    // Load user guide when tab is clicked
                    if (tabName === 'userguide') {
                        loadUserGuide();
                    }
                });
            });
        }

        // Load and render user guide
        let userGuideLoaded = false;
        async function loadUserGuide() {
            if (userGuideLoaded) return; // Only load once

            const container = document.getElementById('userGuideContent');

            try {
                const response = await fetch('/USER_GUIDE.md');
                if (!response.ok) throw new Error('Failed to load user guide');

                const markdown = await response.text();

                // Convert markdown to HTML (basic implementation)
                let html = markdown
                    // Headers
                    .replace(/^### (.*$)/gim, '<h3 id="$1">$1</h3>')
                    .replace(/^## (.*$)/gim, '<h2 id="$1">$1</h2>')
                    .replace(/^# (.*$)/gim, '<h1 id="$1">$1</h1>')
                    // Bold
                    .replace(/\*\*(.*?)\*\*/gim, '<strong>$1</strong>')
                    // Italic
                    .replace(/\*(.*?)\*/gim, '<em>$1</em>')
                    // Code blocks
                    .replace(/```(.*?)```/gims, '<pre><code>$1</code></pre>')
                    // Inline code
                    .replace(/`([^`]+)`/gim, '<code>$1</code>')
                    // Links
                    .replace(/\[([^\]]+)\]\(([^)]+)\)/gim, '<a href="$2" target="_blank">$1</a>')
                    // Blockquotes
                    .replace(/^> (.*$)/gim, '<blockquote>$1</blockquote>')
                    // Horizontal rules
                    .replace(/^---$/gim, '<hr>')
                    // Line breaks
                    .replace(/\n\n/g, '</p><p>')
                    .replace(/\n/g, '<br>');

                // Wrap in paragraphs
                html = '<div style="line-height: 1.6; color: #333;">' +
                       '<style>' +
                       '#userGuideContent h1 { font-size: 2rem; margin-top: 2rem; margin-bottom: 1rem; color: #1a202c; border-bottom: 2px solid #e2e8f0; padding-bottom: 0.5rem; }' +
                       '#userGuideContent h2 { font-size: 1.5rem; margin-top: 1.5rem; margin-bottom: 0.75rem; color: #2d3748; }' +
                       '#userGuideContent h3 { font-size: 1.25rem; margin-top: 1rem; margin-bottom: 0.5rem; color: #4a5568; }' +
                       '#userGuideContent code { background: #f7fafc; padding: 0.125rem 0.25rem; border-radius: 0.25rem; font-family: monospace; color: #d53f8c; }' +
                       '#userGuideContent pre { background: #2d3748; color: #e2e8f0; padding: 1rem; border-radius: 0.5rem; overflow-x: auto; }' +
                       '#userGuideContent pre code { background: transparent; color: inherit; padding: 0; }' +
                       '#userGuideContent blockquote { border-left: 4px solid #4299e1; padding-left: 1rem; margin: 1rem 0; color: #4a5568; background: #ebf8ff; padding: 0.75rem 1rem; border-radius: 0.25rem; }' +
                       '#userGuideContent a { color: #4299e1; text-decoration: none; }' +
                       '#userGuideContent a:hover { text-decoration: underline; }' +
                       '#userGuideContent hr { border: none; border-top: 2px solid #e2e8f0; margin: 2rem 0; }' +
                       '#userGuideContent ul, #userGuideContent ol { margin-left: 1.5rem; margin-bottom: 1rem; }' +
                       '#userGuideContent li { margin-bottom: 0.5rem; }' +
                       '</style>' +
                       '<p>' + html + '</p>' +
                       '</div>';

                container.innerHTML = html;
                userGuideLoaded = true;

                console.log('✅ User guide loaded');

            } catch (error) {
                console.error('❌ Error loading user guide:', error);
                container.innerHTML = '<p style="color: #e53e3e; text-align: center; padding: 2rem;">Failed to load user guide. Please try refreshing the page.</p>';
            }
        }

        // Scroll to English section
        function scrollToEnglish() {
            const englishHeader = document.querySelector('#userGuideContent h1');
            if (englishHeader) {
                englishHeader.scrollIntoView({ behavior: 'smooth', block: 'start' });
            }
        }

        // Scroll to Spanish section
        function scrollToSpanish() {
            const allH1s = document.querySelectorAll('#userGuideContent h1');
            if (allH1s.length > 1) {
                allH1s[1].scrollIntoView({ behavior: 'smooth', block: 'start' });
            }
        }

        // Contact Search
        function openContactSearch(action) {
            currentAction = action;
            const modal = document.getElementById('contactModal');
            const title = document.getElementById('modalTitle');
            
            title.textContent = action === 'sms' ? 'Send Message To' : 'Call Contact';
            modal.classList.add('active');
            
            if (dashboardData && dashboardData.appointments) {
                renderContactList(dashboardData.appointments);
            }
            
            setTimeout(() => document.getElementById('contactSearch').focus(), 100);
        }

        function closeContactSearch() {
            document.getElementById('contactModal').classList.remove('active');
            document.getElementById('contactSearch').value = '';
        }

        function renderContactList(contacts) {
            const container = document.getElementById('contactResults');
            const html = '<p style="font-size: 0.875rem; font-weight: 500; color: #374151; margin-bottom: 0.5rem;">Recent Contacts</p>' +
                contacts.map(contact => `
                    <div class="contact-item" onclick="selectContact('${contact.phone}', '${contact.name}')">
                        <div class="contact-avatar">
                            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                            </svg>
                        </div>
                        <div class="contact-details">
                            <h4>${contact.name}</h4>
                            <p>${contact.phone}</p>
                        </div>
                    </div>
                `).join('');
            
            container.innerHTML = html;
        }

        async function searchContacts() {
            const query = document.getElementById('contactSearch').value;
            
            if (query.length < 2) {
                if (dashboardData && dashboardData.appointments) {
                    renderContactList(dashboardData.appointments);
                }
                return;
            }

            try {
                const response = await authenticatedFetch(`/api/mobile/contacts/smart-search/${CLIENT_ID}?q=${encodeURIComponent(query)}`);
                if (!response) return;
                
                const data = await response.json();
                
                if (data.success && data.contacts.length > 0) {
                    const container = document.getElementById('contactResults');
                    container.innerHTML = '<p style="font-size: 0.875rem; font-weight: 500; color: #374151; margin-bottom: 0.5rem;">Search Results</p>' +
                        data.contacts.map(contact => `
                            <div class="contact-item" onclick="selectContact('${contact.phone}', '${contact.name}')">
                                <div class="contact-avatar">
                                    <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                                    </svg>
                                </div>
                                <div class="contact-details">
                                    <h4>${contact.name}</h4>
                                    <p>${contact.display_details}</p>
                                </div>
                            </div>
                        `).join('');
                }
            } catch (error) {
                console.error('Error searching contacts:', error);
            }
        }

        function selectContact(phone, name) {
            closeContactSearch();
            if (currentAction === 'sms') {
                sendSMS(phone, name);
            } else if (currentAction === 'call') {
                makeCall(phone, name);
            }
        }

        function sendSMS(phone, name) {
            const message = prompt(`Message to ${name}:`, '');
            
            if (!message || message.trim() === '') {
                return;
            }
            
            const smsURL = `sms:${phone}?body=${encodeURIComponent(message)}`;
            window.location.href = smsURL;
        }

        function makeCall(phone, name) {
            window.location.href = `tel:${phone}`;
        }

        // =====================================================
        // CALENDAR SETTINGS FUNCTIONS
        // =====================================================

        let calendarSettingsData = null;

        async function openCalendarSettings() {
            document.getElementById('calendarModal').classList.add('active');
            await loadCalendarSettings();
        }

        function closeCalendarSettings() {
            document.getElementById('calendarModal').classList.remove('active');
        }

        async function loadCalendarSettings() {
            try {
                const response = await authenticatedFetch(`/api/client/calendar-settings/${CLIENT_ID}`);
                if (!response) return;

                const data = await response.json();

                if (data.success) {
                    calendarSettingsData = data.settings;
                    renderCalendarSettings(data.settings);
                }
            } catch (error) {
                console.error('Error loading calendar settings:', error);
                alert('Failed to load calendar settings. Please try again.');
            }
        }

        function renderCalendarSettings(settings) {
            // Set booking enabled toggle
            document.getElementById('bookingEnabled').checked = settings.booking_enabled;

            // Render day settings
            const daysContainer = document.getElementById('daySettingsList');
            const days = [
                { key: 'monday', label: 'Monday' },
                { key: 'tuesday', label: 'Tuesday' },
                { key: 'wednesday', label: 'Wednesday' },
                { key: 'thursday', label: 'Thursday' },
                { key: 'friday', label: 'Friday' },
                { key: 'saturday', label: 'Saturday' },
                { key: 'sunday', label: 'Sunday' }
            ];

            daysContainer.innerHTML = days.map(day => {
                const dayConfig = settings.calendar_settings[day.key];
                const isEnabled = dayConfig && dayConfig.enabled;
                const allDayOff = !isEnabled;
                const start = dayConfig && dayConfig.start ? dayConfig.start : '09:00';
                const end = dayConfig && dayConfig.end ? dayConfig.end : '17:00';

                return `
                    <div class="day-setting">
                        <div class="day-header">
                            <div class="day-name">${day.label}</div>
                            <div class="day-controls">
                                <label class="checkbox-label">
                                    <input type="checkbox"
                                           id="allDayOff_${day.key}"
                                           ${allDayOff ? 'checked' : ''}
                                           onchange="toggleDayOff('${day.key}')">
                                    <span>All Day Off</span>
                                </label>
                            </div>
                        </div>
                        <div class="time-inputs" id="timeInputs_${day.key}">
                            <div class="time-group">
                                <label>Start Time</label>
                                <input type="time"
                                       id="start_${day.key}"
                                       value="${start}"
                                       ${allDayOff ? 'disabled' : ''}>
                            </div>
                            <div class="time-group">
                                <label>End Time</label>
                                <input type="time"
                                       id="end_${day.key}"
                                       value="${end}"
                                       ${allDayOff ? 'disabled' : ''}>
                            </div>
                        </div>
                    </div>
                `;
            }).join('');
        }

        function toggleDayOff(dayKey) {
            const checkbox = document.getElementById(`allDayOff_${dayKey}`);
            const startInput = document.getElementById(`start_${dayKey}`);
            const endInput = document.getElementById(`end_${dayKey}`);

            if (checkbox.checked) {
                // All day off - disable time inputs
                startInput.disabled = true;
                endInput.disabled = true;
            } else {
                // Day is enabled - enable time inputs
                startInput.disabled = false;
                endInput.disabled = false;
            }
        }

        async function saveCalendarSettings(event) {
            event.preventDefault();

            const bookingEnabled = document.getElementById('bookingEnabled').checked;
            const days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];

            const calendarSettings = {};

            for (const day of days) {
                const allDayOff = document.getElementById(`allDayOff_${day}`).checked;

                if (allDayOff) {
                    calendarSettings[day] = { enabled: false };
                } else {
                    const start = document.getElementById(`start_${day}`).value;
                    const end = document.getElementById(`end_${day}`).value;

                    if (!start || !end) {
                        alert(`Please set start and end times for ${day.charAt(0).toUpperCase() + day.slice(1)}`);
                        return;
                    }

                    if (start >= end) {
                        alert(`End time must be after start time for ${day.charAt(0).toUpperCase() + day.slice(1)}`);
                        return;
                    }

                    calendarSettings[day] = {
                        enabled: true,
                        start: start,
                        end: end
                    };
                }
            }

            // Save to API
            const saveBtn = document.getElementById('saveCalendarBtn');
            saveBtn.disabled = true;
            saveBtn.textContent = 'Saving...';

            try {
                const response = await authenticatedFetch(`/api/client/calendar-settings/${CLIENT_ID}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        booking_enabled: bookingEnabled,
                        calendar_settings: calendarSettings,
                        appointment_duration: calendarSettingsData.appointment_duration
                    })
                });

                if (!response) {
                    throw new Error('No response from server');
                }

                const data = await response.json();

                if (data.success) {
                    alert('Calendar settings saved successfully!');
                    closeCalendarSettings();
                } else {
                    throw new Error(data.error || 'Failed to save settings');
                }
            } catch (error) {
                console.error('Error saving calendar settings:', error);
                alert(`Failed to save calendar settings: ${error.message}`);
            } finally {
                saveBtn.disabled = false;
                saveBtn.textContent = 'Save Settings';
            }
        }

        // Attach form submit handler
        document.addEventListener('DOMContentLoaded', () => {
            const calendarForm = document.getElementById('calendarSettingsForm');
            if (calendarForm) {
                calendarForm.addEventListener('submit', saveCalendarSettings);
            }
        });

        // =====================================================
        // IVR SETTINGS FUNCTIONS
        // =====================================================

        let ivrSettingsData = null;

        async function openIVRSettings() {
            document.getElementById('ivrModal').classList.add('active');
            await loadIVRSettings();
        }

        function closeIVRSettings() {
            document.getElementById('ivrModal').classList.remove('active');
        }

        async function loadIVRSettings() {
            try {
                const response = await authenticatedFetch(`/api/client/ivr-settings/${CLIENT_ID}`);

                if (!response) {
                    console.error('No response from IVR settings API');
                    return;
                }

                const data = await response.json();

                if (data.success) {
                    ivrSettingsData = data.settings;

                    // Set IVR enabled toggle
                    document.getElementById('ivrEnabled').checked = ivrSettingsData.ivr_enabled || false;

                    // Load department settings
                    const ivrOptions = ivrSettingsData.ivr_options || [];

                    for (let i = 0; i < 3; i++) {
                        const dept = ivrOptions[i] || { name: '', phone: '', enabled: false };
                        const index = i + 1;

                        document.getElementById(`dept${index}Name`).value = dept.name || '';
                        document.getElementById(`dept${index}Phone`).value = dept.phone || '';
                        document.getElementById(`dept${index}Enabled`).checked = dept.enabled || false;
                    }

                    // Update IVR status badge
                    updateIVRStatusBadge(ivrSettingsData.ivr_enabled);
                } else {
                    console.error('Failed to load IVR settings:', data.error);
                }
            } catch (error) {
                console.error('Error loading IVR settings:', error);
            }
        }

        function updateIVRStatusBadge(enabled) {
            const badge = document.getElementById('ivrStatus');
            if (enabled) {
                badge.textContent = 'ON';
                badge.style.background = '#10b981';
            } else {
                badge.textContent = 'OFF';
                badge.style.background = '#6b7280';
            }
        }

        async function saveIVRSettings(e) {
            e.preventDefault();

            const ivrEnabled = document.getElementById('ivrEnabled').checked;

            // Collect department settings
            const ivrOptions = [];
            for (let i = 1; i <= 3; i++) {
                const name = document.getElementById(`dept${i}Name`).value.trim();
                const phone = document.getElementById(`dept${i}Phone`).value.trim();
                const enabled = document.getElementById(`dept${i}Enabled`).checked;

                if (name && phone) {
                    ivrOptions.push({ name, phone, enabled });
                }
            }

            // Save to API
            const saveBtn = document.getElementById('saveIVRBtn');
            saveBtn.disabled = true;
            saveBtn.textContent = 'Saving...';

            try {
                const response = await authenticatedFetch(`/api/client/ivr-settings/${CLIENT_ID}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        ivr_enabled: ivrEnabled,
                        ivr_options: ivrOptions
                    })
                });

                if (!response) {
                    throw new Error('No response from server');
                }

                const data = await response.json();

                if (data.success) {
                    alert('IVR settings saved successfully!');
                    updateIVRStatusBadge(ivrEnabled);
                    closeIVRSettings();
                } else {
                    alert('Error saving IVR settings: ' + data.error);
                }
            } catch (error) {
                console.error('Error saving IVR settings:', error);
                alert('Failed to save IVR settings. Please try again.');
            } finally {
                saveBtn.disabled = false;
                saveBtn.textContent = 'Save IVR Settings';
            }
        }

        // Initialize IVR form handler
        document.addEventListener('DOMContentLoaded', () => {
            const ivrForm = document.getElementById('ivrSettingsForm');
            if (ivrForm) {
                ivrForm.addEventListener('submit', saveIVRSettings);
            }

            // Load initial IVR status
            loadIVRSettings().catch(err => console.error('Error loading initial IVR status:', err));
        });

        // =====================================================
        // APPOINTMENT MODAL FUNCTIONS
        // =====================================================

        // Store available slots globally
        let availableSlots = [];

        // Open appointment modal
        function openAppointmentModal() {
            const modal = document.getElementById('appointmentModal');
            modal.classList.add('active');

            // Set minimum date to today
            const today = new Date().toISOString().split('T')[0];
            document.getElementById('appointmentDate').setAttribute('min', today);

            // Reset form
            document.getElementById('appointmentForm').reset();
            document.getElementById('appointmentStartTime').disabled = true;
            document.getElementById('appointmentStartTime').innerHTML = '<option value="">Select a date first</option>';
            document.getElementById('appointmentEndTime').disabled = true;
            document.getElementById('appointmentEndTime').innerHTML = '<option value="">Select start time first</option>';
            document.getElementById('appointmentError').style.display = 'none';
            document.getElementById('appointmentSuccess').style.display = 'none';
        }

        // Close appointment modal
        function closeAppointmentModal() {
            const modal = document.getElementById('appointmentModal');
            modal.classList.remove('active');
            document.getElementById('appointmentForm').reset();
        }

        // Load available time slots when date is selected
        async function loadAvailableTimeSlots() {
            const dateInput = document.getElementById('appointmentDate');
            const startTimeSelect = document.getElementById('appointmentStartTime');
            const endTimeSelect = document.getElementById('appointmentEndTime');
            const loading = document.getElementById('appointmentLoadingSlots');
            const errorDiv = document.getElementById('appointmentError');

            const selectedDate = dateInput.value;
            if (!selectedDate) {
                startTimeSelect.disabled = true;
                startTimeSelect.innerHTML = '<option value="">Select a date first</option>';
                endTimeSelect.disabled = true;
                endTimeSelect.innerHTML = '<option value="">Select start time first</option>';
                return;
            }

            // Show loading
            loading.style.display = 'block';
            startTimeSelect.disabled = true;
            endTimeSelect.disabled = true;
            errorDiv.style.display = 'none';

            try {
                const response = await authenticatedFetch(`/api/appointments/availability/${CLIENT_ID}/${selectedDate}`);

                if (!response) {
                    throw new Error('Failed to fetch availability');
                }

                const data = await response.json();

                if (data.success && data.available_slots && data.available_slots.length > 0) {
                    // Store available slots globally
                    availableSlots = data.available_slots;

                    // Populate start time slots
                    startTimeSelect.innerHTML = '<option value="">Select start time</option>' +
                        data.available_slots.map(slot => {
                            return `<option value="${slot}">${formatTimeSlot(slot)}</option>`;
                        }).join('');

                    startTimeSelect.disabled = false;
                } else {
                    startTimeSelect.innerHTML = '<option value="">No available slots for this date</option>';
                    startTimeSelect.disabled = true;
                }
            } catch (error) {
                console.error('Error loading time slots:', error);
                errorDiv.textContent = 'Error loading available time slots. Please try again.';
                errorDiv.style.display = 'block';
                startTimeSelect.innerHTML = '<option value="">Error loading slots</option>';
                startTimeSelect.disabled = true;
            } finally {
                loading.style.display = 'none';
            }
        }

        // Update end time options based on start time selection
        function updateEndTimeOptions() {
            const startTimeSelect = document.getElementById('appointmentStartTime');
            const endTimeSelect = document.getElementById('appointmentEndTime');

            const startTime = startTimeSelect.value;

            if (!startTime || availableSlots.length === 0) {
                endTimeSelect.disabled = true;
                endTimeSelect.innerHTML = '<option value="">Select start time first</option>';
                return;
            }

            // Find the index of the selected start time
            const startIndex = availableSlots.indexOf(startTime);

            // Get all slots after the start time
            const endSlots = availableSlots.slice(startIndex + 1);

            // Add one more option after the last available slot for appointments that go beyond business hours
            endSlots.push(addTimeToSlot(availableSlots[availableSlots.length - 1], 30));

            if (endSlots.length === 0) {
                endTimeSelect.innerHTML = '<option value="">No end time available</option>';
                endTimeSelect.disabled = true;
                return;
            }

            // Populate end time options
            endTimeSelect.innerHTML = '<option value="">Select end time</option>' +
                endSlots.map(slot => {
                    return `<option value="${slot}">${formatTimeSlot(slot)}</option>`;
                }).join('');

            endTimeSelect.disabled = false;
        }

        // Helper function to add minutes to a time string
        function addTimeToSlot(timeSlot, minutes) {
            const [hours, mins] = timeSlot.split(':').map(Number);
            const totalMinutes = hours * 60 + mins + minutes;
            const newHours = Math.floor(totalMinutes / 60);
            const newMins = totalMinutes % 60;
            return `${newHours.toString().padStart(2, '0')}:${newMins.toString().padStart(2, '0')}:00`;
        }

        // Format time slot for display (e.g., "09:00" -> "9:00 AM")
        function formatTimeSlot(time) {
            const [hours, minutes] = time.split(':');
            const hour = parseInt(hours);
            const ampm = hour >= 12 ? 'PM' : 'AM';
            const displayHour = hour === 0 ? 12 : (hour > 12 ? hour - 12 : hour);
            return `${displayHour}:${minutes} ${ampm}`;
        }

        // Handle appointment form submission
        document.addEventListener('DOMContentLoaded', () => {
            const appointmentForm = document.getElementById('appointmentForm');
            if (appointmentForm) {
                appointmentForm.addEventListener('submit', async (e) => {
                    e.preventDefault();

                    const submitBtn = document.getElementById('createAppointmentBtn');
                    const errorDiv = document.getElementById('appointmentError');
                    const successDiv = document.getElementById('appointmentSuccess');

                    // Hide messages
                    errorDiv.style.display = 'none';
                    successDiv.style.display = 'none';

                    // Get form data
                    const customerName = document.getElementById('customerName').value.trim();
                    const customerPhone = document.getElementById('customerPhone').value.trim();
                    const customerEmail = document.getElementById('customerEmail').value.trim() || null;
                    const appointmentDate = document.getElementById('appointmentDate').value;
                    const startTime = document.getElementById('appointmentStartTime').value;
                    const endTime = document.getElementById('appointmentEndTime').value;
                    const notes = document.getElementById('appointmentNotes').value.trim() || null;

                    // Validate
                    if (!customerName || !customerPhone || !appointmentDate || !startTime || !endTime) {
                        errorDiv.textContent = 'Please fill in all required fields.';
                        errorDiv.style.display = 'block';
                        return;
                    }

                    // Calculate all time slots between start and end
                    const timeSlots = [];
                    let currentTime = startTime;
                    while (currentTime < endTime) {
                        timeSlots.push(currentTime);
                        currentTime = addTimeToSlot(currentTime, 30);
                    }

                    if (timeSlots.length === 0) {
                        errorDiv.textContent = 'Invalid time range selected.';
                        errorDiv.style.display = 'block';
                        return;
                    }

                    // Disable submit button
                    submitBtn.disabled = true;
                    submitBtn.innerHTML = '<span class="loading-spinner"></span> Creating...';

                    try {
                        // Create an appointment for each 30-minute slot
                        const promises = timeSlots.map(timeSlot => {
                            return authenticatedFetch('/api/appointments/create', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({
                                    customerName,
                                    customerPhone,
                                    customerEmail,
                                    appointmentDate,
                                    appointmentTime: timeSlot,
                                    notes
                                })
                            });
                        });

                        const responses = await Promise.all(promises);

                        // Check if all succeeded
                        const allSucceeded = responses.every(r => r && r.ok);

                        if (allSucceeded) {
                            // Show success message
                            successDiv.textContent = `Successfully blocked ${timeSlots.length} time slot(s) from ${formatTimeSlot(startTime)} to ${formatTimeSlot(endTime)}`;
                            successDiv.style.display = 'block';

                            // Reload dashboard to show new appointments
                            await loadDashboard();

                            // Close modal after 2 seconds
                            setTimeout(() => {
                                closeAppointmentModal();
                                submitBtn.disabled = false;
                                submitBtn.textContent = 'Create Appointment';
                            }, 2000);
                        } else {
                            throw new Error('Some time slots could not be booked');
                        }
                    } catch (error) {
                        console.error('Error creating appointments:', error);
                        errorDiv.textContent = error.message || 'Error creating appointments. Please try again.';
                        errorDiv.style.display = 'block';
                        submitBtn.disabled = false;
                        submitBtn.textContent = 'Create Appointment';
                    }
                });
            }
        });
    </script>

    <!-- Stripe Library -->
    <script src="https://js.stripe.com/v3/"></script>

    <!-- Credits Modal JavaScript -->
    <script>
        // Stripe Configuration - PRODUCTION LIVE KEY
        const STRIPE_PUBLISHABLE_KEY = 'pk_live_51RHs2aF3QBlDrgxx4L6FasMQjDPEPWh4WL3MYFQQAleDBeFdQxb52gCoGrSdSEuMEE6Ls3Em02xqfxNErg05Dk9100MR9XAlHI';
        const stripe = Stripe(STRIPE_PUBLISHABLE_KEY);
        const elements = stripe.elements();

        // Create card element
        const cardElement = elements.create('card', {
            style: {
                base: {
                    fontSize: '16px',
                    color: '#1f2937',
                    '::placeholder': {
                        color: '#9ca3af'
                    }
                },
                invalid: {
                    color: '#ef4444'
                }
            }
        });

        // State
        let selectedAmount = null;
        let cardMounted = false;

        // Mount card element when modal opens
        function mountCardElement() {
            if (!cardMounted) {
                cardElement.mount('#card-element');
                cardMounted = true;
                
                // Handle card errors
                cardElement.on('change', function(event) {
                    const displayError = document.getElementById('card-errors');
                    if (event.error) {
                        displayError.textContent = event.error.message;
                    } else {
                        displayError.textContent = '';
                    }
                });
            }
        }

        // Open credits modal
        function showCreditsInfo() {
            const modal = document.getElementById('creditsModal');
            modal.classList.add('active');
            
            // Load current balance into modal
            loadModalBalance();
            
            // Mount Stripe card element
            mountCardElement();
            
            // Reset selection
            selectedAmount = null;
            document.querySelectorAll('.package-option').forEach(el => el.classList.remove('selected'));
            document.getElementById('payButton').disabled = true;
            document.getElementById('payButton').textContent = 'Select a package to continue';
            document.getElementById('successMessage').classList.remove('show');
        }

        // Close credits modal
        function closeCreditsModal() {
            const modal = document.getElementById('creditsModal');
            modal.classList.remove('active');
            
            // Reset card element errors
            document.getElementById('card-errors').textContent = '';
        }

        // Load balance data into modal
        async function loadModalBalance() {
            try {
                const token = localStorage.getItem('token');
                const response = await fetch('/api/credits/balance', {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });
                
                if (response.ok) {
                    const result = await response.json();
                    const data = result.data;
                    
                    const freeMinutesRemaining = data.freeMinutesRemaining || 0;
                    const freeMinutesUsed = data.freeMinutesUsed || 0;
                    const paidBalance = parseFloat(data.balance) || 0;
                    const paidMinutes = Math.floor(paidBalance / 0.20);
                    const totalMinutes = freeMinutesRemaining + paidMinutes;
                    
                    document.getElementById('modalBalance').textContent = `${totalMinutes} min`;
                    document.getElementById('modalFreeMinutes').textContent = freeMinutesUsed;
                    document.getElementById('modalPaidMinutes').textContent = paidMinutes;
                }
            } catch (error) {
                console.error('Error loading balance:', error);
            }
        }

        // Select package
        function selectPackage(amount) {
            selectedAmount = amount;
            
            // Update UI
            document.querySelectorAll('.package-option').forEach(el => {
                el.classList.remove('selected');
            });
            document.querySelector(`[data-amount="${amount}"]`).classList.add('selected');
            
            // Enable pay button
            const payButton = document.getElementById('payButton');
            payButton.disabled = false;
            payButton.textContent = `Pay $${amount}`;
        }

        // Process payment
        async function processPayment() {
            if (!selectedAmount) {
                alert('Please select a package');
                return;
            }
            
            const payButton = document.getElementById('payButton');
            const originalText = payButton.textContent;
            
            try {
                // Disable button and show loading
                payButton.disabled = true;
                payButton.innerHTML = '<span class="loading-spinner"></span>Processing...';
                
                // Step 1: Create payment intent
                const token = localStorage.getItem('token');
                const response = await fetch('/api/credits/reload', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify({ amount: selectedAmount })
                });
                
                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.error || 'Failed to create payment intent');
                }
                
                const { clientSecret, transactionId } = await response.json();
                
                // Step 2: Confirm payment with Stripe
                const { error, paymentIntent } = await stripe.confirmCardPayment(clientSecret, {
                    payment_method: {
                        card: cardElement
                    }
                });
                
                if (error) {
                    throw new Error(error.message);
                }
                
                // Step 3: Payment successful
                if (paymentIntent.status === 'succeeded') {
                    // Show success message
                    document.getElementById('successMessage').classList.add('show');
                    
                    // Wait for webhook to process (give it 2 seconds)
                    await new Promise(resolve => setTimeout(resolve, 2000));
                    
                    // Refresh balance
                    await loadCreditsBalance();
                    await loadModalBalance();
                    
                    // Clear card
                    cardElement.clear();
                    
                    // Reset UI after 2 seconds
                    setTimeout(() => {
                        closeCreditsModal();
                    }, 2000);
                }
                
            } catch (error) {
                console.error('Payment error:', error);
                document.getElementById('card-errors').textContent = error.message;
                payButton.disabled = false;
                payButton.textContent = originalText;
            }
        }

        // Close modal when clicking outside
        document.getElementById('creditsModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeCreditsModal();
            }
        });

        // Handle Escape key
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                closeCreditsModal();
            }
        });
    </script>
</body>
</html>
