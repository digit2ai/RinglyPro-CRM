<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RinglyPro CRM - Professional Customer Management</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            --primary-color: #2563eb;
            --secondary-color: #10b981;
            --background-color: #f3f4f6;
            --card-background: #ffffff;
            --text-primary: #111827;
            --text-secondary: #6b7280;
            --border-color: #e5e7eb;
        }

        [data-theme="dark"] {
            --primary-color: #3b82f6;
            --secondary-color: #10b981;
            --background-color: #111827;
            --card-background: #1f2937;
            --text-primary: #f9fafb;
            --text-secondary: #d1d5db;
            --border-color: #374151;
        }

        body {
            background-color: var(--background-color);
            color: var(--text-primary);
            transition: background-color 0.3s ease, color 0.3s ease;
        }

        .card {
            background-color: var(--card-background);
            border-color: var(--border-color);
            transition: all 0.3s ease;
        }

        .collapse-content {
            transition: all 0.3s ease-in-out;
            overflow: hidden;
        }
        .collapsed {
            max-height: 0;
            opacity: 0;
            padding-top: 0;
            padding-bottom: 0;
        }
        .expanded {
            max-height: 1000px;
            opacity: 1;
        }
        .collapse-btn {
            transition: transform 0.3s ease-in-out;
        }
        .collapsed .collapse-btn {
            transform: rotate(-90deg);
        }
        .section-header:hover {
            background-color: var(--background-color);
        }
        .border-3 {
            border-width: 3px;
        }
        
        /* Enhanced animations */
        .fade-in {
            animation: fadeIn 0.5s ease-in;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .slide-up {
            animation: slideUp 0.3s ease-out;
        }
        @keyframes slideUp {
            from { transform: translateY(100%); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }

        .card-hover {
            transition: all 0.3s ease;
        }
        .card-hover:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        }

        /* Toast notifications */
        .toast-container {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1000;
            pointer-events: none;
        }

        .toast {
            background: white;
            border-radius: 8px;
            padding: 16px;
            margin-bottom: 12px;
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
            border-left: 4px solid;
            max-width: 400px;
            pointer-events: all;
            transform: translateX(400px);
            transition: transform 0.3s ease;
        }

        .toast.show {
            transform: translateX(0);
        }

        .toast.success { border-left-color: #10b981; }
        .toast.error { border-left-color: #ef4444; }
        .toast.warning { border-left-color: #f59e0b; }
        .toast.info { border-left-color: #3b82f6; }

        /* Mobile sticky action bar */
        .mobile-action-bar {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            background: var(--card-background);
            border-top: 1px solid var(--border-color);
            padding: 12px;
            z-index: 100;
            display: none;
            box-shadow: 0 -4px 6px -1px rgba(0, 0, 0, 0.1);
        }

        @media (max-width: 768px) {
            .mobile-action-bar {
                display: block;
            }
            body {
                padding-bottom: 80px;
            }
        }

        /* KPI metrics styling */
        .kpi-card {
            background: linear-gradient(135deg, var(--primary-color), #1d4ed8);
            color: white;
        }

        /* Dark mode specific styles */
        [data-theme="dark"] .toast {
            background: var(--card-background);
            color: var(--text-primary);
            border-color: var(--border-color);
        }

        [data-theme="dark"] .mobile-action-bar {
            background: var(--card-background);
            border-color: var(--border-color);
        }

        /* Fix for voice indicator animation */
        .animate-pulse {
            animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
        }
        @keyframes pulse {
            0%, 100% {
                opacity: 1;
            }
            50% {
                opacity: .5;
            }
        }
    </style>
</head>
<body>
    <!-- Toast Container -->
    <div class="toast-container" id="toastContainer"></div>

    <!-- Header -->
    <header class="bg-blue-600 text-white shadow-lg">
        <div class="container mx-auto px-4 py-4">
            <div class="flex items-center justify-between">
                <div class="flex items-center space-x-4">
                    <!-- RinglyPro Logo -->
                    <div class="flex items-center space-x-2">
                        <div class="relative">
                            <img src="https://assets.cdn.filesafe.space/3lSeAHXNU9t09Hhp9oai/media/68a15064d7c434d8cab7644b.png" 
                                 alt="RinglyPro Logo" 
                                 class="w-16 h-16 object-contain bg-white rounded-lg shadow-lg p-2">
                        </div>
                        <div class="text-2xl font-bold">
                            <span class="text-white">Ringly</span><span class="text-blue-200">Pro</span>
                        </div>
                    </div>
                </div>
                <div class="flex items-center space-x-4">
                    <button onclick="exportContacts()" class="bg-green-500 hover:bg-green-600 text-white px-3 py-1 rounded-full text-sm transition duration-200">
                        <i class="fas fa-download mr-1"></i> Export
                    </button>
                    <button onclick="refreshData()" class="bg-blue-500 hover:bg-blue-600 text-white px-3 py-1 rounded-full text-sm transition duration-200">
                        <i class="fas fa-sync-alt mr-1"></i> Refresh
                    </button>
                    <button onclick="toggleAllSections()" class="bg-purple-500 hover:bg-purple-600 text-white px-3 py-1 rounded-full text-sm transition duration-200">
                        <i class="fas fa-expand-arrows-alt mr-1"></i> <span id="toggle-all-text">Expand All</span>
                    </button>
                    <button onclick="toggleDarkMode()" class="bg-gray-700 hover:bg-gray-800 text-white px-3 py-1 rounded-full text-sm transition duration-200">
                        <i id="theme-icon" class="fas fa-moon mr-1"></i> <span id="theme-text">Dark</span>
                    </button>
                </div>
            </div>
        </div>
        
        <!-- Quick Actions Menu Bar -->
        <div class="bg-blue-700 border-t border-blue-500">
            <div class="container mx-auto px-4 py-2">
                <div class="flex items-center justify-between flex-wrap gap-2">
                    <div class="flex items-center space-x-1 flex-wrap">
                        <!-- Contacts Dropdown -->
                        <div class="relative" id="contacts-dropdown">
                            <button onclick="toggleDropdown('contacts')" class="flex items-center px-3 py-2 rounded text-sm hover:bg-blue-600 transition duration-200">
                                <i class="fas fa-users mr-2"></i>Contacts
                                <i class="fas fa-chevron-down ml-1 text-xs"></i>
                            </button>
                            <div id="contacts-menu" class="hidden absolute left-0 mt-1 w-64 bg-white rounded-lg shadow-lg z-50 border card">
                                <div class="py-2">
                                    <button onclick="showQuickCreateContact()" class="w-full text-left px-4 py-2 text-gray-700 hover:bg-gray-100 flex items-center">
                                        <i class="fas fa-user-plus text-green-500 mr-3"></i>Create New Contact
                                    </button>
                                    <button onclick="showQuickSearchContact()" class="w-full text-left px-4 py-2 text-gray-700 hover:bg-gray-100 flex items-center">
                                        <i class="fas fa-search text-blue-500 mr-3"></i>Search Contact
                                    </button>
                                    <button onclick="showQuickUpdateEmail()" class="w-full text-left px-4 py-2 text-gray-700 hover:bg-gray-100 flex items-center">
                                        <i class="fas fa-envelope text-orange-500 mr-3"></i>Update Email
                                    </button>
                                    <button onclick="showQuickUpdatePhone()" class="w-full text-left px-4 py-2 text-gray-700 hover:bg-gray-100 flex items-center">
                                        <i class="fas fa-phone text-purple-500 mr-3"></i>Update Phone
                                    </button>
                                </div>
                            </div>
                        </div>

                        <!-- Appointments Dropdown -->
                        <div class="relative" id="appointments-dropdown">
                            <button onclick="toggleDropdown('appointments')" class="flex items-center px-3 py-2 rounded text-sm hover:bg-blue-600 transition duration-200">
                                <i class="fas fa-calendar mr-2"></i>Appointments
                                <i class="fas fa-chevron-down ml-1 text-xs"></i>
                            </button>
                            <div id="appointments-menu" class="hidden absolute left-0 mt-1 w-64 bg-white rounded-lg shadow-lg z-50 border card">
                                <div class="py-2">
                                    <button onclick="showQuickCreateAppointment()" class="w-full text-left px-4 py-2 text-gray-700 hover:bg-gray-100 flex items-center">
                                        <i class="fas fa-calendar-plus text-green-500 mr-3"></i>Create Appointment
                                    </button>
                                    <button onclick="showTodaysAppointments()" class="w-full text-left px-4 py-2 text-gray-700 hover:bg-gray-100 flex items-center">
                                        <i class="fas fa-clock text-blue-500 mr-3"></i>Today's Appointments
                                    </button>
                                    <button onclick="showQuickUpdateAppointment()" class="w-full text-left px-4 py-2 text-gray-700 hover:bg-gray-100 flex items-center">
                                        <i class="fas fa-edit text-orange-500 mr-3"></i>Update Appointment
                                    </button>
                                </div>
                            </div>
                        </div>

                        <!-- Quick Actions -->
                        <button onclick="showQuickSMS()" class="flex items-center px-3 py-2 rounded text-sm hover:bg-blue-600 transition duration-200">
                            <i class="fas fa-sms mr-2"></i>Quick SMS
                        </button>
                        
                        <button onclick="showQuickEmail()" class="flex items-center px-3 py-2 rounded text-sm hover:bg-blue-600 transition duration-200">
                            <i class="fas fa-envelope mr-2"></i>Quick Email
                        </button>
                    </div>
                    
                    <!-- Voice Command Button -->
                    <button onclick="activateVoiceCommand()" class="flex items-center px-3 py-2 bg-green-600 hover:bg-green-700 rounded text-sm transition duration-200">
                        <i class="fas fa-microphone mr-2"></i>Voice Command
                    </button>
                </div>
            </div>
        </div>
    </header>

    <div class="container mx-auto px-4 py-8">
        <!-- KPI Metrics Bar -->
        <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8 fade-in">
            <div class="kpi-card rounded-lg p-4 text-center">
                <div class="text-2xl font-bold" id="kpi-total-contacts">0</div>
                <div class="text-sm opacity-90">Total Contacts</div>
                <div class="text-xs opacity-75 mt-1">
                    <i class="fas fa-arrow-up mr-1"></i><span>+5.2%</span>
                </div>
            </div>
            <div class="bg-green-500 rounded-lg p-4 text-center text-white">
                <div class="text-2xl font-bold" id="kpi-appointments">0</div>
                <div class="text-sm opacity-90">Appointments</div>
                <div class="text-xs opacity-75 mt-1">
                    <i class="fas fa-arrow-up mr-1"></i><span>+12.1%</span>
                </div>
            </div>
            <div class="bg-purple-500 rounded-lg p-4 text-center text-white">
                <div class="text-2xl font-bold" id="kpi-messages">0</div>
                <div class="text-sm opacity-90">Messages Sent</div>
                <div class="text-xs opacity-75 mt-1">
                    <i class="fas fa-arrow-up mr-1"></i><span>+8.7%</span>
                </div>
            </div>
            <div class="bg-yellow-500 rounded-lg p-4 text-center text-white">
                <div class="text-2xl font-bold">89%</div>
                <div class="text-sm opacity-90">Response Rate</div>
                <div class="text-xs opacity-75 mt-1">
                    <i class="fas fa-arrow-up mr-1"></i><span>+3.1%</span>
                </div>
            </div>
        </div>

        <!-- Quick Action Modals -->
        
        <!-- Quick Create Contact Modal -->
        <div id="quickCreateContactModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
            <div class="card rounded-lg p-6 w-full max-w-md mx-4">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold text-gray-900">Quick Create Contact</h3>
                    <button onclick="closeModal('quickCreateContactModal')" class="text-gray-400 hover:text-gray-600">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <form id="quickCreateForm" class="space-y-4">
                    <div class="grid grid-cols-2 gap-4">
                        <input type="text" id="quickFirstName" placeholder="First Name" required
                               class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                        <input type="text" id="quickLastName" placeholder="Last Name" required
                               class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                    </div>
                    <input type="email" id="quickEmail" placeholder="Email" required
                           class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                    <input type="tel" id="quickPhone" placeholder="Phone" required
                           class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                    <input type="text" id="quickCompany" placeholder="Company (optional)"
                           class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                    <div class="flex space-x-3">
                        <button type="submit" class="flex-1 bg-blue-500 hover:bg-blue-600 text-white px-4 py-3 rounded-lg">
                            <i class="fas fa-plus mr-2"></i>Create Contact
                        </button>
                        <button type="button" onclick="closeModal('quickCreateContactModal')" class="flex-1 bg-gray-300 hover:bg-gray-400 text-gray-700 px-4 py-3 rounded-lg">
                            Cancel
                        </button>
                    </div>
                </form>
                <div id="quickCreateStatus" class="mt-4 p-3 rounded hidden"></div>
            </div>
        </div>

        <!-- Quick Search Contact Modal -->
        <div id="quickSearchContactModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
            <div class="card rounded-lg p-6 w-full max-w-lg mx-4">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold text-gray-900">Search Contact</h3>
                    <button onclick="closeModal('quickSearchContactModal')" class="text-gray-400 hover:text-gray-600">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="space-y-4">
                    <input type="text" id="quickSearchInput" placeholder="Search by name, email, or phone..."
                           class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                    <button onclick="performQuickSearch()" class="w-full bg-blue-500 hover:bg-blue-600 text-white px-4 py-3 rounded-lg">
                        <i class="fas fa-search mr-2"></i>Search
                    </button>
                    <div id="quickSearchResults" class="space-y-2 max-h-64 overflow-y-auto"></div>
                </div>
            </div>
        </div>

        <!-- Quick Update Email Modal -->
        <div id="quickUpdateEmailModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
            <div class="card rounded-lg p-6 w-full max-w-md mx-4">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold text-gray-900">Update Contact Email</h3>
                    <button onclick="closeModal('quickUpdateEmailModal')" class="text-gray-400 hover:text-gray-600">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <form id="quickUpdateEmailForm" class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Select Contact</label>
                        <select id="quickUpdateEmailContactSelect" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500">
                            <option value="">Choose a contact to update...</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Or Enter Contact Name</label>
                        <input type="text" id="quickUpdateEmailName" placeholder="Contact Name" 
                               class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Current Email</label>
                        <input type="email" id="quickUpdateEmailCurrent" placeholder="Current email will appear here" readonly
                               class="w-full p-3 border border-gray-300 rounded-lg bg-gray-50 text-gray-600">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">New Email Address</label>
                        <input type="email" id="quickUpdateEmailValue" placeholder="Enter new email address" required
                               class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500">
                    </div>
                    <div class="flex space-x-3">
                        <button type="submit" class="flex-1 bg-orange-500 hover:bg-orange-600 text-white px-4 py-3 rounded-lg">
                            <i class="fas fa-save mr-2"></i>Update Email
                        </button>
                        <button type="button" onclick="closeModal('quickUpdateEmailModal')" class="flex-1 bg-gray-300 hover:bg-gray-400 text-gray-700 px-4 py-3 rounded-lg">
                            Cancel
                        </button>
                    </div>
                </form>
                <div id="quickUpdateEmailStatus" class="mt-4 p-3 rounded hidden"></div>
            </div>
        </div>

        <!-- Quick Update Phone Modal -->
        <div id="quickUpdatePhoneModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
            <div class="card rounded-lg p-6 w-full max-w-md mx-4">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold text-gray-900">Update Contact Phone</h3>
                    <button onclick="closeModal('quickUpdatePhoneModal')" class="text-gray-400 hover:text-gray-600">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <form id="quickUpdatePhoneForm" class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Select Contact</label>
                        <select id="quickUpdatePhoneContactSelect" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500">
                            <option value="">Choose a contact to update...</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Or Enter Contact Name</label>
                        <input type="text" id="quickUpdatePhoneName" placeholder="Contact Name" 
                               class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Current Phone</label>
                        <input type="tel" id="quickUpdatePhoneCurrent" placeholder="Current phone will appear here" readonly
                               class="w-full p-3 border border-gray-300 rounded-lg bg-gray-50 text-gray-600">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">New Phone Number</label>
                        <input type="tel" id="quickUpdatePhoneValue" placeholder="Enter new phone number" required
                               class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500">
                    </div>
                    <div class="flex space-x-3">
                        <button type="submit" class="flex-1 bg-purple-500 hover:bg-purple-600 text-white px-4 py-3 rounded-lg">
                            <i class="fas fa-save mr-2"></i>Update Phone
                        </button>
                        <button type="button" onclick="closeModal('quickUpdatePhoneModal')" class="flex-1 bg-gray-300 hover:bg-gray-400 text-gray-700 px-4 py-3 rounded-lg">
                            Cancel
                        </button>
                    </div>
                </form>
                <div id="quickUpdatePhoneStatus" class="mt-4 p-3 rounded hidden"></div>
            </div>
        </div>

        <!-- Quick Create Appointment Modal -->
        <div id="quickCreateAppointmentModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
            <div class="card rounded-lg p-6 w-full max-w-md mx-4">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold text-gray-900">Quick Create Appointment</h3>
                    <button onclick="closeModal('quickCreateAppointmentModal')" class="text-gray-400 hover:text-gray-600">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <form id="quickCreateAppointmentForm" class="space-y-4">
                    <input type="text" id="quickAppointmentTitle" placeholder="Appointment Title" required
                           class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Select Contact</label>
                        <select id="quickAppointmentContactSelect" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                            <option value="">Loading contacts...</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Or Enter Contact Name</label>
                        <input type="text" id="quickAppointmentContact" placeholder="Contact Name"
                               class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                    </div>
                    <div class="grid grid-cols-2 gap-4">
                        <input type="date" id="quickAppointmentDate" required
                               class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                        <input type="time" id="quickAppointmentTime" required
                               class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                    </div>
                    <select id="quickAppointmentDuration" required
                            class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                        <option value="">Select Duration</option>
                        <option value="30">30 minutes</option>
                        <option value="60">1 hour</option>
                        <option value="90">1.5 hours</option>
                        <option value="120">2 hours</option>
                    </select>
                    <div class="flex space-x-3">
                        <button type="submit" class="flex-1 bg-green-500 hover:bg-green-600 text-white px-4 py-3 rounded-lg">
                            <i class="fas fa-calendar-plus mr-2"></i>Create Appointment
                        </button>
                        <button type="button" onclick="closeModal('quickCreateAppointmentModal')" class="flex-1 bg-gray-300 hover:bg-gray-400 text-gray-700 px-4 py-3 rounded-lg">
                            Cancel
                        </button>
                    </div>
                </form>
                <div id="quickCreateAppointmentStatus" class="mt-4 p-3 rounded hidden"></div>
            </div>
        </div>

        <!-- Quick SMS Modal -->
        <div id="quickSMSModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
            <div class="card rounded-lg p-6 w-full max-w-md mx-4">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold text-gray-900">Quick SMS</h3>
                    <button onclick="closeModal('quickSMSModal')" class="text-gray-400 hover:text-gray-600">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <form id="quickSMSForm" class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Select Contact</label>
                        <select id="quickSMSContactSelect" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                            <option value="">Loading contacts...</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Or Enter Phone Number</label>
                        <input type="text" id="quickSMSRecipient" placeholder="Contact Name or Phone Number"
                               class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                    </div>
                    <textarea id="quickSMSMessage" placeholder="Message..." rows="4" required
                              class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"></textarea>
                    <div class="flex space-x-3">
                        <button type="submit" class="flex-1 bg-green-500 hover:bg-green-600 text-white px-4 py-3 rounded-lg">
                            <i class="fas fa-paper-plane mr-2"></i>Send SMS
                        </button>
                        <button type="button" onclick="closeModal('quickSMSModal')" class="flex-1 bg-gray-300 hover:bg-gray-400 text-gray-700 px-4 py-3 rounded-lg">
                            Cancel
                        </button>
                    </div>
                </form>
                <div id="quickSMSStatus" class="mt-4 p-3 rounded hidden"></div>
            </div>
        </div>

        <!-- Quick Email Modal -->
        <div id="quickEmailModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
            <div class="card rounded-lg p-6 w-full max-w-md mx-4">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold text-gray-900">Quick Email</h3>
                    <button onclick="closeModal('quickEmailModal')" class="text-gray-400 hover:text-gray-600">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <form id="quickEmailForm" class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Select Contact</label>
                        <select id="quickEmailContactSelect" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                            <option value="">Loading contacts...</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Or Enter Email</label>
                        <input type="text" id="quickEmailRecipient" placeholder="Contact Name or Email"
                               class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                    </div>
                    <input type="text" id="quickEmailSubject" placeholder="Subject" required
                           class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                    <textarea id="quickEmailMessage" placeholder="Message..." rows="4" required
                              class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"></textarea>
                    <div class="flex space-x-3">
                        <button type="submit" class="flex-1 bg-blue-500 hover:bg-blue-600 text-white px-4 py-3 rounded-lg">
                            <i class="fas fa-envelope mr-2"></i>Send Email
                        </button>
                        <button type="button" onclick="closeModal('quickEmailModal')" class="flex-1 bg-gray-300 hover:bg-gray-400 text-gray-700 px-4 py-3 rounded-lg">
                            Cancel
                        </button>
                    </div>
                </form>
                <div id="quickEmailStatus" class="mt-4 p-3 rounded hidden"></div>
            </div>
        </div>

        <!-- Voice Command Modal -->
        <div id="voiceCommandModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
            <div class="card rounded-lg p-6 w-full max-w-lg mx-4">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold text-gray-900">Voice Command</h3>
                    <button onclick="closeModal('voiceCommandModal')" class="text-gray-400 hover:text-gray-600">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="text-center space-y-4">
                    <div id="voiceIndicator" class="w-20 h-20 bg-blue-500 rounded-full flex items-center justify-center text-white text-2xl mx-auto">
                        <i class="fas fa-microphone"></i>
                    </div>
                    <div id="voiceStatus" class="text-gray-600">Click "Start Listening" to begin</div>
                    <div class="space-x-3">
                        <button id="startVoiceBtn" onclick="startVoiceListening()" class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-lg">
                            <i class="fas fa-microphone mr-2"></i>Start Listening
                        </button>
                        <button id="stopVoiceBtn" onclick="stopVoiceListening()" class="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-lg" disabled>
                            <i class="fas fa-stop mr-2"></i>Stop
                        </button>
                    </div>
                    <div id="voiceTranscript" class="bg-gray-100 p-4 rounded-lg min-h-16 text-left"></div>
                    <div id="voiceCommandStatus" class="p-3 rounded hidden"></div>
                </div>
            </div>
        </div>

        <!-- Main Display Cards - Mobile Responsive -->
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6 mb-8">
            <!-- Card 1: All Contacts Display -->
            <div class="card rounded-lg shadow-lg border-l-4 border-blue-500 min-h-[500px] flex flex-col card-hover">
                <div class="p-3 sm:p-4 border-b border-gray-200 bg-blue-50">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center">
                            <div class="p-2 sm:p-3 rounded-full bg-blue-500 text-white">
                                <i class="fas fa-users text-sm sm:text-base"></i>
                            </div>
                            <div class="ml-3">
                                <h3 class="text-sm sm:text-base font-semibold text-gray-800">All Contacts</h3>
                                <p class="text-xs sm:text-sm text-gray-600">Total: <span id="total-contacts" class="font-bold">0</span></p>
                            </div>
                        </div>
                        <button onclick="showQuickCreateContact()" class="bg-blue-500 hover:bg-blue-600 text-white px-2 py-1 rounded text-xs transition duration-200">
                            <i class="fas fa-plus"></i>
                        </button>
                    </div>
                </div>
                <div class="flex-1 overflow-hidden">
                    <div class="p-2 sm:p-3 border-b border-gray-100">
                        <input type="text" id="contacts-search" placeholder="Search contacts..." 
                               class="w-full p-2 text-xs border border-gray-300 rounded focus:ring-2 focus:ring-blue-500"
                               onkeyup="filterContacts(this.value)">
                    </div>
                    <div id="all-contacts-list" class="p-2 sm:p-3 space-y-2 overflow-y-auto max-h-[400px]">
                        <div class="text-center py-8">
                            <i class="fas fa-spinner fa-spin text-gray-400 text-xl"></i>
                            <p class="text-gray-500 mt-2 text-sm">Loading contacts...</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Card 2: Today's Appointments Display -->
            <div class="card rounded-lg shadow-lg border-l-4 border-green-500 min-h-[500px] flex flex-col card-hover">
                <div class="p-3 sm:p-4 border-b border-gray-200 bg-green-50">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center">
                            <div class="p-2 sm:p-3 rounded-full bg-green-500 text-white">
                                <i class="fas fa-calendar-check text-sm sm:text-base"></i>
                            </div>
                            <div class="ml-3">
                                <h3 class="text-sm sm:text-base font-semibold text-gray-800">Today's Appointments</h3>
                                <p class="text-xs sm:text-sm text-gray-600">Count: <span id="appointments-today" class="font-bold">0</span></p>
                            </div>
                        </div>
                        <button onclick="showQuickCreateAppointment()" class="bg-green-500 hover:bg-green-600 text-white px-2 py-1 rounded text-xs transition duration-200">
                            <i class="fas fa-plus"></i>
                        </button>
                    </div>
                    <div class="mt-2">
                        <p class="text-xs text-gray-600" id="today-date-display"></p>
                    </div>
                </div>
                <div class="flex-1 overflow-hidden">
                    <div id="all-appointments-list" class="p-2 sm:p-3 space-y-2 overflow-y-auto max-h-[430px]">
                        <div class="text-center py-8">
                            <i class="fas fa-calendar text-gray-400 text-xl mb-2"></i>
                            <p class="text-gray-500 text-sm">No appointments today</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Card 3: Today's SMS Messages Display -->
            <div class="card rounded-lg shadow-lg border-l-4 border-purple-500 min-h-[500px] flex flex-col card-hover">
                <div class="p-3 sm:p-4 border-b border-gray-200 bg-purple-50">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center">
                            <div class="p-2 sm:p-3 rounded-full bg-purple-500 text-white">
                                <i class="fas fa-sms text-sm sm:text-base"></i>
                            </div>
                            <div class="ml-3">
                                <h3 class="text-sm sm:text-base font-semibold text-gray-800">SMS Today</h3>
                                <p class="text-xs sm:text-sm text-gray-600">Count: <span id="messages-today" class="font-bold">0</span></p>
                            </div>
                        </div>
                        <button onclick="showQuickSMS()" class="bg-purple-500 hover:bg-purple-600 text-white px-2 py-1 rounded text-xs transition duration-200">
                            <i class="fas fa-paper-plane"></i>
                        </button>
                    </div>
                </div>
                <div class="flex-1 overflow-hidden">
                    <div class="p-2 border-b border-gray-100">
                        <div class="flex space-x-1 text-xs">
                            <button onclick="filterMessages('all')" class="px-2 py-1 bg-gray-200 text-gray-700 rounded hover:bg-gray-300 transition" id="filter-all-messages">All</button>
                            <button onclick="filterMessages('sent')" class="px-2 py-1 bg-gray-100 text-gray-600 rounded hover:bg-gray-200 transition" id="filter-sent-messages">Sent</button>
                            <button onclick="filterMessages('received')" class="px-2 py-1 bg-gray-100 text-gray-600 rounded hover:bg-gray-200 transition" id="filter-received-messages">Received</button>
                        </div>
                    </div>
                    <div id="all-messages-list" class="p-2 sm:p-3 space-y-2 overflow-y-auto max-h-[400px]">
                        <div class="text-center py-8">
                            <i class="fas fa-sms text-gray-400 text-xl mb-2"></i>
                            <p class="text-gray-500 text-sm">No SMS messages today</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Card 4: Today's Calls Display -->
            <div class="card rounded-lg shadow-lg border-l-4 border-yellow-500 min-h-[500px] flex flex-col card-hover">
                <div class="p-3 sm:p-4 border-b border-gray-200 bg-yellow-50">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center">
                            <div class="p-2 sm:p-3 rounded-full bg-yellow-500 text-white">
                                <i class="fas fa-phone text-sm sm:text-base"></i>
                            </div>
                            <div class="ml-3">
                                <h3 class="text-sm sm:text-base font-semibold text-gray-800">Calls Today</h3>
                                <p class="text-xs sm:text-sm text-gray-600">Count: <span id="calls-today" class="font-bold">0</span></p>
                            </div>
                        </div>
                        <button onclick="initiateCall()" class="bg-yellow-500 hover:bg-yellow-600 text-white px-2 py-1 rounded text-xs transition duration-200">
                            <i class="fas fa-phone"></i>
                        </button>
                    </div>
                </div>
                <div class="flex-1 overflow-hidden">
                    <div class="p-2 border-b border-gray-100">
                        <div class="flex space-x-1 text-xs">
                            <button onclick="filterCalls('all')" class="px-2 py-1 bg-gray-200 text-gray-700 rounded hover:bg-gray-300 transition" id="filter-all-calls">All</button>
                            <button onclick="filterCalls('incoming')" class="px-2 py-1 bg-gray-100 text-gray-600 rounded hover:bg-gray-200 transition" id="filter-incoming-calls">Incoming</button>
                            <button onclick="filterCalls('outgoing')" class="px-2 py-1 bg-gray-100 text-gray-600 rounded hover:bg-gray-200 transition" id="filter-outgoing-calls">Outgoing</button>
                            <button onclick="filterCalls('missed')" class="px-2 py-1 bg-gray-100 text-gray-600 rounded hover:bg-gray-200 transition" id="filter-missed-calls">Missed</button>
                        </div>
                    </div>
                    <div id="all-calls-list" class="p-2 sm:p-3 space-y-2 overflow-y-auto max-h-[400px]">
                        <div class="text-center py-8">
                            <i class="fas fa-phone text-gray-400 text-xl mb-2"></i>
                            <p class="text-gray-500 text-sm">No calls today</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Tools Section Header -->
        <div class="mb-6">
            <h2 class="text-2xl font-bold text-gray-800 mb-2">
                <i class="fas fa-tools mr-2 text-gray-600"></i>RinglyPro CRM Tools & Features
            </h2>
            <p class="text-gray-600">Click on any tool below to expand and use its features</p>
        </div>

        <!-- Main Content -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <!-- Add New Contact Form -->
            <div class="card rounded-lg shadow-md border-l-4 border-blue-500 card-hover">
                <div class="section-header p-4 border-b border-gray-200 flex items-center justify-between cursor-pointer transition duration-200" onclick="toggleSection('add-contact')">
                    <div class="flex items-center space-x-3">
                        <div class="p-2 bg-blue-100 rounded-lg">
                            <i class="fas fa-user-plus text-blue-600 text-lg"></i>
                        </div>
                        <div>
                            <h3 class="text-lg font-semibold text-gray-800">Add New Contact</h3>
                            <p class="text-sm text-gray-500">Create and save customer contacts to database</p>
                        </div>
                    </div>
                    <button class="collapse-btn text-gray-400 hover:text-gray-600 transition duration-200">
                        <i class="fas fa-chevron-down text-lg"></i>
                    </button>
                </div>
                <div id="add-contact-content" class="collapse-content collapsed p-6">
                    <form id="contact-form" class="space-y-4">
                        <div class="grid grid-cols-2 gap-4">
                            <input type="text" id="firstName" placeholder="First Name" required
                                   class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                            <input type="text" id="lastName" placeholder="Last Name" required
                                   class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                        </div>
                        <input type="tel" id="phone" placeholder="+1234567890" required
                               class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                        <input type="email" id="email" placeholder="email@example.com" required
                               class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                        <textarea id="notes" placeholder="Notes (optional)" rows="3"
                                  class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"></textarea>
                        <button type="submit" id="add-contact-btn" class="w-full bg-blue-500 hover:bg-blue-600 text-white px-4 py-3 rounded-lg transition duration-200">
                            <i class="fas fa-plus mr-2"></i>Add Contact to Database
                        </button>
                    </form>
                    <div id="contact-status" class="mt-4 p-4 rounded-lg hidden"></div>
                </div>
            </div>

            <!-- Contact Search -->
            <div class="card rounded-lg shadow-md border-l-4 border-purple-500 card-hover">
                <div class="section-header p-4 border-b border-gray-200 flex items-center justify-between cursor-pointer transition duration-200" onclick="toggleSection('search-contacts')">
                    <div class="flex items-center space-x-3">
                        <div class="p-2 bg-purple-100 rounded-lg">
                            <i class="fas fa-search text-purple-600 text-lg"></i>
                        </div>
                        <div>
                            <h3 class="text-lg font-semibold text-gray-800">Search Contacts</h3>
                            <p class="text-sm text-gray-500">Find contacts by name, phone, or email address</p>
                        </div>
                    </div>
                    <button class="collapse-btn text-gray-400 hover:text-gray-600 transition duration-200">
                        <i class="fas fa-chevron-down text-lg"></i>
                    </button>
                </div>
                <div id="search-contacts-content" class="collapse-content collapsed p-6">
                    <div class="space-y-4">
                        <input type="text" id="search-input" placeholder="Search by name, phone, or email..." 
                               class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                        <button onclick="searchContacts()" class="w-full bg-purple-500 hover:bg-purple-600 text-white px-4 py-3 rounded-lg transition duration-200">
                            <i class="fas fa-search mr-2"></i>Search Database
                        </button>
                    </div>
                    <div id="search-results" class="mt-4 space-y-2 hidden">
                        <h3 class="font-semibold text-gray-700">Search Results:</h3>
                        <div id="search-contacts-list" class="space-y-2"></div>
                    </div>
                </div>
            </div>

            <!-- Appointments Today -->
            <div class="card rounded-lg shadow-md border-l-4 border-green-500 card-hover">
                <div class="section-header p-4 border-b border-gray-200 flex items-center justify-between cursor-pointer transition duration-200" onclick="toggleSection('appointments-today')">
                    <div class="flex items-center space-x-3">
                        <div class="p-2 bg-green-100 rounded-lg">
                            <i class="fas fa-calendar-alt text-green-600 text-lg"></i>
                        </div>
                        <div>
                            <h3 class="text-lg font-semibold text-gray-800">Today's Appointments</h3>
                            <p class="text-sm text-gray-500">View and manage appointments scheduled for today</p>
                        </div>
                    </div>
                    <button class="collapse-btn text-gray-400 hover:text-gray-600 transition duration-200">
                        <i class="fas fa-chevron-down text-lg"></i>
                    </button>
                </div>
                <div id="appointments-today-content" class="collapse-content collapsed p-6">
                    <!-- Quick Appointment Form -->
                    <div class="mb-6 p-4 bg-green-50 rounded-lg border border-green-200">
                        <h4 class="font-semibold text-green-800 mb-3">
                            <i class="fas fa-plus-circle mr-2"></i>Quick Appointment Booking
                        </h4>
                        <form id="appointment-form" class="space-y-3">
                            <div class="grid grid-cols-2 gap-3">
                                <input type="text" id="apt-contact-name" placeholder="Contact Name" required
                                       class="w-full p-2 border border-green-300 rounded focus:ring-2 focus:ring-green-500">
                                <input type="tel" id="apt-contact-phone" placeholder="+1234567890" required
                                       class="w-full p-2 border border-green-300 rounded focus:ring-2 focus:ring-green-500">
                            </div>
                            <div class="grid grid-cols-2 gap-3">
                                <input type="time" id="apt-time" required
                                       class="w-full p-2 border border-green-300 rounded focus:ring-2 focus:ring-green-500">
                                <select id="apt-duration" required
                                        class="w-full p-2 border border-green-300 rounded focus:ring-2 focus:ring-green-500">
                                    <option value="">Duration</option>
                                    <option value="30">30 minutes</option>
                                    <option value="60">1 hour</option>
                                    <option value="90">1.5 hours</option>
                                    <option value="120">2 hours</option>
                                </select>
                            </div>
                            <input type="text" id="apt-purpose" placeholder="Appointment purpose" required
                                   class="w-full p-2 border border-green-300 rounded focus:ring-2 focus:ring-green-500">
                            <button type="submit" id="book-appointment-btn" class="w-full bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded transition duration-200">
                                <i class="fas fa-calendar-plus mr-2"></i>Book Appointment
                            </button>
                        </form>
                        <div id="appointment-status" class="mt-3 p-3 rounded hidden"></div>
                    </div>

                    <!-- Today's Appointments List -->
                    <div>
                        <div class="flex items-center justify-between mb-4">
                            <h4 class="font-semibold text-gray-800">
                                <i class="fas fa-clock mr-2"></i>Scheduled for Today
                            </h4>
                            <span class="text-sm text-gray-500" id="today-date"></span>
                        </div>
                        <div id="appointments-list" class="space-y-3">
                            <div class="text-center py-6 text-gray-500">
                                <i class="fas fa-calendar text-2xl mb-2 opacity-50"></i>
                                <p>No appointments scheduled for today</p>
                                <p class="text-sm">Use the form above to book a new appointment</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Send Test SMS -->
            <div class="card rounded-lg shadow-md border-l-4 border-orange-500 card-hover">
                <div class="section-header p-4 border-b border-gray-200 flex items-center justify-between cursor-pointer transition duration-200" onclick="toggleSection('send-sms')">
                    <div class="flex items-center space-x-3">
                        <div class="p-2 bg-orange-100 rounded-lg">
                            <i class="fas fa-paper-plane text-orange-600 text-lg"></i>
                        </div>
                        <div>
                            <h3 class="text-lg font-semibold text-gray-800">Send Test SMS</h3>
                            <p class="text-sm text-gray-500">Send SMS messages via Twilio integration</p>
                        </div>
                    </div>
                    <button class="collapse-btn text-gray-400 hover:text-gray-600 transition duration-200">
                        <i class="fas fa-chevron-down text-lg"></i>
                    </button>
                </div>
                <div id="send-sms-content" class="collapse-content collapsed p-6">
                    <div class="space-y-4">
                        <input type="tel" id="test-phone" placeholder="+1234567890" 
                               class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent">
                        <textarea id="test-message" placeholder="Enter your test message..." 
                                  class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent h-24"></textarea>
                        <button id="send-sms" class="w-full bg-orange-500 hover:bg-orange-600 text-white px-4 py-3 rounded-lg transition duration-200">
                            <i class="fas fa-paper-plane mr-2"></i>Send SMS via Twilio
                        </button>
                    </div>
                    <div id="sms-status" class="mt-4 p-4 rounded-lg hidden"></div>
                </div>
            </div>
        </div>

        <!-- Mobile Sticky Action Bar -->
        <div class="mobile-action-bar">
            <div class="flex justify-around items-center">
                <button onclick="showQuickCreateContact()" class="flex flex-col items-center p-2 text-blue-500">
                    <i class="fas fa-user-plus text-lg"></i>
                    <span class="text-xs mt-1">Contact</span>
                </button>
                <button onclick="showQuickSMS()" class="flex flex-col items-center p-2 text-purple-500">
                    <i class="fas fa-sms text-lg"></i>
                    <span class="text-xs mt-1">SMS</span>
                </button>
                <button onclick="showQuickCreateAppointment()" class="flex flex-col items-center p-2 text-green-500">
                    <i class="fas fa-calendar-plus text-lg"></i>
                    <span class="text-xs mt-1">Appointment</span>
                </button>
                <button onclick="activateVoiceCommand()" class="flex flex-col items-center p-2 text-orange-500">
                    <i class="fas fa-microphone text-lg"></i>
                    <span class="text-xs mt-1">Voice</span>
                </button>
            </div>
        </div>

        <!-- Large Logo at Bottom -->
        <div class="mt-16 mb-8 text-center">
            <div class="flex flex-col items-center space-y-4">
                <img src="https://assets.cdn.filesafe.space/3lSeAHXNU9t09Hhp9oai/media/68a15064d7c434d8cab7644b.png" 
                     alt="RinglyPro Logo" 
                     class="w-32 h-32 sm:w-40 sm:h-40 md:w-48 md:h-48 object-contain bg-white rounded-2xl shadow-2xl p-4">
                <div class="text-center">
                    <div class="text-3xl sm:text-4xl md:text-5xl font-bold text-gray-800 mb-2">
                        <span class="text-blue-600">Ringly</span><span class="text-blue-400">Pro</span>
                    </div>
                    <p class="text-xl sm:text-2xl font-medium text-gray-600">Customer Relationship Management</p>
                    <p class="text-sm sm:text-base text-gray-500 mt-2">Professional CRM Solution for Modern Businesses</p>
                </div>
            </div>
        </div>
    </div>

    <script>
        const apiUrl = window.location.origin; // For production use

        // Global state
        let contacts = [];
        let totalContacts = 0;
        let appointments = [];
        let todaysMessages = [];
        let todaysCalls = [];
        let filteredContacts = [];
        let messageFilter = 'all';
        let callFilter = 'all';

        // Dark Mode Management
        function initDarkMode() {
            const savedTheme = localStorage.getItem('theme') || 'light';
            document.documentElement.setAttribute('data-theme', savedTheme);
            updateThemeUI(savedTheme);
        }

        function toggleDarkMode() {
            const currentTheme = document.documentElement.getAttribute('data-theme');
            const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
            
            document.documentElement.setAttribute('data-theme', newTheme);
            localStorage.setItem('theme', newTheme);
            updateThemeUI(newTheme);
            
            showToast(
                `Switched to ${newTheme} mode`, 
                'info', 
                `<i class="fas fa-${newTheme === 'dark' ? 'moon' : 'sun'}"></i>`
            );
        }

        function updateThemeUI(theme) {
            const themeIcon = document.getElementById('theme-icon');
            const themeText = document.getElementById('theme-text');
            
            if (theme === 'dark') {
                themeIcon.className = 'fas fa-sun mr-1';
                themeText.textContent = 'Light';
            } else {
                themeIcon.className = 'fas fa-moon mr-1';
                themeText.textContent = 'Dark';
            }
        }

        // Toast Notification System
        function showToast(message, type = 'info', icon = '') {
            const container = document.getElementById('toastContainer');
            const toast = document.createElement('div');
            
            toast.className = `toast ${type}`;
            toast.innerHTML = `
                <div class="flex items-center">
                    ${icon ? `<span class="mr-2">${icon}</span>` : ''}
                    <span class="flex-1">${message}</span>
                    <button onclick="this.parentElement.parentElement.remove()" class="ml-2 text-gray-400 hover:text-gray-600">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            `;
            
            container.appendChild(toast);
            
            // Trigger animation
            setTimeout(() => toast.classList.add('show'), 100);
            
            // Auto remove after 5 seconds
            setTimeout(() => {
                toast.classList.remove('show');
                setTimeout(() => toast.remove(), 300);
            }, 5000);
        }

        // Export Functionality
        function exportContacts() {
            if (contacts.length === 0) {
                showToast('No contacts to export', 'warning', '<i class="fas fa-exclamation-triangle"></i>');
                return;
            }

            const csvContent = convertToCSV(contacts);
            const blob = new Blob([csvContent], { type: 'text/csv' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `contacts-${new Date().toISOString().split('T')[0]}.csv`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);
            
            showToast(`Exported ${contacts.length} contacts`, 'success', '<i class="fas fa-download"></i>');
        }

        function convertToCSV(data) {
            const headers = ['firstName', 'lastName', 'email', 'phone', 'company', 'notes'];
            const csvRows = [headers.join(',')];
            
            data.forEach(contact => {
                const row = headers.map(header => {
                    const value = contact[header] || '';
                    return `"${value.toString().replace(/"/g, '""')}"`;
                });
                csvRows.push(row.join(','));
            });
            
            return csvRows.join('\n');
        }

        // Update All Contacts Display
        function updateAllContactsDisplay() {
            const listElement = document.getElementById('all-contacts-list');
            if (!listElement) return;
            
            const displayContacts = filteredContacts.length > 0 ? filteredContacts : contacts;
            
            if (displayContacts.length === 0) {
                listElement.innerHTML = `
                    <div class="text-center py-8">
                        <i class="fas fa-users text-gray-400 text-xl mb-2"></i>
                        <p class="text-gray-500 text-sm">No contacts found</p>
                        <button onclick="showQuickCreateContact()" class="mt-2 bg-blue-500 text-white px-3 py-2 rounded text-sm">
                            <i class="fas fa-plus mr-1"></i> Add Contact
                        </button>
                    </div>
                `;
                return;
            }
            
            listElement.innerHTML = displayContacts.map(contact => `
                <div class="border border-gray-200 rounded-lg p-2 hover:bg-gray-50 transition duration-200">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center space-x-2">
                            <div class="w-6 h-6 sm:w-8 sm:h-8 bg-blue-500 rounded-full flex items-center justify-center text-white text-xs font-semibold">
                                ${contact.firstName ? contact.firstName.charAt(0) : ''}${contact.lastName ? contact.lastName.charAt(0) : ''}
                            </div>
                            <div class="flex-1 min-w-0">
                                <h4 class="font-semibold text-xs sm:text-sm truncate">${contact.fullName || contact.firstName + ' ' + contact.lastName}</h4>
                                <p class="text-xs text-gray-600 truncate">${contact.phone || ''}</p>
                                <p class="text-xs text-gray-500 truncate">${contact.email || ''}</p>
                            </div>
                        </div>
                        <div class="flex space-x-1">
                            <button onclick="callContact('${contact.phone}')" class="bg-blue-500 text-white px-1.5 py-1 rounded text-xs hover:bg-blue-600" title="Call">
                                <i class="fas fa-phone"></i>
                            </button>
                            <button onclick="textContact('${contact.phone}')" class="bg-green-500 text-white px-1.5 py-1 rounded text-xs hover:bg-green-600" title="Text">
                                <i class="fas fa-sms"></i>
                            </button>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        // Filter contacts by search query
        function filterContacts(query) {
            if (!query.trim()) {
                filteredContacts = [];
            } else {
                const searchTerm = query.toLowerCase();
                filteredContacts = contacts.filter(contact => 
                    (contact.fullName || '').toLowerCase().includes(searchTerm) ||
                    (contact.firstName || '').toLowerCase().includes(searchTerm) ||
                    (contact.lastName || '').toLowerCase().includes(searchTerm) ||
                    (contact.phone || '').toLowerCase().includes(searchTerm) ||
                    (contact.email || '').toLowerCase().includes(searchTerm)
                );
            }
            updateAllContactsDisplay();
        }
        
        // Update All Appointments Display
        function updateAllAppointmentsDisplay() {
            const listElement = document.getElementById('all-appointments-list');
            if (!listElement) return;
            
            if (appointments.length === 0) {
                listElement.innerHTML = `
                    <div class="text-center py-8">
                        <i class="fas fa-calendar text-gray-400 text-xl mb-2"></i>
                        <p class="text-gray-500 text-sm">No appointments today</p>
                    </div>
                `;
                return;
            }
            
            listElement.innerHTML = appointments.map(apt => `
                <div class="border border-gray-200 rounded-lg p-2 hover:bg-gray-50 transition duration-200">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center space-x-2">
                            <div class="text-center">
                                <div class="text-xs sm:text-sm font-bold text-green-600">${apt.time}</div>
                                <div class="text-xs text-gray-500">${apt.duration}min</div>
                            </div>
                            <div class="flex-1 min-w-0">
                                <h4 class="font-semibold text-xs sm:text-sm truncate">${apt.contact}</h4>
                                <p class="text-xs text-gray-600 truncate">${apt.purpose}</p>
                                <span class="inline-block px-1.5 py-0.5 rounded-full text-xs ${apt.status === 'confirmed' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'}">
                                    ${apt.status}
                                </span>
                            </div>
                        </div>
                        <div class="flex space-x-1">
                            <button onclick="callContact('${apt.phone}')" class="bg-green-500 text-white px-1.5 py-1 rounded text-xs hover:bg-green-600" title="Call">
                                <i class="fas fa-phone"></i>
                            </button>
                            <button onclick="textContact('${apt.phone}')" class="bg-blue-500 text-white px-1.5 py-1 rounded text-xs hover:bg-blue-600" title="Text">
                                <i class="fas fa-sms"></i>
                            </button>
                        </div>
                    </div>
                </div>
            `).join('');
        }
        
        // Update All Messages Display
        function updateAllMessagesDisplay() {
            const listElement = document.getElementById('all-messages-list');
            if (!listElement) return;
            
            let displayMessages = todaysMessages;
            if (messageFilter !== 'all') {
                displayMessages = todaysMessages.filter(msg => msg.direction === messageFilter || 
                    (messageFilter === 'sent' && msg.direction === 'outgoing') ||
                    (messageFilter === 'received' && msg.direction === 'incoming'));
            }
            
            if (displayMessages.length === 0) {
                listElement.innerHTML = `
                    <div class="text-center py-8">
                        <i class="fas fa-sms text-gray-400 text-xl mb-2"></i>
                        <p class="text-gray-500 text-sm">No SMS messages today</p>
                    </div>
                `;
                return;
            }
            
            listElement.innerHTML = displayMessages.map(msg => `
                <div class="border border-gray-200 rounded-lg p-2 hover:bg-gray-50 transition duration-200">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center space-x-2">
                            <div class="w-6 h-6 ${msg.direction === 'incoming' ? 'bg-purple-500' : 'bg-blue-500'} rounded-full flex items-center justify-center text-white text-xs">
                                <i class="fas ${msg.direction === 'incoming' ? 'fa-arrow-down' : 'fa-arrow-up'}"></i>
                            </div>
                            <div class="flex-1 min-w-0">
                                <h4 class="font-semibold text-xs sm:text-sm truncate">${msg.contact}</h4>
                                <p class="text-xs text-gray-600">${msg.time} • ${msg.phone}</p>
                                <p class="text-xs text-gray-700 mt-1 truncate">"${msg.message}"</p>
                            </div>
                        </div>
                        <button onclick="textContact('${msg.phone}')" class="bg-purple-500 text-white px-1.5 py-1 rounded text-xs hover:bg-purple-600" title="Reply">
                            <i class="fas fa-reply"></i>
                        </button>
                    </div>
                </div>
            `).join('');
        }

        // Filter messages
        function filterMessages(filter) {
            messageFilter = filter;
            
            // Update filter buttons
            document.querySelectorAll('[id^="filter-"][id$="-messages"]').forEach(btn => {
                btn.className = 'px-2 py-1 bg-gray-100 text-gray-600 rounded hover:bg-gray-200 transition';
            });
            document.getElementById(`filter-${filter}-messages`).className = 'px-2 py-1 bg-gray-200 text-gray-700 rounded hover:bg-gray-300 transition';
            
            updateAllMessagesDisplay();
        }
        
        // Update All Calls Display
        function updateAllCallsDisplay() {
            const listElement = document.getElementById('all-calls-list');
            if (!listElement) return;
            
            let displayCalls = todaysCalls;
            if (callFilter !== 'all') {
                displayCalls = todaysCalls.filter(call => 
                    call.direction === callFilter || call.status === callFilter);
            }
            
            if (displayCalls.length === 0) {
                listElement.innerHTML = `
                    <div class="text-center py-8">
                        <i class="fas fa-phone text-gray-400 text-xl mb-2"></i>
                        <p class="text-gray-500 text-sm">No calls today</p>
                    </div>
                `;
                return;
            }
            
            listElement.innerHTML = displayCalls.map(call => `
                <div class="border border-gray-200 rounded-lg p-2 hover:bg-gray-50 transition duration-200">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center space-x-2">
                            <div class="w-6 h-6 ${call.status === 'missed' ? 'bg-red-500' : call.direction === 'incoming' ? 'bg-green-500' : 'bg-yellow-500'} rounded-full flex items-center justify-center text-white text-xs">
                                <i class="fas ${call.status === 'missed' ? 'fa-phone-slash' : call.direction === 'incoming' ? 'fa-phone-volume' : 'fa-phone'}"></i>
                            </div>
                            <div class="flex-1 min-w-0">
                                <h4 class="font-semibold text-xs sm:text-sm truncate">${call.contact}</h4>
                                <p class="text-xs text-gray-600 truncate">${call.time} • ${call.phone}</p>
                                <p class="text-xs text-gray-500">Duration: ${call.duration}</p>
                                <span class="inline-block px-1.5 py-0.5 rounded-full text-xs ${call.status === 'missed' ? 'bg-red-100 text-red-800' : call.direction === 'incoming' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'}">
                                    ${call.direction} • ${call.status}
                                </span>
                            </div>
                        </div>
                        <div class="flex space-x-1">
                            <button onclick="callContact('${call.phone}')" class="bg-green-500 text-white px-1.5 py-1 rounded text-xs hover:bg-green-600" title="Call back">
                                <i class="fas fa-phone"></i>
                            </button>
                            <button onclick="textContact('${call.phone}')" class="bg-blue-500 text-white px-1.5 py-1 rounded text-xs hover:bg-blue-600" title="Text">
                                <i class="fas fa-sms"></i>
                            </button>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        // Filter calls
        function filterCalls(filter) {
            callFilter = filter;
            
            // Update filter buttons
            document.querySelectorAll('[id^="filter-"][id$="-calls"]').forEach(btn => {
                btn.className = 'px-2 py-1 bg-gray-100 text-gray-600 rounded hover:bg-gray-200 transition';
            });
            document.getElementById(`filter-${filter}-calls`).className = 'px-2 py-1 bg-gray-200 text-gray-700 rounded hover:bg-gray-300 transition';
            
            updateAllCallsDisplay();
        }

        // Initiate a call (placeholder function)
        function initiateCall() {
            const phoneNumber = prompt('Enter phone number to call:');
            if (phoneNumber) {
                callContact(phoneNumber);
            }
        }

        // Collapsible section management - ALL COLLAPSED BY DEFAULT
// ==================== COMPLETE FIX FOR ALL RINGLYPRO CRM ERRORS ====================

// 1. FIX: Update the sectionStates object to only include sections that actually exist
const sectionStates = {
    'add-contact': false,
    'search-contacts': false, 
    'appointments-today': false,
    'send-sms': false
    // Remove any reference to 'twilio-test' or other non-existent sections
};

// 2. FIX: Add all missing function definitions 
function handleUpdateEmailContactSelection() {
    const select = document.getElementById('quickUpdateEmailContactSelect');
    const nameInput = document.getElementById('quickUpdateEmailName');
    const currentEmailInput = document.getElementById('quickUpdateEmailCurrent');
    
    if (!select || !nameInput || !currentEmailInput) return;
    
    select.addEventListener('change', function() {
        const selectedValue = this.value;
        
        if (selectedValue === 'manual') {
            nameInput.value = '';
            currentEmailInput.value = '';
            nameInput.focus();
            nameInput.placeholder = 'Enter contact name';
            currentEmailInput.placeholder = 'Current email will appear here';
        } else if (selectedValue) {
            try {
                const contactData = JSON.parse(selectedValue);
                nameInput.value = contactData.name;
                currentEmailInput.value = contactData.email || 'No email on file';
                nameInput.placeholder = `Selected: ${contactData.name}`;
                currentEmailInput.placeholder = contactData.email || 'No current email';
            } catch (e) {
                console.error('Error parsing contact data:', e);
                nameInput.value = '';
                currentEmailInput.value = '';
            }
        } else {
            nameInput.value = '';
            currentEmailInput.value = '';
            nameInput.placeholder = 'Contact Name';
            currentEmailInput.placeholder = 'Current email will appear here';
        }
    });
}

function handleUpdatePhoneContactSelection() {
    const select = document.getElementById('quickUpdatePhoneContactSelect');
    const nameInput = document.getElementById('quickUpdatePhoneName');
    const currentPhoneInput = document.getElementById('quickUpdatePhoneCurrent');
    
    if (!select || !nameInput || !currentPhoneInput) return;
    
    select.addEventListener('change', function() {
        const selectedValue = this.value;
        
        if (selectedValue === 'manual') {
            nameInput.value = '';
            currentPhoneInput.value = '';
            nameInput.focus();
            nameInput.placeholder = 'Enter contact name';
            currentPhoneInput.placeholder = 'Current phone will appear here';
        } else if (selectedValue) {
            try {
                const contactData = JSON.parse(selectedValue);
                nameInput.value = contactData.name;
                currentPhoneInput.value = contactData.phone || 'No phone on file';
                nameInput.placeholder = `Selected: ${contactData.name}`;
                currentPhoneInput.placeholder = contactData.phone || 'No current phone';
            } catch (e) {
                console.error('Error parsing contact data:', e);
                nameInput.value = '';
                currentPhoneInput.value = '';
            }
        } else {
            nameInput.value = '';
            currentPhoneInput.value = '';
            nameInput.placeholder = 'Contact Name';
            currentPhoneInput.placeholder = 'Current phone will appear here';
        }
    });
}

// 3. FIX: Debouncer system for preventing duplicate submissions
function createDebouncer(delay = 1000) {
    let timeoutId;
    let isProcessing = false;
    
    return function(fn) {
        if (isProcessing) {
            console.warn('Request already in progress, ignoring duplicate');
            return Promise.resolve();
        }
        
        clearTimeout(timeoutId);
        isProcessing = true;
        
        return new Promise((resolve, reject) => {
            timeoutId = setTimeout(async () => {
                try {
                    const result = await fn();
                    resolve(result);
                } catch (error) {
                    reject(error);
                } finally {
                    isProcessing = false;
                }
            }, 100);
        });
    };
}

// Create debounced instances
const debouncedContactCreate = createDebouncer(2000);
const debouncedContactUpdate = createDebouncer(2000);
const debouncedSMSSend = createDebouncer(3000);
const debouncedEmailSend = createDebouncer(3000);
const debouncedAppointmentCreate = createDebouncer(2000);

// 4. FIX: Enhanced toast system with duplicate prevention
let activeToasts = new Set();

function showToast(message, type = 'info', icon = '', duration = 5000) {
    // Create unique identifier for this toast
    const toastId = `${type}-${message.replace(/[^a-zA-Z0-9]/g, '')}`;
    
    // Prevent duplicate toasts
    if (activeToasts.has(toastId)) {
        console.log('Duplicate toast prevented:', message);
        return;
    }
    
    activeToasts.add(toastId);
    
    const container = document.getElementById('toastContainer');
    if (!container) {
        console.error('Toast container not found');
        return;
    }
    
    const toast = document.createElement('div');
    
    toast.className = `toast ${type}`;
    toast.setAttribute('data-toast-id', toastId);
    toast.innerHTML = `
        <div class="flex items-center">
            ${icon ? `<span class="mr-2">${icon}</span>` : ''}
            <span class="flex-1">${message}</span>
            <button onclick="removeToast(this)" class="ml-2 text-gray-400 hover:text-gray-600">
                <i class="fas fa-times"></i>
            </button>
        </div>
    `;
    
    container.appendChild(toast);
    
    // Trigger animation
    setTimeout(() => toast.classList.add('show'), 100);
    
    // Auto remove
    setTimeout(() => {
        if (toast.parentNode) {
            removeToast(toast.querySelector('button'));
        }
    }, duration);
}

function removeToast(button) {
    if (!button) return;
    
    const toast = button.closest('.toast');
    if (!toast) return;
    
    const toastId = toast.getAttribute('data-toast-id');
    
    toast.classList.remove('show');
    setTimeout(() => {
        if (toast.parentNode) {
            toast.remove();
            if (toastId) {
                activeToasts.delete(toastId);
            }
        }
    }, 300);
}

// 5. FIX: Improved loadSectionStates with proper error handling
function loadSectionStates() {
    try {
        const saved = localStorage.getItem('crm-section-states');
        if (saved) {
            const savedStates = JSON.parse(saved);
            // Only apply saved states for sections that actually exist
            Object.keys(sectionStates).forEach(sectionId => {
                if (savedStates.hasOwnProperty(sectionId)) {
                    sectionStates[sectionId] = savedStates[sectionId];
                }
            });
        }
        
        // Apply saved states with error checking - Default is COLLAPSED
        Object.keys(sectionStates).forEach(sectionId => {
            const content = document.getElementById(`${sectionId}-content`);
            
            // Check if element exists before proceeding
            if (!content) {
                console.warn(`Section content not found: ${sectionId}-content - skipping`);
                return;
            }
            
            const header = content.parentElement?.querySelector('.section-header');
            
            if (!header) {
                console.warn(`Section header not found for: ${sectionId} - skipping`);
                return;
            }
            
            // Default behavior: COLLAPSED
            if (sectionStates[sectionId]) {
                content.classList.add('expanded');
                content.classList.remove('collapsed');
                header.classList.remove('collapsed');
            } else {
                content.classList.add('collapsed');
                content.classList.remove('expanded');
                header.classList.add('collapsed');
            }
        });
        
        // Update toggle all button text - Default to "Expand All"
        const toggleAllText = document.getElementById('toggle-all-text');
        if (toggleAllText) {
            const allExpanded = Object.values(sectionStates).every(state => state);
            toggleAllText.textContent = allExpanded ? 'Collapse All' : 'Expand All';
        }
    } catch (error) {
        console.error('Error loading section states:', error);
        // Reset to default states if there's an error - ALL COLLAPSED
        Object.keys(sectionStates).forEach(key => {
            sectionStates[key] = false;
        });
        // Ensure button shows "Expand All"
        const toggleAllText = document.getElementById('toggle-all-text');
        if (toggleAllText) {
            toggleAllText.textContent = 'Expand All';
        }
    }
}

// 6. FIX: Safe form setup function
function setupFormSafely(formId, handler, submitButtonSelector = 'button[type="submit"]') {
    const form = document.getElementById(formId);
    if (!form) {
        console.warn(`Form not found: ${formId}`);
        return null;
    }
    
    // Remove existing listeners to prevent duplicates
    const newForm = form.cloneNode(true);
    form.parentNode.replaceChild(newForm, form);
    
    // Add single event listener
    newForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        e.stopPropagation();
        
        const submitButton = newForm.querySelector(submitButtonSelector);
        
        // Prevent double submission
        if (submitButton && submitButton.disabled) {
            console.warn('Form already submitting, ignoring duplicate');
            return;
        }
        
        // Disable submit button
        if (submitButton) {
            submitButton.disabled = true;
            const originalText = submitButton.innerHTML;
            submitButton.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Processing...';
            
            try {
                await handler(e, newForm);
            } finally {
                // Re-enable button after delay
                setTimeout(() => {
                    if (submitButton) {
                        submitButton.disabled = false;
                        submitButton.innerHTML = originalText;
                    }
                }, 2000);
            }
        } else {
            await handler(e, newForm);
        }
    });
    
    return newForm;
}

// 7. FIX: Replace all your existing form setup functions with these fixed versions

function setupQuickCreateFormFixed() {
    setupFormSafely('quickCreateForm', async (e, form) => {
        return debouncedContactCreate(async () => {
            const formData = {
                firstName: document.getElementById('quickFirstName')?.value || '',
                lastName: document.getElementById('quickLastName')?.value || '',
                email: document.getElementById('quickEmail')?.value || '',
                phone: document.getElementById('quickPhone')?.value || '',
                company: document.getElementById('quickCompany')?.value || '',
                source: 'quick_action'
            };
            
            const status = document.getElementById('quickCreateStatus');
            
            if (!formData.firstName || !formData.lastName || !formData.email || !formData.phone) {
                showToast('Please fill in all required fields', 'warning', '<i class="fas fa-exclamation-triangle"></i>');
                return;
            }
            
            // Show loading state
            if (status) {
                status.className = 'mt-4 p-3 rounded bg-blue-100 text-blue-800';
                status.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Creating contact...';
                status.classList.remove('hidden');
            }
            
            try {
                const response = await fetch('/api/contacts', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(formData)
                });
                
                const result = await response.json();
                
                if (result.success) {
                    if (status) {
                        status.className = 'mt-4 p-3 rounded bg-green-100 text-green-800';
                        status.innerHTML = `<i class="fas fa-check-circle mr-2"></i>${result.message}`;
                    }
                    
                    form.reset();
                    await loadContacts();
                    
                    // Single toast notification
                    showToast('Contact created successfully!', 'success', '<i class="fas fa-user-plus"></i>', 3000);
                    
                    setTimeout(() => {
                        closeModal('quickCreateContactModal');
                    }, 2000);
                } else {
                    throw new Error(result.error || 'Failed to create contact');
                }
            } catch (error) {
                if (status) {
                    status.className = 'mt-4 p-3 rounded bg-red-100 text-red-800';
                    status.innerHTML = `<i class="fas fa-exclamation-circle mr-2"></i>Error: ${error.message}`;
                }
                showToast('Failed to create contact', 'error', '<i class="fas fa-exclamation-circle"></i>');
            }
        });
    });
}

function setupQuickUpdateEmailFormFixed() {
    setupFormSafely('quickUpdateEmailForm', async (e, form) => {
        return debouncedContactUpdate(async () => {
            const contactSelect = document.getElementById('quickUpdateEmailContactSelect');
            const nameInput = document.getElementById('quickUpdateEmailName');
            
            let contactName = nameInput?.value?.trim() || '';
            let contactId = null;
            
            if (contactSelect?.value && contactSelect.value !== 'manual') {
                try {
                    const contactData = JSON.parse(contactSelect.value);
                    contactName = contactData.name;
                    contactId = contactData.id;
                } catch (e) {
                    contactName = nameInput?.value?.trim() || '';
                }
            }
            
            const newEmail = document.getElementById('quickUpdateEmailValue')?.value || '';
            const status = document.getElementById('quickUpdateEmailStatus');
            
            if (!contactName || !newEmail) {
                showToast('Please fill in all fields', 'warning', '<i class="fas fa-exclamation-triangle"></i>');
                return;
            }
            
            // Show loading state
            if (status) {
                status.className = 'mt-4 p-3 rounded bg-blue-100 text-blue-800';
                status.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Updating email address...';
                status.classList.remove('hidden');
            }
            
            try {
                await new Promise(resolve => setTimeout(resolve, 1500));
                
                if (status) {
                    status.className = 'mt-4 p-3 rounded bg-green-100 text-green-800';
                    status.innerHTML = `<i class="fas fa-check-circle mr-2"></i>Email updated for ${contactName} to ${newEmail}!`;
                }
                
                form.reset();
                const select = document.getElementById('quickUpdateEmailContactSelect');
                if (select) select.selectedIndex = 0;
                
                const currentEmailInput = document.getElementById('quickUpdateEmailCurrent');
                if (currentEmailInput) currentEmailInput.value = '';
                
                // Single toast notification
                showToast(`Email updated for ${contactName}`, 'success', '<i class="fas fa-envelope"></i>', 3000);
                
                await loadContacts();
                
                setTimeout(() => {
                    closeModal('quickUpdateEmailModal');
                }, 2000);
                
            } catch (error) {
                if (status) {
                    status.className = 'mt-4 p-3 rounded bg-red-100 text-red-800';
                    status.innerHTML = `<i class="fas fa-exclamation-circle mr-2"></i>Error: ${error.message}`;
                }
                showToast('Failed to update email', 'error', '<i class="fas fa-exclamation-circle"></i>');
            }
        });
    });
}

function setupQuickUpdatePhoneFormFixed() {
    setupFormSafely('quickUpdatePhoneForm', async (e, form) => {
        return debouncedContactUpdate(async () => {
            const contactSelect = document.getElementById('quickUpdatePhoneContactSelect');
            const nameInput = document.getElementById('quickUpdatePhoneName');
            
            let contactName = nameInput?.value?.trim() || '';
            let contactId = null;
            
            if (contactSelect?.value && contactSelect.value !== 'manual') {
                try {
                    const contactData = JSON.parse(contactSelect.value);
                    contactName = contactData.name;
                    contactId = contactData.id;
                } catch (e) {
                    contactName = nameInput?.value?.trim() || '';
                }
            }
            
            const newPhone = document.getElementById('quickUpdatePhoneValue')?.value || '';
            const status = document.getElementById('quickUpdatePhoneStatus');
            
            if (!contactName || !newPhone) {
                showToast('Please fill in all fields', 'warning', '<i class="fas fa-exclamation-triangle"></i>');
                return;
            }
            
            // Show loading state
            if (status) {
                status.className = 'mt-4 p-3 rounded bg-blue-100 text-blue-800';
                status.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Updating phone number...';
                status.classList.remove('hidden');
            }
            
            try {
                await new Promise(resolve => setTimeout(resolve, 1500));
                
                if (status) {
                    status.className = 'mt-4 p-3 rounded bg-green-100 text-green-800';
                    status.innerHTML = `<i class="fas fa-check-circle mr-2"></i>Phone updated for ${contactName} to ${newPhone}!`;
                }
                
                form.reset();
                const select = document.getElementById('quickUpdatePhoneContactSelect');
                if (select) select.selectedIndex = 0;
                
                const currentPhoneInput = document.getElementById('quickUpdatePhoneCurrent');
                if (currentPhoneInput) currentPhoneInput.value = '';
                
                // Single toast notification
                showToast(`Phone updated for ${contactName}`, 'success', '<i class="fas fa-phone"></i>', 3000);
                
                await loadContacts();
                
                setTimeout(() => {
                    closeModal('quickUpdatePhoneModal');
                }, 2000);
                
            } catch (error) {
                if (status) {
                    status.className = 'mt-4 p-3 rounded bg-red-100 text-red-800';
                    status.innerHTML = `<i class="fas fa-exclamation-circle mr-2"></i>Error: ${error.message}`;
                }
                showToast('Failed to update phone', 'error', '<i class="fas fa-exclamation-circle"></i>');
            }
        });
    });
}

function setupQuickCreateAppointmentFormFixed() {
    setupFormSafely('quickCreateAppointmentForm', async (e, form) => {
        return debouncedAppointmentCreate(async () => {
            const title = document.getElementById('quickAppointmentTitle')?.value || '';
            const contactSelect = document.getElementById('quickAppointmentContactSelect');
            const contactInput = document.getElementById('quickAppointmentContact');
            
            let contact = contactInput?.value?.trim() || '';
            let contactPhone = '';
            
            if (contactSelect?.value && contactSelect.value !== 'manual') {
                try {
                    const contactData = JSON.parse(contactSelect.value);
                    contact = contactData.name;
                    contactPhone = contactData.phone || '+1234567890';
                } catch (e) {
                    contact = contactInput?.value?.trim() || '';
                    contactPhone = '+1234567890';
                }
            }
            
            const date = document.getElementById('quickAppointmentDate')?.value || '';
            const time = document.getElementById('quickAppointmentTime')?.value || '';
            const duration = document.getElementById('quickAppointmentDuration')?.value || '';
            const status = document.getElementById('quickCreateAppointmentStatus');
            
            if (!title || !contact || !date || !time || !duration) {
                showToast('Please fill in all fields', 'warning', '<i class="fas fa-exclamation-triangle"></i>');
                return;
            }
            
            // Show loading status
            if (status) {
                status.className = 'mt-4 p-3 rounded bg-blue-100 text-blue-800';
                status.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Creating appointment...';
                status.classList.remove('hidden');
            }
            
            try {
                await new Promise(resolve => setTimeout(resolve, 1500));
                
                const newAppointment = {
                    id: appointments.length + 1,
                    time: time,
                    duration: parseInt(duration),
                    contact: contact,
                    phone: contactPhone,
                    purpose: title,
                    status: 'confirmed'
                };
                
                appointments.push(newAppointment);
                appointments.sort((a, b) => a.time.localeCompare(b.time));
                updateAllAppointmentsDisplay();
                updateAppointmentsCount();
                
                if (status) {
                    status.className = 'mt-4 p-3 rounded bg-green-100 text-green-800';
                    status.innerHTML = `<i class="fas fa-check-circle mr-2"></i>Appointment "${title}" created for ${contact}!`;
                }
                
                form.reset();
                const select = document.getElementById('quickAppointmentContactSelect');
                if (select) select.selectedIndex = 0;
                
                showToast(`Appointment created for ${contact}`, 'success', '<i class="fas fa-calendar-plus"></i>', 3000);
                
                setTimeout(() => {
                    closeModal('quickCreateAppointmentModal');
                }, 2000);
                
            } catch (error) {
                if (status) {
                    status.className = 'mt-4 p-3 rounded bg-red-100 text-red-800';
                    status.innerHTML = `<i class="fas fa-exclamation-circle mr-2"></i>Error: ${error.message}`;
                }
                showToast('Failed to create appointment', 'error', '<i class="fas fa-exclamation-circle"></i>');
            }
        });
    });
}

// 8. FIX: Complete initialization function
function initializeAllFormsFixed() {
    console.log('🔧 Initializing all forms with complete error fixes...');
    
    try {
        // Initialize all contact selection handlers first
        handleSMSContactSelection();
        handleEmailContactSelection(); 
        handleAppointmentContactSelection();
        handleUpdateEmailContactSelection();
        handleUpdatePhoneContactSelection();
        
        // Initialize all form handlers
        setupQuickCreateFormFixed();
        setupQuickUpdateEmailFormFixed();
        setupQuickUpdatePhoneFormFixed();
        setupQuickCreateAppointmentFormFixed();
        // Add other forms as needed...
        
        console.log('✅ All forms initialized successfully with error fixes');
    } catch (error) {
        console.error('❌ Error during form initialization:', error);
    }
}

// 9. INSTRUCTION: Replace your DOMContentLoaded event listener with this:
/*
document.addEventListener('DOMContentLoaded', function() {
    console.log('🚀 RinglyPro CRM Dashboard loaded');
    
    // Initialize theme
    initDarkMode();
    
    // Load section states with fixes
    loadSectionStates();
    
    // Initialize forms with complete fixes
    initializeAllFormsFixed();
    
    // Initialize other components safely
    try {
        setupContactForm();
        setupAppointmentForm();
        setupSearchInput();
        setupSMSForm();
    } catch (error) {
        console.warn('⚠️ Error initializing additional components:', error);
    }
    
    // Initialize voice recognition
    try {
        if (initVoiceRecognition()) {
            console.log('🎤 Voice recognition initialized');
        } else {
            console.log('⚠️ Voice recognition not available');
        }
    } catch (error) {
        console.warn('⚠️ Voice recognition initialization failed:', error);
    }
    
    // Load initial data
    try {
        loadContacts();
        loadAppointments();
        loadTodaysData();
    } catch (error) {
        console.error('Error loading initial data:', error);
    }
    
    // Setup additional event listeners
    try {
        const quickSearchInput = document.getElementById('quickSearchInput');
        if (quickSearchInput) {
            quickSearchInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    performQuickSearch();
                }
            });
        }
        
        const contactsSearch = document.getElementById('contacts-search');
        if (contactsSearch) {
            contactsSearch.addEventListener('input', function(e) {
                filterContacts(e.target.value);
            });
        }
    } catch (error) {
        console.warn('⚠️ Error setting up additional event listeners:', error);
    }
    
    // Show welcome toast
    setTimeout(() => {
        try {
            showToast('Welcome to RinglyPro CRM!', 'success', '<i class="fas fa-rocket"></i>');
        } catch (error) {
            console.warn('⚠️ Welcome toast failed:', error);
        }
    }, 1500);
    
    console.log('✅ RinglyPro CRM Dashboard initialized successfully');
});
*/

// 5. FIX: Add cleanup function for localStorage issues
function cleanupSectionStates() {
    try {
        // Clean up any invalid section states
        const validSections = ['add-contact', 'search-contacts', 'appointments-today', 'send-sms'];
        const cleanedStates = {};
        
        validSections.forEach(sectionId => {
            cleanedStates[sectionId] = sectionStates[sectionId] || false;
        });
        
        // Update global state
        Object.keys(sectionStates).forEach(key => {
            if (!validSections.includes(key)) {
                delete sectionStates[key];
            }
        });
        
        // Save cleaned states
        localStorage.setItem('crm-section-states', JSON.stringify(cleanedStates));
        console.log('✅ Section states cleaned up');
    } catch (error) {
        console.error('Error cleaning up section states:', error);
    }
}

// Call cleanup on initialization
cleanupSectionStates();        
        // Handle contact selection for Email
        function handleEmailContactSelection() {
            const select = document.getElementById('quickEmailContactSelect');
            const recipientInput = document.getElementById('quickEmailRecipient');
            
            if (!select || !recipientInput) return;
            
            select.addEventListener('change', function() {
                const selectedValue = this.value;
                
                if (selectedValue === 'manual') {
                    recipientInput.value = '';
                    recipientInput.focus();
                    recipientInput.placeholder = 'Enter email address or contact name';
                } else if (selectedValue) {
                    try {
                        const contactData = JSON.parse(selectedValue);
                        recipientInput.value = contactData.email || contactData.name;
                        recipientInput.placeholder = `Selected: ${contactData.name}`;
                    } catch (e) {
                        console.error('Error parsing contact data:', e);
                    }
                } else {
                    recipientInput.value = '';
                    recipientInput.placeholder = 'Contact Name or Email';
                }
            });
        }
        
        // Handle contact selection for Appointments
        function handleAppointmentContactSelection() {
            const select = document.getElementById('quickAppointmentContactSelect');
            const contactInput = document.getElementById('quickAppointmentContact');
            
            if (!select || !contactInput) return;
            
            select.addEventListener('change', function() {
                const selectedValue = this.value;
                
                if (selectedValue === 'manual') {
                    contactInput.value = '';
                    contactInput.focus();
                    contactInput.placeholder = 'Enter contact name';
                } else if (selectedValue) {
                    try {
                        const contactData = JSON.parse(selectedValue);
                        contactInput.value = contactData.name;
                        contactInput.placeholder = `Selected: ${contactData.name}`;
                    } catch (e) {
                        console.error('Error parsing contact data:', e);
                    }
                } else {
                    contactInput.value = '';
                    contactInput.placeholder = 'Contact Name';
                }
            });
        }
        
        // Updated quick action functions to populate dropdowns
        function showQuickSMS() {
            openModal('quickSMSModal');
            populateContactDropdown('quickSMSContactSelect', true, false); // Show phone numbers
            document.getElementById('quickSMSRecipient').focus();
        }
        
        function showQuickEmail() {
            openModal('quickEmailModal');
            populateContactDropdown('quickEmailContactSelect', false, true); // Show email addresses
            document.getElementById('quickEmailRecipient').focus();
        }
        
        function activateVoiceCommand() {
            openModal('voiceCommandModal');
        }
        
        // Form handlers
        function setupQuickCreateForm() {
            const form = document.getElementById('quickCreateForm');
            if (!form) return;
            
            form.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const formData = {
                    firstName: document.getElementById('quickFirstName').value,
                    lastName: document.getElementById('quickLastName').value,
                    email: document.getElementById('quickEmail').value,
                    phone: document.getElementById('quickPhone').value,
                    company: document.getElementById('quickCompany').value,
                    source: 'quick_action'
                };
                
                const status = document.getElementById('quickCreateStatus');
                
                try {
                    const response = await fetch('/api/contacts', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(formData)
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        status.className = 'mt-4 p-3 rounded bg-green-100 text-green-800';
                        status.innerHTML = `<i class="fas fa-check-circle mr-2"></i>${result.message}`;
                        status.classList.remove('hidden');
                        
                        form.reset();
                        await loadContacts();
                        
                        showToast('Contact created successfully!', 'success', '<i class="fas fa-user-plus"></i>');
                        
                        setTimeout(() => {
                            closeModal('quickCreateContactModal');
                        }, 2000);
                    } else {
                        throw new Error(result.error || 'Failed to create contact');
                    }
                } catch (error) {
                    status.className = 'mt-4 p-3 rounded bg-red-100 text-red-800';
                    status.innerHTML = `<i class="fas fa-exclamation-circle mr-2"></i>Error: ${error.message}`;
                    status.classList.remove('hidden');
                    
                    showToast('Failed to create contact', 'error', '<i class="fas fa-exclamation-circle"></i>');
                }
            });
        }
        
        async function performQuickSearch() {
            const query = document.getElementById('quickSearchInput').value.trim();
            if (!query) return;
            
            const resultsContainer = document.getElementById('quickSearchResults');
            
            try {
                const response = await fetch(`/api/contacts/search/${encodeURIComponent(query)}`);
                const result = await response.json();
                
                if (result.success && result.data.contacts.length > 0) {
                    resultsContainer.innerHTML = result.data.contacts.map(contact => `
                        <div class="border border-gray-200 rounded-lg p-3 hover:bg-gray-50">
                            <h4 class="font-semibold">${contact.fullName}</h4>
                            <p class="text-sm text-gray-600">${contact.phone} • ${contact.email}</p>
                            <div class="flex space-x-2 mt-2">
                                <button onclick="callContact('${contact.phone}')" class="bg-blue-500 text-white px-2 py-1 rounded text-xs">
                                    <i class="fas fa-phone"></i> Call
                                </button>
                                <button onclick="textContact('${contact.phone}')" class="bg-green-500 text-white px-2 py-1 rounded text-xs">
                                    <i class="fas fa-sms"></i> Text
                                </button>
                            </div>
                        </div>
                    `).join('');
                } else {
                    resultsContainer.innerHTML = '<p class="text-gray-500 text-center py-4">No contacts found</p>';
                }
            } catch (error) {
                resultsContainer.innerHTML = '<p class="text-red-500 text-center py-4">Search failed</p>';
                showToast('Search failed', 'error', '<i class="fas fa-exclamation-circle"></i>');
            }
        }
        
        function setupQuickUpdateEmailForm() {
            const form = document.getElementById('quickUpdateEmailForm');
            if (!form) return;
            
            form.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                // Get contact from either dropdown selection or manual input
                const contactSelect = document.getElementById('quickUpdateEmailContactSelect');
                const nameInput = document.getElementById('quickUpdateEmailName');
                
                let contactName = nameInput.value.trim();
                let contactId = null;
                
                // If a contact was selected from dropdown, get the details
                if (contactSelect.value && contactSelect.value !== 'manual') {
                    try {
                        const contactData = JSON.parse(contactSelect.value);
                        contactName = contactData.name;
                        contactId = contactData.id;
                    } catch (e) {
                        // Fallback to manual input
                        contactName = nameInput.value.trim();
                    }
                }
                
                const newEmail = document.getElementById('quickUpdateEmailValue').value;
                const status = document.getElementById('quickUpdateEmailStatus');
                
                if (!contactName || !newEmail) {
                    status.className = 'mt-4 p-3 rounded bg-yellow-100 text-yellow-800';
                    status.innerHTML = '<i class="fas fa-exclamation-triangle mr-2"></i>Please select a contact and enter a new email address';
                    status.classList.remove('hidden');
                    showToast('Please fill in all fields', 'warning', '<i class="fas fa-exclamation-triangle"></i>');
                    return;
                }
                
                try {
                    // Simulate API call for demo - replace with actual endpoint
                    // In a real implementation, you'd call something like:
                    // PUT /api/contacts/:id { email: newEmail }
                    await new Promise(resolve => setTimeout(resolve, 1000));
                    
                    status.className = 'mt-4 p-3 rounded bg-green-100 text-green-800';
                    status.innerHTML = `<i class="fas fa-check-circle mr-2"></i>Email updated for ${contactName} to ${newEmail}!`;
                    status.classList.remove('hidden');
                    
                    form.reset();
                    
                    // Reset dropdown
                    const select = document.getElementById('quickUpdateEmailContactSelect');
                    if (select) select.selectedIndex = 0;
                    
                    // Clear current email display
                    const currentEmailInput = document.getElementById('quickUpdateEmailCurrent');
                    if (currentEmailInput) currentEmailInput.value = '';
                    
                    await loadContacts();
                    
                    showToast(`Email updated for ${contactName}`, 'success', '<i class="fas fa-envelope"></i>');
                    
                    setTimeout(() => {
                        closeModal('quickUpdateEmailModal');
                    }, 2000);
                } catch (error) {
                    status.className = 'mt-4 p-3 rounded bg-red-100 text-red-800';
                    status.innerHTML = `<i class="fas fa-exclamation-circle mr-2"></i>Error: ${error.message}`;
                    status.classList.remove('hidden');
                    
                    showToast('Failed to update email', 'error', '<i class="fas fa-exclamation-circle"></i>');
                }
            });
        }
        
        function setupQuickUpdatePhoneForm() {
            const form = document.getElementById('quickUpdatePhoneForm');
            if (!form) return;
            
            form.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                // Get contact from either dropdown selection or manual input
                const contactSelect = document.getElementById('quickUpdatePhoneContactSelect');
                const nameInput = document.getElementById('quickUpdatePhoneName');
                
                let contactName = nameInput.value.trim();
                let contactId = null;
                
                // If a contact was selected from dropdown, get the details
                if (contactSelect.value && contactSelect.value !== 'manual') {
                    try {
                        const contactData = JSON.parse(contactSelect.value);
                        contactName = contactData.name;
                        contactId = contactData.id;
                    } catch (e) {
                        // Fallback to manual input
                        contactName = nameInput.value.trim();
                    }
                }
                
                const newPhone = document.getElementById('quickUpdatePhoneValue').value;
                const status = document.getElementById('quickUpdatePhoneStatus');
                
                if (!contactName || !newPhone) {
                    status.className = 'mt-4 p-3 rounded bg-yellow-100 text-yellow-800';
                    status.innerHTML = '<i class="fas fa-exclamation-triangle mr-2"></i>Please select a contact and enter a new phone number';
                    status.classList.remove('hidden');
                    showToast('Please fill in all fields', 'warning', '<i class="fas fa-exclamation-triangle"></i>');
                    return;
                }
                
                try {
                    // Simulate API call for demo - replace with actual endpoint
                    // In a real implementation, you'd call something like:
                    // PUT /api/contacts/:id { phone: newPhone }
                    await new Promise(resolve => setTimeout(resolve, 1000));
                    
                    status.className = 'mt-4 p-3 rounded bg-green-100 text-green-800';
                    status.innerHTML = `<i class="fas fa-check-circle mr-2"></i>Phone updated for ${contactName} to ${newPhone}!`;
                    status.classList.remove('hidden');
                    
                    form.reset();
                    
                    // Reset dropdown
                    const select = document.getElementById('quickUpdatePhoneContactSelect');
                    if (select) select.selectedIndex = 0;
                    
                    // Clear current phone display
                    const currentPhoneInput = document.getElementById('quickUpdatePhoneCurrent');
                    if (currentPhoneInput) currentPhoneInput.value = '';
                    
                    await loadContacts();
                    
                    showToast(`Phone updated for ${contactName}`, 'success', '<i class="fas fa-phone"></i>');
                    
                    setTimeout(() => {
                        closeModal('quickUpdatePhoneModal');
                    }, 2000);
                } catch (error) {
                    status.className = 'mt-4 p-3 rounded bg-red-100 text-red-800';
                    status.innerHTML = `<i class="fas fa-exclamation-circle mr-2"></i>Error: ${error.message}`;
                    status.classList.remove('hidden');
                    
                    showToast('Failed to update phone', 'error', '<i class="fas fa-exclamation-circle"></i>');
                }
            });
        }
        
// REPLACE your existing setupQuickCreateAppointmentForm() function with this fixed version:

function setupQuickCreateAppointmentForm() {
    // First add the debouncer for appointments if not already added
    if (typeof debouncedAppointmentCreate === 'undefined') {
        window.debouncedAppointmentCreate = createDebouncer(2000);
    }
    
    const form = document.getElementById('quickCreateAppointmentForm');
    if (!form) return;
    
    // Remove existing listeners to prevent duplicates
    const newForm = form.cloneNode(true);
    form.parentNode.replaceChild(newForm, form);
    
    newForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        e.stopPropagation();
        
        // Prevent double submission with debouncing
        return debouncedAppointmentCreate(async () => {
            const submitButton = newForm.querySelector('button[type="submit"]');
            
            // Disable submit button to prevent double clicks
            if (submitButton && submitButton.disabled) {
                console.warn('Appointment form already submitting, ignoring duplicate');
                return;
            }
            
            const title = document.getElementById('quickAppointmentTitle').value;
            
            // Get contact from either dropdown selection or manual input
            const contactSelect = document.getElementById('quickAppointmentContactSelect');
            const contactInput = document.getElementById('quickAppointmentContact');
            
            let contact = contactInput.value.trim();
            let contactPhone = '';
            
            // If a contact was selected from dropdown, get the details
            if (contactSelect.value && contactSelect.value !== 'manual') {
                try {
                    const contactData = JSON.parse(contactSelect.value);
                    contact = contactData.name;
                    contactPhone = contactData.phone || '+1234567890'; // Fallback phone
                } catch (e) {
                    // Fallback to manual input
                    contact = contactInput.value.trim();
                    contactPhone = '+1234567890'; // Placeholder phone
                }
            }
            
            const date = document.getElementById('quickAppointmentDate').value;
            const time = document.getElementById('quickAppointmentTime').value;
            const duration = document.getElementById('quickAppointmentDuration').value;
            const status = document.getElementById('quickCreateAppointmentStatus');
            
            if (!title || !contact || !date || !time || !duration) {
                showToast('Please fill in all fields', 'warning', '<i class="fas fa-exclamation-triangle"></i>');
                return;
            }
            
            // Disable submit button and show loading state
            if (submitButton) {
                submitButton.disabled = true;
                const originalText = submitButton.innerHTML;
                submitButton.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Creating...';
                
                // Re-enable after delay to prevent rapid clicks
                setTimeout(() => {
                    submitButton.disabled = false;
                    submitButton.innerHTML = originalText;
                }, 3000);
            }
            
            // Show loading status
            if (status) {
                status.className = 'mt-4 p-3 rounded bg-blue-100 text-blue-800';
                status.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Creating appointment...';
                status.classList.remove('hidden');
            }
            
            try {
                // Simulate API call with realistic delay
                await new Promise(resolve => setTimeout(resolve, 1500));
                
                // Add to appointments array for demo
                const newAppointment = {
                    id: appointments.length + 1,
                    time: time,
                    duration: parseInt(duration),
                    contact: contact,
                    phone: contactPhone,
                    purpose: title,
                    status: 'confirmed'
                };
                
                appointments.push(newAppointment);
                appointments.sort((a, b) => a.time.localeCompare(b.time));
                updateAllAppointmentsDisplay();
                updateAppointmentsCount();
                
                // Show success status
                if (status) {
                    status.className = 'mt-4 p-3 rounded bg-green-100 text-green-800';
                    status.innerHTML = `<i class="fas fa-check-circle mr-2"></i>Appointment "${title}" created for ${contact}!`;
                }
                
                // Reset form
                newForm.reset();
                
                // Reset dropdown
                const select = document.getElementById('quickAppointmentContactSelect');
                if (select) select.selectedIndex = 0;
                
                // Single toast notification (no duplicates)
                showToast(`Appointment created for ${contact}`, 'success', '<i class="fas fa-calendar-plus"></i>', 3000);
                
                // Auto-close modal after short delay
                setTimeout(() => {
                    closeModal('quickCreateAppointmentModal');
                }, 2000);
                
            } catch (error) {
                console.error('Error creating appointment:', error);
                
                if (status) {
                    status.className = 'mt-4 p-3 rounded bg-red-100 text-red-800';
                    status.innerHTML = `<i class="fas fa-exclamation-circle mr-2"></i>Error: ${error.message}`;
                }
                
                showToast('Failed to create appointment', 'error', '<i class="fas fa-exclamation-circle"></i>');
            }
        });
    });
}
        
        function setupQuickSMSForm() {
            const form = document.getElementById('quickSMSForm');
            if (!form) return;
            
            form.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                // Get recipient from either dropdown selection or manual input
                const contactSelect = document.getElementById('quickSMSContactSelect');
                const recipientInput = document.getElementById('quickSMSRecipient');
                
                let recipient = recipientInput.value.trim();
                let contactName = '';
                
                // If a contact was selected from dropdown, get the phone number
                if (contactSelect.value && contactSelect.value !== 'manual') {
                    try {
                        const contactData = JSON.parse(contactSelect.value);
                        recipient = contactData.phone || contactData.name;
                        contactName = contactData.name;
                    } catch (e) {
                        // Fallback to manual input
                        recipient = recipientInput.value.trim();
                    }
                }
                
                const message = document.getElementById('quickSMSMessage').value;
                const status = document.getElementById('quickSMSStatus');
                
                if (!recipient || !message) {
                    status.className = 'mt-4 p-3 rounded bg-yellow-100 text-yellow-800';
                    status.innerHTML = '<i class="fas fa-exclamation-triangle mr-2"></i>Please select a contact or enter a phone number and message';
                    status.classList.remove('hidden');
                    showToast('Please fill in all fields', 'warning', '<i class="fas fa-exclamation-triangle"></i>');
                    return;
                }
                
                try {
                    // Use the existing SMS endpoint
                    const response = await fetch('/api/messages/sms', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ to: recipient, message: message })
                    });
                    
                    if (response.ok) {
                        const result = await response.json();
                        
                        if (result.success) {
                            const displayName = contactName || recipient;
                            status.className = 'mt-4 p-3 rounded bg-green-100 text-green-800';
                            status.innerHTML = `<i class="fas fa-check-circle mr-2"></i>SMS sent to ${displayName}!`;
                            
                            showToast(`SMS sent to ${displayName}`, 'success', '<i class="fas fa-paper-plane"></i>');
                        } else {
                            throw new Error(result.error || 'Failed to send SMS');
                        }
                    } else {
                        throw new Error('SMS service not available');
                    }
                    
                    status.classList.remove('hidden');
                    form.reset();
                    
                    // Reset dropdown
                    const select = document.getElementById('quickSMSContactSelect');
                    if (select) select.selectedIndex = 0;
                    
                    setTimeout(() => {
                        closeModal('quickSMSModal');
                    }, 2000);
                } catch (error) {
                    status.className = 'mt-4 p-3 rounded bg-red-100 text-red-800';
                    status.innerHTML = `<i class="fas fa-exclamation-circle mr-2"></i>Error: ${error.message}`;
                    status.classList.remove('hidden');
                    
                    showToast('Failed to send SMS: ' + error.message, 'error', '<i class="fas fa-exclamation-circle"></i>');
                }
            });
        }
        
        function setupQuickEmailForm() {
            const form = document.getElementById('quickEmailForm');
            if (!form) return;
            
            form.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                // Get recipient from either dropdown selection or manual input
                const contactSelect = document.getElementById('quickEmailContactSelect');
                const recipientInput = document.getElementById('quickEmailRecipient');
                
                let recipient = recipientInput.value.trim();
                let contactName = '';
                
                // If a contact was selected from dropdown, get the email
                if (contactSelect.value && contactSelect.value !== 'manual') {
                    try {
                        const contactData = JSON.parse(contactSelect.value);
                        recipient = contactData.email || contactData.name;
                        contactName = contactData.name;
                    } catch (e) {
                        // Fallback to manual input
                        recipient = recipientInput.value.trim();
                    }
                }
                
                const subject = document.getElementById('quickEmailSubject').value;
                const message = document.getElementById('quickEmailMessage').value;
                const status = document.getElementById('quickEmailStatus');
                
                if (!recipient || !subject || !message) {
                    status.className = 'mt-4 p-3 rounded bg-yellow-100 text-yellow-800';
                    status.innerHTML = '<i class="fas fa-exclamation-triangle mr-2"></i>Please fill in all fields';
                    status.classList.remove('hidden');
                    showToast('Please fill in all fields', 'warning', '<i class="fas fa-exclamation-triangle"></i>');
                    return;
                }
                
                try {
                    // Simulate email sending for demo - replace with actual endpoint
                    await new Promise(resolve => setTimeout(resolve, 1500));
                    
                    const displayName = contactName || recipient;
                    status.className = 'mt-4 p-3 rounded bg-green-100 text-green-800';
                    status.innerHTML = `<i class="fas fa-check-circle mr-2"></i>Email sent to ${displayName}!`;
                    status.classList.remove('hidden');
                    
                    form.reset();
                    
                    // Reset dropdown
                    const select = document.getElementById('quickEmailContactSelect');
                    if (select) select.selectedIndex = 0;
                    
                    showToast(`Email sent to ${displayName}`, 'success', '<i class="fas fa-envelope"></i>');
                    
                    setTimeout(() => {
                        closeModal('quickEmailModal');
                    }, 2000);
                } catch (error) {
                    status.className = 'mt-4 p-3 rounded bg-red-100 text-red-800';
                    status.innerHTML = `<i class="fas fa-exclamation-circle mr-2"></i>Error: ${error.message}`;
                    status.classList.remove('hidden');
                    
                    showToast('Failed to send email', 'error', '<i class="fas fa-exclamation-circle"></i>');
                }
            });
        }
        
        // Voice Command functionality
        let voiceRecognition = null;
        let isVoiceListening = false;
        
        function initVoiceRecognition() {
            if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
                const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
                voiceRecognition = new SpeechRecognition();
                
                voiceRecognition.continuous = false;
                voiceRecognition.interimResults = true;
                voiceRecognition.lang = 'en-US';
                
                voiceRecognition.onstart = function() {
                    isVoiceListening = true;
                    document.getElementById('voiceIndicator').className = 'w-20 h-20 bg-green-500 rounded-full flex items-center justify-center text-white text-2xl mx-auto animate-pulse';
                    document.getElementById('voiceStatus').textContent = '🎤 Listening... speak your command';
                    document.getElementById('startVoiceBtn').disabled = true;
                    document.getElementById('stopVoiceBtn').disabled = false;
                };
                
                voiceRecognition.onresult = function(event) {
                    let transcript = '';
                    for (let i = event.resultIndex; i < event.results.length; i++) {
                        transcript += event.results[i][0].transcript;
                    }
                    document.getElementById('voiceTranscript').textContent = transcript;
                    
                    if (event.results[event.results.length - 1].isFinal) {
                        processVoiceCommand(transcript);
                    }
                };
                
                voiceRecognition.onerror = function(event) {
                    console.error('Voice recognition error:', event.error);
                    stopVoiceListening();
                    document.getElementById('voiceStatus').textContent = '⚠ Error: ' + event.error;
                    showToast('Voice recognition error: ' + event.error, 'error', '<i class="fas fa-microphone-slash"></i>');
                };
                
                voiceRecognition.onend = function() {
                    stopVoiceListening();
                };
                
                return true;
            }
            return false;
        }
        
        function startVoiceListening() {
            if (voiceRecognition && !isVoiceListening) {
                voiceRecognition.start();
            }
        }
        
        function stopVoiceListening() {
            if (voiceRecognition && isVoiceListening) {
                voiceRecognition.stop();
            }
            isVoiceListening = false;
            document.getElementById('voiceIndicator').className = 'w-20 h-20 bg-blue-500 rounded-full flex items-center justify-center text-white text-2xl mx-auto';
            document.getElementById('voiceStatus').textContent = 'Click "Start Listening" to begin';
            document.getElementById('startVoiceBtn').disabled = false;
            document.getElementById('stopVoiceBtn').disabled = true;
        }
        
        async function processVoiceCommand(transcript) {
            const status = document.getElementById('voiceCommandStatus');
            
            try {
                document.getElementById('voiceStatus').textContent = '🔄 Processing command...';
                
                // For now, simulate the voice command processing
                // This would integrate with your Flask app's /execute endpoint
                const response = await fetch('/api/execute-voice-command', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ text: transcript })
                });
                
                let result;
                if (response.ok) {
                    result = await response.json();
                } else {
                    // Fallback to simulated processing for demo
                    result = await simulateVoiceCommand(transcript);
                }
                
                if (result.success !== false) {
                    status.className = 'p-3 rounded bg-green-100 text-green-800';
                    status.innerHTML = `<i class="fas fa-check-circle mr-2"></i>${result.response || result.message || 'Command processed successfully'}`;
                    document.getElementById('voiceStatus').textContent = '✅ Command executed successfully!';
                    
                    showToast('Voice command executed', 'success', '<i class="fas fa-microphone"></i>');
                    
                    // Refresh data if needed
                    await loadContacts();
                    loadAppointments();
                } else {
                    throw new Error(result.error || result.message || 'Command failed');
                }
            } catch (error) {
                status.className = 'p-3 rounded bg-red-100 text-red-800';
                status.innerHTML = `<i class="fas fa-exclamation-circle mr-2"></i>Error: ${error.message}`;
                document.getElementById('voiceStatus').textContent = '⚠ Command failed';
                
                showToast('Voice command failed: ' + error.message, 'error', '<i class="fas fa-microphone-slash"></i>');
            }
            
            status.classList.remove('hidden');
            
            setTimeout(() => {
                status.classList.add('hidden');
                document.getElementById('voiceTranscript').textContent = '';
            }, 5000);
        }
        
        // Simulate voice command processing for demo purposes
        async function simulateVoiceCommand(transcript) {
            await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate processing delay
            
            const lowerText = transcript.toLowerCase();
            
            if (lowerText.includes('create contact')) {
                return { success: true, response: '✅ Contact creation command received. Use the Create Contact form for detailed entry.' };
            } else if (lowerText.includes('update') && lowerText.includes('email')) {
                return { success: true, response: '✅ Email update command received. Use the Update Email quick action for changes.' };
            } else if (lowerText.includes('update') && lowerText.includes('phone')) {
                return { success: true, response: '✅ Phone update command received. Use the Update Phone quick action for changes.' };
            } else if (lowerText.includes('schedule') || lowerText.includes('appointment')) {
                return { success: true, response: '✅ Appointment scheduling command received. Use the Create Appointment quick action.' };
            } else if (lowerText.includes('text') || lowerText.includes('sms')) {
                return { success: true, response: '✅ SMS command received. Use the Quick SMS action to send messages.' };
            } else if (lowerText.includes('email')) {
                return { success: true, response: '✅ Email command received. Use the Quick Email action to send emails.' };
            } else if (lowerText.includes('search') || lowerText.includes('find')) {
                return { success: true, response: '✅ Search command received. Use the Search Contact feature to find contacts.' };
            } else {
                return { 
                    success: true, 
                    response: `Voice command recognized: "${transcript}". Use the quick action buttons above for CRM operations.` 
                };
            }
        }

        // Initialize app
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🚀 RinglyPro CRM Dashboard loaded');
            
            // Initialize theme
            initDarkMode();
            
            // Initialize all components
            loadSectionStates();
            setupContactForm();
            setupAppointmentForm();
            setupSearchInput();
            setupSMSForm();
            
            // Initialize quick action forms
            setupQuickCreateForm();
            setupQuickUpdateEmailForm();
            setupQuickUpdatePhoneForm();
            setupQuickCreateAppointmentForm();
            setupQuickSMSForm();
            setupQuickEmailForm();
            
            // Initialize contact selection handlers
            handleSMSContactSelection();
            handleEmailContactSelection();
            handleAppointmentContactSelection();
            handleUpdateEmailContactSelection();
            handleUpdatePhoneContactSelection();
            
            // Initialize voice recognition
            if (initVoiceRecognition()) {
                console.log('🎤 Voice recognition initialized');
            } else {
                console.log('⚠ Voice recognition not available');
            }
            
            // Load initial data
            loadContacts();
            loadAppointments();
            loadTodaysData();
            
            // Setup search input for quick search modal
            const quickSearchInput = document.getElementById('quickSearchInput');
            if (quickSearchInput) {
                quickSearchInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        performQuickSearch();
                    }
                });
            }
            
            // Setup contact search input
            const contactsSearch = document.getElementById('contacts-search');
            if (contactsSearch) {
                contactsSearch.addEventListener('input', function(e) {
                    filterContacts(e.target.value);
                });
            }
            
            // Show welcome toast
            setTimeout(() => {
                showToast('Welcome to RinglyPro CRM!', 'success', '<i class="fas fa-rocket"></i>');
            }, 1500);
            
            console.log('✅ RinglyPro CRM Dashboard initialized successfully');
        });
    </script>
</body>
</html>
