<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        .collapse-content {
            transition: all 0.3s ease-in-out;
            overflow: hidden;
        }
        .collapsed {
            max-height: 0;
            opacity: 0;
            padding-top: 0;
            padding-bottom: 0;
        }
        .expanded {
            max-height: 1000px;
            opacity: 1;
        }
        .collapse-btn {
            transition: transform 0.3s ease-in-out;
        }
        .collapsed .collapse-btn {
            transform: rotate(-90deg);
        }
    </style>
</head>
<body class="bg-gray-100 min-h-screen">
    <!-- Header -->
    <header class="bg-blue-600 text-white shadow-lg">
        <div class="container mx-auto px-4 py-4">
            <div class="flex items-center justify-between">
                <div class="flex items-center space-x-4">
                    <i class="fas fa-phone-alt text-2xl"></i>
                    <h1 class="text-2xl font-bold">Twilio Voice Bot CRM</h1>
                </div>
                <div class="flex items-center space-x-4">
                    <span class="bg-green-500 text-white px-3 py-1 rounded-full text-sm">
                        <i class="fas fa-circle text-xs"></i> Online
                    </span>
                    <button onclick="refreshData()" class="bg-blue-500 hover:bg-blue-600 text-white px-3 py-1 rounded-full text-sm transition duration-200">
                        <i class="fas fa-sync-alt mr-1"></i> Refresh
                    </button>
                    <button onclick="toggleAllSections()" class="bg-purple-500 hover:bg-purple-600 text-white px-3 py-1 rounded-full text-sm transition duration-200">
                        <i class="fas fa-expand-arrows-alt mr-1"></i> <span id="toggle-all-text">Collapse All</span>
                    </button>
                </div>
            </div>
        </div>
    </header>

    <div class="container mx-auto px-4 py-8">
        <!-- Status Cards -->
        <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
            <div class="bg-white rounded-lg shadow-md p-6">
                <div class="flex items-center">
                    <div class="p-3 rounded-full bg-blue-500 text-white">
                        <i class="fas fa-users"></i>
                    </div>
                    <div class="ml-4">
                        <p class="text-sm text-gray-600">Total Contacts</p>
                        <p class="text-2xl font-semibold" id="total-contacts">
                            <i class="fas fa-spinner fa-spin"></i>
                        </p>
                    </div>
                </div>
            </div>

            <div class="bg-white rounded-lg shadow-md p-6">
                <div class="flex items-center">
                    <div class="p-3 rounded-full bg-green-500 text-white">
                        <i class="fas fa-calendar-check"></i>
                    </div>
                    <div class="ml-4">
                        <p class="text-sm text-gray-600">Appointments Today</p>
                        <p class="text-2xl font-semibold" id="appointments-today">0</p>
                    </div>
                </div>
            </div>

            <div class="bg-white rounded-lg shadow-md p-6">
                <div class="flex items-center">
                    <div class="p-3 rounded-full bg-purple-500 text-white">
                        <i class="fas fa-comments"></i>
                    </div>
                    <div class="ml-4">
                        <p class="text-sm text-gray-600">Messages Today</p>
                        <p class="text-2xl font-semibold" id="messages-today">0</p>
                    </div>
                </div>
            </div>

            <div class="bg-white rounded-lg shadow-md p-6">
                <div class="flex items-center">
                    <div class="p-3 rounded-full bg-yellow-500 text-white">
                        <i class="fas fa-phone"></i>
                    </div>
                    <div class="ml-4">
                        <p class="text-sm text-gray-600">Calls Today</p>
                        <p class="text-2xl font-semibold" id="calls-today">0</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Main Content -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <!-- Add New Contact Form -->
            <div class="bg-white rounded-lg shadow-md">
                <div class="p-4 border-b border-gray-200 flex items-center justify-between cursor-pointer" onclick="toggleSection('add-contact')">
                    <h2 class="text-xl font-semibold flex items-center">
                        <i class="fas fa-user-plus mr-2 text-blue-500"></i>Add New Contact
                    </h2>
                    <button class="collapse-btn text-gray-500 hover:text-gray-700 transition duration-200">
                        <i class="fas fa-chevron-down text-lg"></i>
                    </button>
                </div>
                <div id="add-contact-content" class="collapse-content expanded p-6">
                    <form id="contact-form" class="space-y-4">
                        <div class="grid grid-cols-2 gap-4">
                            <input type="text" id="firstName" placeholder="First Name" required
                                   class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                            <input type="text" id="lastName" placeholder="Last Name" required
                                   class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                        </div>
                        <input type="tel" id="phone" placeholder="+1234567890" required
                               class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                        <input type="email" id="email" placeholder="email@example.com" required
                               class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                        <textarea id="notes" placeholder="Notes (optional)" rows="3"
                                  class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"></textarea>
                        <button type="submit" id="add-contact-btn" class="w-full bg-blue-500 hover:bg-blue-600 text-white px-4 py-3 rounded-lg transition duration-200">
                            <i class="fas fa-plus mr-2"></i>Add Contact
                        </button>
                    </form>
                    <div id="contact-status" class="mt-4 p-4 rounded-lg hidden"></div>
                </div>
            </div>

            <!-- Contact Search -->
            <div class="bg-white rounded-lg shadow-md">
                <div class="p-4 border-b border-gray-200 flex items-center justify-between cursor-pointer" onclick="toggleSection('search-contacts')">
                    <h2 class="text-xl font-semibold flex items-center">
                        <i class="fas fa-search mr-2 text-purple-500"></i>Search Contacts
                    </h2>
                    <button class="collapse-btn text-gray-500 hover:text-gray-700 transition duration-200">
                        <i class="fas fa-chevron-down text-lg"></i>
                    </button>
                </div>
                <div id="search-contacts-content" class="collapse-content expanded p-6">
                    <div class="space-y-4">
                        <input type="text" id="search-input" placeholder="Search by name, phone, or email..." 
                               class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                        <button onclick="searchContacts()" class="w-full bg-purple-500 hover:bg-purple-600 text-white px-4 py-3 rounded-lg transition duration-200">
                            <i class="fas fa-search mr-2"></i>Search
                        </button>
                    </div>
                    <div id="search-results" class="mt-4 space-y-2 hidden">
                        <h3 class="font-semibold text-gray-700">Search Results:</h3>
                        <div id="search-contacts-list" class="space-y-2"></div>
                    </div>
                </div>
            </div>

            <!-- Send Test SMS -->
            <div class="bg-white rounded-lg shadow-md">
                <div class="p-4 border-b border-gray-200 flex items-center justify-between cursor-pointer" onclick="toggleSection('send-sms')">
                    <h2 class="text-xl font-semibold flex items-center">
                        <i class="fas fa-paper-plane mr-2 text-green-500"></i>Send Test SMS
                    </h2>
                    <button class="collapse-btn text-gray-500 hover:text-gray-700 transition duration-200">
                        <i class="fas fa-chevron-down text-lg"></i>
                    </button>
                </div>
                <div id="send-sms-content" class="collapse-content expanded p-6">
                    <div class="space-y-4">
                        <input type="tel" id="test-phone" placeholder="+1234567890" 
                               class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent">
                        <textarea id="test-message" placeholder="Enter your test message..." 
                                  class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent h-24"></textarea>
                        <button id="send-sms" class="w-full bg-green-500 hover:bg-green-600 text-white px-4 py-3 rounded-lg transition duration-200">
                            <i class="fas fa-paper-plane mr-2"></i>Send SMS
                        </button>
                    </div>
                    <div id="sms-status" class="mt-4 p-4 rounded-lg hidden"></div>
                </div>
            </div>

            <!-- Test Twilio Connection -->
            <div class="bg-white rounded-lg shadow-md">
                <div class="p-4 border-b border-gray-200 flex items-center justify-between cursor-pointer" onclick="toggleSection('twilio-test')">
                    <h2 class="text-xl font-semibold flex items-center">
                        <i class="fas fa-plug mr-2 text-orange-500"></i>Twilio Connection Test
                    </h2>
                    <button class="collapse-btn text-gray-500 hover:text-gray-700 transition duration-200">
                        <i class="fas fa-chevron-down text-lg"></i>
                    </button>
                </div>
                <div id="twilio-test-content" class="collapse-content expanded p-6">
                    <button id="test-twilio" class="w-full bg-orange-500 hover:bg-orange-600 text-white px-4 py-3 rounded-lg transition duration-200 mb-4">
                        <i class="fas fa-play mr-2"></i>Test Connection
                    </button>
                    <div id="twilio-status" class="p-4 rounded-lg hidden"></div>
                </div>
            </div>
        </div>

        <!-- Webhook URLs - Always Visible -->
        <div class="mt-8 bg-white rounded-lg shadow-md p-6">
            <h2 class="text-xl font-semibold mb-4">
                <i class="fas fa-link mr-2"></i>Webhook URLs
            </h2>
            <div class="space-y-3">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Voice Webhook:</label>
                    <div class="flex items-center">
                        <input type="text" id="voice-webhook" readonly 
                               class="flex-1 p-2 border border-gray-300 rounded-l-lg bg-gray-50 text-sm">
                        <button onclick="copyToClipboard('voice-webhook')" 
                                class="bg-gray-500 hover:bg-gray-600 text-white px-3 py-2 rounded-r-lg transition duration-200">
                            <i class="fas fa-copy"></i>
                        </button>
                    </div>
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">SMS Webhook:</label>
                    <div class="flex items-center">
                        <input type="text" id="sms-webhook" readonly 
                               class="flex-1 p-2 border border-gray-300 rounded-l-lg bg-gray-50 text-sm">
                        <button onclick="copyToClipboard('sms-webhook')" 
                                class="bg-gray-500 hover:bg-gray-600 text-white px-3 py-2 rounded-r-lg transition duration-200">
                            <i class="fas fa-copy"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Contact List - Always Visible -->
        <div class="mt-8 bg-white rounded-lg shadow-md p-6">
            <div class="flex items-center justify-between mb-4">
                <h2 class="text-xl font-semibold">
                    <i class="fas fa-address-book mr-2"></i>Recent Contacts
                </h2>
                <button onclick="loadContacts()" class="bg-gray-500 hover:bg-gray-600 text-white px-3 py-1 rounded text-sm transition duration-200">
                    <i class="fas fa-sync-alt mr-1"></i> Refresh
                </button>
            </div>
            <div id="contacts-list" class="space-y-3">
                <div class="text-center py-8">
                    <i class="fas fa-spinner fa-spin text-gray-400 text-2xl mb-2"></i>
                    <p class="text-gray-500">Loading contacts...</p>
                </div>
            </div>
        </div>
    </div>

    <script>
        const apiUrl = '<%= apiUrl %>';

        // Set webhook URLs
        document.getElementById('voice-webhook').value = `${apiUrl}/webhook/twilio/voice`;
        document.getElementById('sms-webhook').value = `${apiUrl}/webhook/twilio/sms`;

        // Global state
        let contacts = [];
        let totalContacts = 0;

        // Collapsible section management
        const sectionStates = {
            'add-contact': true,
            'search-contacts': false,
            'send-sms': false,
            'twilio-test': false
        };

        // Load saved section states from localStorage
        function loadSectionStates() {
            const saved = localStorage.getItem('crm-section-states');
            if (saved) {
                Object.assign(sectionStates, JSON.parse(saved));
            }
            
            // Apply saved states
            Object.keys(sectionStates).forEach(sectionId => {
                const content = document.getElementById(`${sectionId}-content`);
                const header = content.parentElement.querySelector('.cursor-pointer');
                
                if (sectionStates[sectionId]) {
                    content.classList.add('expanded');
                    content.classList.remove('collapsed');
                    header.classList.remove('collapsed');
                } else {
                    content.classList.add('collapsed');
                    content.classList.remove('expanded');
                    header.classList.add('collapsed');
                }
            });
        }

        // Save section states to localStorage
        function saveSectionStates() {
            localStorage.setItem('crm-section-states', JSON.stringify(sectionStates));
        }

        // Toggle individual section
        function toggleSection(sectionId) {
            const content = document.getElementById(`${sectionId}-content`);
            const header = content.parentElement.querySelector('.cursor-pointer');
            
            if (content.classList.contains('expanded')) {
                content.classList.remove('expanded');
                content.classList.add('collapsed');
                header.classList.add('collapsed');
                sectionStates[sectionId] = false;
            } else {
                content.classList.remove('collapsed');
                content.classList.add('expanded');
                header.classList.remove('collapsed');
                sectionStates[sectionId] = true;
            }
            
            saveSectionStates();
        }

        // Toggle all sections
        function toggleAllSections() {
            const allExpanded = Object.values(sectionStates).every(state => state);
            const newState = !allExpanded;
            
            Object.keys(sectionStates).forEach(sectionId => {
                const content = document.getElementById(`${sectionId}-content`);
                const header = content.parentElement.querySelector('.cursor-pointer');
                
                if (newState) {
                    content.classList.remove('collapsed');
                    content.classList.add('expanded');
                    header.classList.remove('collapsed');
                } else {
                    content.classList.remove('expanded');
                    content.classList.add('collapsed');
                    header.classList.add('collapsed');
                }
                
                sectionStates[sectionId] = newState;
            });
            
            document.getElementById('toggle-all-text').textContent = newState ? 'Collapse All' : 'Expand All';
            saveSectionStates();
        }

        // Load contacts from database
        async function loadContacts() {
            try {
                console.log('Loading contacts from database...');
                const response = await fetch('/api/contacts?limit=10&sortBy=createdAt&sortOrder=DESC');
                const result = await response.json();
                
                if (result.success) {
                    contacts = result.data.contacts;
                    totalContacts = result.data.pagination.totalContacts;
                    updateContactsList();
                    updateContactCount();
                    console.log(`Loaded ${contacts.length} contacts`);
                } else {
                    throw new Error(result.error || 'Failed to load contacts');
                }
            } catch (error) {
                console.error('Error loading contacts:', error);
                document.getElementById('contacts-list').innerHTML = `
                    <div class="text-center py-8 text-red-500">
                        <i class="fas fa-exclamation-triangle text-2xl mb-2"></i>
                        <p>Error loading contacts: ${error.message}</p>
                        <button onclick="loadContacts()" class="mt-2 bg-blue-500 text-white px-4 py-2 rounded">
                            Try Again
                        </button>
                    </div>
                `;
            }
        }

        // Add Contact Form Handler
        document.getElementById('contact-form').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = {
                firstName: document.getElementById('firstName').value,
                lastName: document.getElementById('lastName').value,
                phone: document.getElementById('phone').value,
                email: document.getElementById('email').value,
                notes: document.getElementById('notes').value,
                source: 'dashboard'
            };

            const button = document.getElementById('add-contact-btn');
            const status = document.getElementById('contact-status');
            
            // Update button state
            button.disabled = true;
            button.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Adding...';
            
            try {
                const response = await fetch('/api/contacts', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(formData)
                });
                
                const result = await response.json();
                
                if (result.success) {
                    // Show success message
                    status.className = 'mt-4 p-4 rounded-lg bg-green-100 text-green-800';
                    status.innerHTML = `<i class="fas fa-check-circle mr-2"></i>${result.message}`;
                    status.classList.remove('hidden');
                    
                    // Clear form
                    document.getElementById('contact-form').reset();
                    
                    // Reload contacts
                    await loadContacts();
                    
                } else {
                    throw new Error(result.error || 'Failed to create contact');
                }
            } catch (error) {
                console.error('Error creating contact:', error);
                status.className = 'mt-4 p-4 rounded-lg bg-red-100 text-red-800';
                status.innerHTML = `<i class="fas fa-exclamation-circle mr-2"></i>Error: ${error.message}`;
                status.classList.remove('hidden');
            } finally {
                // Reset button
                button.disabled = false;
                button.innerHTML = '<i class="fas fa-plus mr-2"></i>Add Contact';
            }
        });

        // Search contacts
        async function searchContacts() {
            const query = document.getElementById('search-input').value.trim();
            if (!query) return;

            try {
                const response = await fetch(`/api/contacts/search/${encodeURIComponent(query)}`);
                const result = await response.json();
                
                if (result.success) {
                    const searchResults = document.getElementById('search-results');
                    const searchList = document.getElementById('search-contacts-list');
                    
                    if (result.data.contacts.length === 0) {
                        searchList.innerHTML = '<p class="text-gray-500 text-center py-4">No contacts found</p>';
                    } else {
                        searchList.innerHTML = result.data.contacts.map(contact => `
                            <div class="border border-gray-200 rounded-lg p-3 flex items-center justify-between hover:bg-gray-50 transition duration-200">
                                <div>
                                    <h4 class="font-semibold">${contact.fullName}</h4>
                                    <p class="text-sm text-gray-600">${contact.phone} • ${contact.email}</p>
                                </div>
                                <div class="flex space-x-2">
                                    <button onclick="callContact('${contact.phone}')" class="bg-blue-500 text-white px-2 py-1 rounded text-sm hover:bg-blue-600">
                                        <i class="fas fa-phone"></i>
                                    </button>
                                    <button onclick="textContact('${contact.phone}')" class="bg-green-500 text-white px-2 py-1 rounded text-sm hover:bg-green-600">
                                        <i class="fas fa-sms"></i>
                                    </button>
                                </div>
                            </div>
                        `).join('');
                    }
                    
                    searchResults.classList.remove('hidden');
                } else {
                    throw new Error(result.error);
                }
            } catch (error) {
                console.error('Search error:', error);
                alert('Search failed: ' + error.message);
            }
        }

        // Update contacts list display
        function updateContactsList() {
            const listElement = document.getElementById('contacts-list');
            
            if (contacts.length === 0) {
                listElement.innerHTML = `
                    <div class="text-gray-500 text-center py-8">
                        <i class="fas fa-users text-4xl mb-4 opacity-50"></i>
                        <p class="text-lg">No contacts found</p>
                        <p class="text-sm">Add your first contact using the form above!</p>
                    </div>
                `;
                return;
            }
            
            listElement.innerHTML = contacts.map(contact => `
                <div class="border border-gray-200 rounded-lg p-4 flex items-center justify-between hover:bg-gray-50 transition duration-200">
                    <div class="flex-1">
                        <div class="flex items-center space-x-3">
                            <div class="w-12 h-12 bg-blue-500 rounded-full flex items-center justify-center text-white font-semibold">
                                ${contact.firstName.charAt(0)}${contact.lastName.charAt(0)}
                            </div>
                            <div>
                                <h3 class="font-semibold text-lg">${contact.fullName}</h3>
                                <p class="text-sm text-gray-600">${contact.phone} • ${contact.email}</p>
                                ${contact.notes ? `<p class="text-xs text-gray-500 mt-1">${contact.notes}</p>` : ''}
                                <p class="text-xs text-gray-400">Added: ${new Date(contact.createdAt).toLocaleString()}</p>
                            </div>
                        </div>
                    </div>
                    <div class="flex space-x-2">
                        <button onclick="callContact('${contact.phone}')" 
                                class="bg-blue-500 text-white px-3 py-2 rounded text-sm hover:bg-blue-600 transition duration-200" 
                                title="Call ${contact.fullName}">
                            <i class="fas fa-phone"></i>
                        </button>
                        <button onclick="textContact('${contact.phone}')" 
                                class="bg-green-500 text-white px-3 py-2 rounded text-sm hover:bg-green-600 transition duration-200"
                                title="Text ${contact.fullName}">
                            <i class="fas fa-sms"></i>
                        </button>
                        <button onclick="updateLastContacted(${contact.id})" 
                                class="bg-yellow-500 text-white px-3 py-2 rounded text-sm hover:bg-yellow-600 transition duration-200"
                                title="Mark as contacted">
                            <i class="fas fa-clock"></i>
                        </button>
                    </div>
                </div>
            `).join('');
        }

        // Update contact count
        function updateContactCount() {
            document.getElementById('total-contacts').textContent = totalContacts;
        }

        // Quick actions
        function callContact(phone) {
            alert(`Calling ${phone} - In a real system, this would initiate a call via Twilio!`);
        }

        function textContact(phone) {
            // Expand SMS section if collapsed
            if (!sectionStates['send-sms']) {
                toggleSection('send-sms');
            }
            
            document.getElementById('test-phone').value = phone;
            document.getElementById('test-message').value = 'Hello! This is a message from our CRM system.';
            document.getElementById('test-message').focus();
            
            // Scroll to SMS section
            document.getElementById('send-sms-content').scrollIntoView({ behavior: 'smooth' });
        }

        // Update last contacted timestamp
        async function updateLastContacted(contactId) {
            try {
                const response = await fetch(`/api/contacts/${contactId}/contact`, {
                    method: 'PATCH'
                });
                const result = await response.json();
                
                if (result.success) {
                    await loadContacts(); // Refresh the list
                    alert('Contact timestamp updated!');
                } else {
                    throw new Error(result.error);
                }
            } catch (error) {
                console.error('Error updating contact:', error);
                alert('Failed to update contact: ' + error.message);
            }
        }

        // Refresh all data
        async function refreshData() {
            await Promise.all([
                loadContacts()
            ]);
        }

        // Copy to clipboard function
        function copyToClipboard(elementId) {
            const element = document.getElementById(elementId);
            element.select();
            document.execCommand('copy');
            
            // Show feedback
            const button = element.nextElementSibling;
            const originalContent = button.innerHTML;
            button.innerHTML = '<i class="fas fa-check"></i>';
            button.className = button.className.replace('bg-gray-500 hover:bg-gray-600', 'bg-green-500');
            
            setTimeout(() => {
                button.innerHTML = originalContent;
                button.className = button.className.replace('bg-green-500', 'bg-gray-500 hover:bg-gray-600');
            }, 2000);
        }

        // Search on Enter key
        document.getElementById('search-input').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                searchContacts();
            }
        });

        // Test Twilio connection
        document.getElementById('test-twilio').addEventListener('click', async function() {
            const button = this;
            const status = document.getElementById('twilio-status');
            
            button.disabled = true;
            button.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Testing...';
            
            try {
                const response = await fetch('/api/messages/test');
                const data = await response.json();
                
                if (data.success) {
                    status.className = 'p-4 rounded-lg bg-green-100 text-green-800';
                    status.innerHTML = `<i class="fas fa-check-circle mr-2"></i>Connected! Account: ${data.account.friendlyName} (${data.account.status})`;
                } else {
                    throw new Error(data.error || 'Connection failed');
                }
            } catch (error) {
                status.className = 'p-4 rounded-lg bg-red-100 text-red-800';
                status.innerHTML = `<i class="fas fa-exclamation-circle mr-2"></i>Error: ${error.message}`;
            }
            
            status.classList.remove('hidden');
            button.disabled = false;
            button.innerHTML = '<i class="fas fa-play mr-2"></i>Test Connection';
        });

        // Send test SMS
        document.getElementById('send-sms').addEventListener('click', async function() {
            const button = this;
            const status = document.getElementById('sms-status');
            const phone = document.getElementById('test-phone').value;
            const message = document.getElementById('test-message').value;
            
            if (!phone || !message) {
                status.className = 'mt-4 p-4 rounded-lg bg-yellow-100 text-yellow-800';
                status.innerHTML = '<i class="fas fa-exclamation-triangle mr-2"></i>Please enter both phone number and message';
                status.classList.remove('hidden');
                return;
            }
            
            button.disabled = true;
            button.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Sending...';
            
            try {
                const response = await fetch('/api/messages/sms', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ to: phone, message: message })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    status.className = 'mt-4 p-4 rounded-lg bg-green-100 text-green-800';
                    status.innerHTML = `<i class="fas fa-check-circle mr-2"></i>SMS sent successfully! Message SID: ${data.messageSid}`;
                    document.getElementById('test-phone').value = '';
                    document.getElementById('test-message').value = '';
                } else {
                    throw new Error(data.error || 'Failed to send SMS');
                }
            } catch (error) {
                status.className = 'mt-4 p-4 rounded-lg bg-red-100 text-red-800';
                status.innerHTML = `<i class="fas fa-exclamation-circle mr-2"></i>Error: ${error.message}`;
            }
            
            status.classList.remove('hidden');
            button.disabled = false;
            button.innerHTML = '<i class="fas fa-paper-plane mr-2"></i>Send SMS';
        });

        // Initialize app
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🚀 Twilio Voice Bot CRM Dashboard loaded');
            loadSectionStates();
            loadContacts();
        });
    </script>
</body>
</html>
