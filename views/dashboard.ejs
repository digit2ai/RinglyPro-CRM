<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RinglyPro CRM - Professional Customer Management</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        .collapse-content {
            transition: all 0.3s ease-in-out;
            overflow: hidden;
        }
        .collapsed {
            max-height: 0;
            opacity: 0;
            padding-top: 0;
            padding-bottom: 0;
        }
        .expanded {
            max-height: 1000px;
            opacity: 1;
        }
        .collapse-btn {
            transition: transform 0.3s ease-in-out;
        }
        .collapsed .collapse-btn {
            transform: rotate(-90deg);
        }
        .section-header:hover {
            background-color: #f8fafc;
        }
        .border-3 {
            border-width: 3px;
        }
        .animate-pulse {
            animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
        }
        @keyframes pulse {
            0%, 100% {
                opacity: 1;
            }
            50% {
                opacity: .5;
            }
        }
    </style>
</head>
<body class="bg-gray-100 min-h-screen">
    <!-- Header -->
    <header class="bg-blue-600 text-white shadow-lg">
        <div class="container mx-auto px-4 py-4">
            <div class="flex items-center justify-between">
                <div class="flex items-center space-x-4">
                    <!-- RinglyPro Logo -->
                    <div class="flex items-center space-x-2">
                        <div class="relative">
                            <img src="https://assets.cdn.filesafe.space/3lSeAHXNU9t09Hhp9oai/media/68a15064d7c434d8cab7644b.png" 
                                 alt="RinglyPro Logo" 
                                 class="w-10 h-10 object-contain bg-white rounded-lg shadow-lg p-1">
                        </div>
                        <div class="text-2xl font-bold">
                            <span class="text-white">Ringly</span><span class="text-blue-200">Pro</span>
                        </div>
                    </div>
                    <div class="text-lg font-medium text-blue-100">CRM</div>
                </div>
                <div class="flex items-center space-x-4">
                    <button onclick="refreshData()" class="bg-blue-500 hover:bg-blue-600 text-white px-3 py-1 rounded-full text-sm transition duration-200">
                        <i class="fas fa-sync-alt mr-1"></i> Refresh
                    </button>
                    <button onclick="toggleAllSections()" class="bg-purple-500 hover:bg-purple-600 text-white px-3 py-1 rounded-full text-sm transition duration-200">
                        <i class="fas fa-expand-arrows-alt mr-1"></i> <span id="toggle-all-text">Expand All</span>
                    </button>
                </div>
            </div>
        </div>
        
        <!-- Quick Actions Menu Bar -->
        <div class="bg-blue-700 border-t border-blue-500">
            <div class="container mx-auto px-4 py-2">
                <div class="flex items-center justify-between">
                    <div class="flex items-center space-x-1">
                        <!-- Contacts Dropdown -->
                        <div class="relative" id="contacts-dropdown">
                            <button onclick="toggleDropdown('contacts')" class="flex items-center px-3 py-2 rounded text-sm hover:bg-blue-600 transition duration-200">
                                <i class="fas fa-users mr-2"></i>Contacts
                                <i class="fas fa-chevron-down ml-1 text-xs"></i>
                            </button>
                            <div id="contacts-menu" class="hidden absolute left-0 mt-1 w-64 bg-white rounded-lg shadow-lg z-50 border">
                                <div class="py-2">
                                    <button onclick="showQuickCreateContact()" class="w-full text-left px-4 py-2 text-gray-700 hover:bg-gray-100 flex items-center">
                                        <i class="fas fa-user-plus text-green-500 mr-3"></i>Create New Contact
                                    </button>
                                    <button onclick="showQuickSearchContact()" class="w-full text-left px-4 py-2 text-gray-700 hover:bg-gray-100 flex items-center">
                                        <i class="fas fa-search text-blue-500 mr-3"></i>Search Contact
                                    </button>
                                    <button onclick="showQuickUpdateEmail()" class="w-full text-left px-4 py-2 text-gray-700 hover:bg-gray-100 flex items-center">
                                        <i class="fas fa-envelope text-orange-500 mr-3"></i>Update Email
                                    </button>
                                    <button onclick="showQuickUpdatePhone()" class="w-full text-left px-4 py-2 text-gray-700 hover:bg-gray-100 flex items-center">
                                        <i class="fas fa-phone text-purple-500 mr-3"></i>Update Phone
                                    </button>
                                </div>
                            </div>
                        </div>

                        <!-- Appointments Dropdown -->
                        <div class="relative" id="appointments-dropdown">
                            <button onclick="toggleDropdown('appointments')" class="flex items-center px-3 py-2 rounded text-sm hover:bg-blue-600 transition duration-200">
                                <i class="fas fa-calendar mr-2"></i>Appointments
                                <i class="fas fa-chevron-down ml-1 text-xs"></i>
                            </button>
                            <div id="appointments-menu" class="hidden absolute left-0 mt-1 w-64 bg-white rounded-lg shadow-lg z-50 border">
                                <div class="py-2">
                                    <button onclick="showQuickCreateAppointment()" class="w-full text-left px-4 py-2 text-gray-700 hover:bg-gray-100 flex items-center">
                                        <i class="fas fa-calendar-plus text-green-500 mr-3"></i>Create Appointment
                                    </button>
                                    <button onclick="showTodaysAppointments()" class="w-full text-left px-4 py-2 text-gray-700 hover:bg-gray-100 flex items-center">
                                        <i class="fas fa-clock text-blue-500 mr-3"></i>Today's Appointments
                                    </button>
                                    <button onclick="showQuickUpdateAppointment()" class="w-full text-left px-4 py-2 text-gray-700 hover:bg-gray-100 flex items-center">
                                        <i class="fas fa-edit text-orange-500 mr-3"></i>Update Appointment
                                    </button>
                                </div>
                            </div>
                        </div>

                        <!-- Quick Actions -->
                        <button onclick="showQuickSMS()" class="flex items-center px-3 py-2 rounded text-sm hover:bg-blue-600 transition duration-200">
                            <i class="fas fa-sms mr-2"></i>Quick SMS
                        </button>
                        
                        <button onclick="showQuickEmail()" class="flex items-center px-3 py-2 rounded text-sm hover:bg-blue-600 transition duration-200">
                            <i class="fas fa-envelope mr-2"></i>Quick Email
                        </button>
                    </div>
                    
                    <!-- Voice Command Button -->
                    <button onclick="activateVoiceCommand()" class="flex items-center px-3 py-2 bg-green-600 hover:bg-green-700 rounded text-sm transition duration-200">
                        <i class="fas fa-microphone mr-2"></i>Voice Command
                    </button>
                </div>
            </div>
        </div>
    </header>

    <div class="container mx-auto px-4 py-8">
        <!-- Quick Action Modals -->
        
        <!-- Quick Create Contact Modal -->
        <div id="quickCreateContactModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
            <div class="bg-white rounded-lg p-6 w-full max-w-md mx-4">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold text-gray-900">Quick Create Contact</h3>
                    <button onclick="closeModal('quickCreateContactModal')" class="text-gray-400 hover:text-gray-600">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <form id="quickCreateForm" class="space-y-4">
                    <div class="grid grid-cols-2 gap-4">
                        <input type="text" id="quickFirstName" placeholder="First Name" required
                               class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                        <input type="text" id="quickLastName" placeholder="Last Name" required
                               class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                    </div>
                    <input type="email" id="quickEmail" placeholder="Email" required
                           class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                    <input type="tel" id="quickPhone" placeholder="Phone" required
                           class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                    <input type="text" id="quickCompany" placeholder="Company (optional)"
                           class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                    <div class="flex space-x-3">
                        <button type="submit" class="flex-1 bg-blue-500 hover:bg-blue-600 text-white px-4 py-3 rounded-lg">
                            <i class="fas fa-plus mr-2"></i>Create Contact
                        </button>
                        <button type="button" onclick="closeModal('quickCreateContactModal')" class="flex-1 bg-gray-300 hover:bg-gray-400 text-gray-700 px-4 py-3 rounded-lg">
                            Cancel
                        </button>
                    </div>
                </form>
                <div id="quickCreateStatus" class="mt-4 p-3 rounded hidden"></div>
            </div>
        </div>

        <!-- Quick Search Contact Modal -->
        <div id="quickSearchContactModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
            <div class="bg-white rounded-lg p-6 w-full max-w-lg mx-4">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold text-gray-900">Search Contact</h3>
                    <button onclick="closeModal('quickSearchContactModal')" class="text-gray-400 hover:text-gray-600">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="space-y-4">
                    <input type="text" id="quickSearchInput" placeholder="Search by name, email, or phone..."
                           class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                    <button onclick="performQuickSearch()" class="w-full bg-blue-500 hover:bg-blue-600 text-white px-4 py-3 rounded-lg">
                        <i class="fas fa-search mr-2"></i>Search
                    </button>
                    <div id="quickSearchResults" class="space-y-2 max-h-64 overflow-y-auto"></div>
                </div>
            </div>
        </div>

        <!-- Quick Update Email Modal -->
        <div id="quickUpdateEmailModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
            <div class="bg-white rounded-lg p-6 w-full max-w-md mx-4">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold text-gray-900">Update Contact Email</h3>
                    <button onclick="closeModal('quickUpdateEmailModal')" class="text-gray-400 hover:text-gray-600">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <form id="quickUpdateEmailForm" class="space-y-4">
                    <input type="text" id="quickUpdateEmailName" placeholder="Contact Name" required
                           class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                    <input type="email" id="quickUpdateEmailValue" placeholder="New Email Address" required
                           class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                    <div class="flex space-x-3">
                        <button type="submit" class="flex-1 bg-orange-500 hover:bg-orange-600 text-white px-4 py-3 rounded-lg">
                            <i class="fas fa-save mr-2"></i>Update Email
                        </button>
                        <button type="button" onclick="closeModal('quickUpdateEmailModal')" class="flex-1 bg-gray-300 hover:bg-gray-400 text-gray-700 px-4 py-3 rounded-lg">
                            Cancel
                        </button>
                    </div>
                </form>
                <div id="quickUpdateEmailStatus" class="mt-4 p-3 rounded hidden"></div>
            </div>
        </div>

        <!-- Quick Update Phone Modal -->
        <div id="quickUpdatePhoneModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
            <div class="bg-white rounded-lg p-6 w-full max-w-md mx-4">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold text-gray-900">Update Contact Phone</h3>
                    <button onclick="closeModal('quickUpdatePhoneModal')" class="text-gray-400 hover:text-gray-600">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <form id="quickUpdatePhoneForm" class="space-y-4">
                    <input type="text" id="quickUpdatePhoneName" placeholder="Contact Name" required
                           class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                    <input type="tel" id="quickUpdatePhoneValue" placeholder="New Phone Number" required
                           class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                    <div class="flex space-x-3">
                        <button type="submit" class="flex-1 bg-purple-500 hover:bg-purple-600 text-white px-4 py-3 rounded-lg">
                            <i class="fas fa-save mr-2"></i>Update Phone
                        </button>
                        <button type="button" onclick="closeModal('quickUpdatePhoneModal')" class="flex-1 bg-gray-300 hover:bg-gray-400 text-gray-700 px-4 py-3 rounded-lg">
                            Cancel
                        </button>
                    </div>
                </form>
                <div id="quickUpdatePhoneStatus" class="mt-4 p-3 rounded hidden"></div>
            </div>
        </div>

        <!-- Quick Create Appointment Modal -->
        <div id="quickCreateAppointmentModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
            <div class="bg-white rounded-lg p-6 w-full max-w-md mx-4">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold text-gray-900">Quick Create Appointment</h3>
                    <button onclick="closeModal('quickCreateAppointmentModal')" class="text-gray-400 hover:text-gray-600">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <form id="quickCreateAppointmentForm" class="space-y-4">
                    <input type="text" id="quickAppointmentTitle" placeholder="Appointment Title" required
                           class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                    <input type="text" id="quickAppointmentContact" placeholder="Contact Name" required
                           class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                    <div class="grid grid-cols-2 gap-4">
                        <input type="date" id="quickAppointmentDate" required
                               class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                        <input type="time" id="quickAppointmentTime" required
                               class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                    </div>
                    <select id="quickAppointmentDuration" required
                            class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                        <option value="">Select Duration</option>
                        <option value="30">30 minutes</option>
                        <option value="60">1 hour</option>
                        <option value="90">1.5 hours</option>
                        <option value="120">2 hours</option>
                    </select>
                    <div class="flex space-x-3">
                        <button type="submit" class="flex-1 bg-green-500 hover:bg-green-600 text-white px-4 py-3 rounded-lg">
                            <i class="fas fa-calendar-plus mr-2"></i>Create Appointment
                        </button>
                        <button type="button" onclick="closeModal('quickCreateAppointmentModal')" class="flex-1 bg-gray-300 hover:bg-gray-400 text-gray-700 px-4 py-3 rounded-lg">
                            Cancel
                        </button>
                    </div>
                </form>
                <div id="quickCreateAppointmentStatus" class="mt-4 p-3 rounded hidden"></div>
            </div>
        </div>

        <!-- Quick SMS Modal -->
        <div id="quickSMSModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
            <div class="bg-white rounded-lg p-6 w-full max-w-md mx-4">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold text-gray-900">Quick SMS</h3>
                    <button onclick="closeModal('quickSMSModal')" class="text-gray-400 hover:text-gray-600">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <form id="quickSMSForm" class="space-y-4">
                    <input type="text" id="quickSMSRecipient" placeholder="Contact Name or Phone Number" required
                           class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                    <textarea id="quickSMSMessage" placeholder="Message..." rows="4" required
                              class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"></textarea>
                    <div class="flex space-x-3">
                        <button type="submit" class="flex-1 bg-green-500 hover:bg-green-600 text-white px-4 py-3 rounded-lg">
                            <i class="fas fa-paper-plane mr-2"></i>Send SMS
                        </button>
                        <button type="button" onclick="closeModal('quickSMSModal')" class="flex-1 bg-gray-300 hover:bg-gray-400 text-gray-700 px-4 py-3 rounded-lg">
                            Cancel
                        </button>
                    </div>
                </form>
                <div id="quickSMSStatus" class="mt-4 p-3 rounded hidden"></div>
            </div>
        </div>

        <!-- Quick Email Modal -->
        <div id="quickEmailModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
            <div class="bg-white rounded-lg p-6 w-full max-w-md mx-4">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold text-gray-900">Quick Email</h3>
                    <button onclick="closeModal('quickEmailModal')" class="text-gray-400 hover:text-gray-600">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <form id="quickEmailForm" class="space-y-4">
                    <input type="text" id="quickEmailRecipient" placeholder="Contact Name or Email" required
                           class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                    <input type="text" id="quickEmailSubject" placeholder="Subject" required
                           class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                    <textarea id="quickEmailMessage" placeholder="Message..." rows="4" required
                              class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"></textarea>
                    <div class="flex space-x-3">
                        <button type="submit" class="flex-1 bg-blue-500 hover:bg-blue-600 text-white px-4 py-3 rounded-lg">
                            <i class="fas fa-envelope mr-2"></i>Send Email
                        </button>
                        <button type="button" onclick="closeModal('quickEmailModal')" class="flex-1 bg-gray-300 hover:bg-gray-400 text-gray-700 px-4 py-3 rounded-lg">
                            Cancel
                        </button>
                    </div>
                </form>
                <div id="quickEmailStatus" class="mt-4 p-3 rounded hidden"></div>
            </div>
        </div>

        <!-- Voice Command Modal -->
        <div id="voiceCommandModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
            <div class="bg-white rounded-lg p-6 w-full max-w-lg mx-4">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold text-gray-900">Voice Command</h3>
                    <button onclick="closeModal('voiceCommandModal')" class="text-gray-400 hover:text-gray-600">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="text-center space-y-4">
                    <div id="voiceIndicator" class="w-20 h-20 bg-blue-500 rounded-full flex items-center justify-center text-white text-2xl mx-auto">
                        <i class="fas fa-microphone"></i>
                    </div>
                    <div id="voiceStatus" class="text-gray-600">Click "Start Listening" to begin</div>
                    <div class="space-x-3">
                        <button id="startVoiceBtn" onclick="startVoiceListening()" class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-lg">
                            <i class="fas fa-microphone mr-2"></i>Start Listening
                        </button>
                        <button id="stopVoiceBtn" onclick="stopVoiceListening()" class="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-lg" disabled>
                            <i class="fas fa-stop mr-2"></i>Stop
                        </button>
                    </div>
                    <div id="voiceTranscript" class="bg-gray-100 p-4 rounded-lg min-h-16 text-left"></div>
                    <div id="voiceCommandStatus" class="p-3 rounded hidden"></div>
                </div>
            </div>
        </div>
        <!-- Status Cards -->
        <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
            <div class="bg-white rounded-lg shadow-md p-6 cursor-pointer hover:shadow-lg transition-shadow duration-200" onclick="showTodaysContacts()">
                <div class="flex items-center">
                    <div class="p-3 rounded-full bg-blue-500 text-white">
                        <i class="fas fa-users"></i>
                    </div>
                    <div class="ml-4">
                        <p class="text-sm text-gray-600">Total Contacts</p>
                        <p class="text-2xl font-semibold" id="total-contacts">
                            <i class="fas fa-spinner fa-spin"></i>
                        </p>
                    </div>
                </div>
            </div>

            <div class="bg-white rounded-lg shadow-md p-6 cursor-pointer hover:shadow-lg transition-shadow duration-200" onclick="showTodaysAppointments()">
                <div class="flex items-center">
                    <div class="p-3 rounded-full bg-green-500 text-white">
                        <i class="fas fa-calendar-check"></i>
                    </div>
                    <div class="ml-4">
                        <p class="text-sm text-gray-600">Appointments Today</p>
                        <p class="text-2xl font-semibold" id="appointments-today">
                            <i class="fas fa-spinner fa-spin"></i>
                        </p>
                    </div>
                </div>
            </div>

            <div class="bg-white rounded-lg shadow-md p-6 cursor-pointer hover:shadow-lg transition-shadow duration-200" onclick="showTodaysMessages()">
                <div class="flex items-center">
                    <div class="p-3 rounded-full bg-purple-500 text-white">
                        <i class="fas fa-comments"></i>
                    </div>
                    <div class="ml-4">
                        <p class="text-sm text-gray-600">Messages Today</p>
                        <p class="text-2xl font-semibold" id="messages-today">0</p>
                    </div>
                </div>
            </div>

            <div class="bg-white rounded-lg shadow-md p-6 cursor-pointer hover:shadow-lg transition-shadow duration-200" onclick="showTodaysCalls()">
                <div class="flex items-center">
                    <div class="p-3 rounded-full bg-yellow-500 text-white">
                        <i class="fas fa-phone"></i>
                    </div>
                    <div class="ml-4">
                        <p class="text-sm text-gray-600">Calls Today</p>
                        <p class="text-2xl font-semibold" id="calls-today">0</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Tools Section Header -->
        <div class="mb-6">
            <h2 class="text-2xl font-bold text-gray-800 mb-2">
                <i class="fas fa-tools mr-2 text-gray-600"></i>RinglyPro CRM Tools & Features
            </h2>
            <p class="text-gray-600">Click on any tool below to expand and use its features</p>
        </div>

        <!-- Main Content -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <!-- Add New Contact Form -->
            <div class="bg-white rounded-lg shadow-md border-l-4 border-blue-500">
                <div class="section-header p-4 border-b border-gray-200 flex items-center justify-between cursor-pointer transition duration-200" onclick="toggleSection('add-contact')">
                    <div class="flex items-center space-x-3">
                        <div class="p-2 bg-blue-100 rounded-lg">
                            <i class="fas fa-user-plus text-blue-600 text-lg"></i>
                        </div>
                        <div>
                            <h3 class="text-lg font-semibold text-gray-800">Add New Contact</h3>
                            <p class="text-sm text-gray-500">Create and save customer contacts to database</p>
                        </div>
                    </div>
                    <button class="collapse-btn text-gray-400 hover:text-gray-600 transition duration-200">
                        <i class="fas fa-chevron-down text-lg"></i>
                    </button>
                </div>
                <div id="add-contact-content" class="collapse-content collapsed p-6">
                    <form id="contact-form" class="space-y-4">
                        <div class="grid grid-cols-2 gap-4">
                            <input type="text" id="firstName" placeholder="First Name" required
                                   class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                            <input type="text" id="lastName" placeholder="Last Name" required
                                   class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                        </div>
                        <input type="tel" id="phone" placeholder="+1234567890" required
                               class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                        <input type="email" id="email" placeholder="email@example.com" required
                               class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                        <textarea id="notes" placeholder="Notes (optional)" rows="3"
                                  class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"></textarea>
                        <button type="submit" id="add-contact-btn" class="w-full bg-blue-500 hover:bg-blue-600 text-white px-4 py-3 rounded-lg transition duration-200">
                            <i class="fas fa-plus mr-2"></i>Add Contact to Database
                        </button>
                    </form>
                    <div id="contact-status" class="mt-4 p-4 rounded-lg hidden"></div>
                </div>
            </div>

            <!-- Contact Search -->
            <div class="bg-white rounded-lg shadow-md border-l-4 border-purple-500">
                <div class="section-header p-4 border-b border-gray-200 flex items-center justify-between cursor-pointer transition duration-200" onclick="toggleSection('search-contacts')">
                    <div class="flex items-center space-x-3">
                        <div class="p-2 bg-purple-100 rounded-lg">
                            <i class="fas fa-search text-purple-600 text-lg"></i>
                        </div>
                        <div>
                            <h3 class="text-lg font-semibold text-gray-800">Search Contacts</h3>
                            <p class="text-sm text-gray-500">Find contacts by name, phone, or email address</p>
                        </div>
                    </div>
                    <button class="collapse-btn text-gray-400 hover:text-gray-600 transition duration-200">
                        <i class="fas fa-chevron-down text-lg"></i>
                    </button>
                </div>
                <div id="search-contacts-content" class="collapse-content collapsed p-6">
                    <div class="space-y-4">
                        <input type="text" id="search-input" placeholder="Search by name, phone, or email..." 
                               class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                        <button onclick="searchContacts()" class="w-full bg-purple-500 hover:bg-purple-600 text-white px-4 py-3 rounded-lg transition duration-200">
                            <i class="fas fa-search mr-2"></i>Search Database
                        </button>
                    </div>
                    <div id="search-results" class="mt-4 space-y-2 hidden">
                        <h3 class="font-semibold text-gray-700">Search Results:</h3>
                        <div id="search-contacts-list" class="space-y-2"></div>
                    </div>
                </div>
            </div>

            <!-- Appointments Today -->
            <div class="bg-white rounded-lg shadow-md border-l-4 border-green-500">
                <div class="section-header p-4 border-b border-gray-200 flex items-center justify-between cursor-pointer transition duration-200" onclick="toggleSection('appointments-today')">
                    <div class="flex items-center space-x-3">
                        <div class="p-2 bg-green-100 rounded-lg">
                            <i class="fas fa-calendar-alt text-green-600 text-lg"></i>
                        </div>
                        <div>
                            <h3 class="text-lg font-semibold text-gray-800">Today's Appointments</h3>
                            <p class="text-sm text-gray-500">View and manage appointments scheduled for today</p>
                        </div>
                    </div>
                    <button class="collapse-btn text-gray-400 hover:text-gray-600 transition duration-200">
                        <i class="fas fa-chevron-down text-lg"></i>
                    </button>
                </div>
                <div id="appointments-today-content" class="collapse-content collapsed p-6">
                    <!-- Quick Appointment Form -->
                    <div class="mb-6 p-4 bg-green-50 rounded-lg border border-green-200">
                        <h4 class="font-semibold text-green-800 mb-3">
                            <i class="fas fa-plus-circle mr-2"></i>Quick Appointment Booking
                        </h4>
                        <form id="appointment-form" class="space-y-3">
                            <div class="grid grid-cols-2 gap-3">
                                <input type="text" id="apt-contact-name" placeholder="Contact Name" required
                                       class="w-full p-2 border border-green-300 rounded focus:ring-2 focus:ring-green-500">
                                <input type="tel" id="apt-contact-phone" placeholder="+1234567890" required
                                       class="w-full p-2 border border-green-300 rounded focus:ring-2 focus:ring-green-500">
                            </div>
                            <div class="grid grid-cols-2 gap-3">
                                <input type="time" id="apt-time" required
                                       class="w-full p-2 border border-green-300 rounded focus:ring-2 focus:ring-green-500">
                                <select id="apt-duration" required
                                        class="w-full p-2 border border-green-300 rounded focus:ring-2 focus:ring-green-500">
                                    <option value="">Duration</option>
                                    <option value="30">30 minutes</option>
                                    <option value="60">1 hour</option>
                                    <option value="90">1.5 hours</option>
                                    <option value="120">2 hours</option>
                                </select>
                            </div>
                            <input type="text" id="apt-purpose" placeholder="Appointment purpose" required
                                   class="w-full p-2 border border-green-300 rounded focus:ring-2 focus:ring-green-500">
                            <button type="submit" id="book-appointment-btn" class="w-full bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded transition duration-200">
                                <i class="fas fa-calendar-plus mr-2"></i>Book Appointment
                            </button>
                        </form>
                        <div id="appointment-status" class="mt-3 p-3 rounded hidden"></div>
                    </div>

                    <!-- Today's Appointments List -->
                    <div>
                        <div class="flex items-center justify-between mb-4">
                            <h4 class="font-semibold text-gray-800">
                                <i class="fas fa-clock mr-2"></i>Scheduled for Today
                            </h4>
                            <span class="text-sm text-gray-500" id="today-date"></span>
                        </div>
                        <div id="appointments-list" class="space-y-3">
                            <div class="text-center py-6 text-gray-500">
                                <i class="fas fa-calendar text-2xl mb-2 opacity-50"></i>
                                <p>No appointments scheduled for today</p>
                                <p class="text-sm">Use the form above to book a new appointment</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Send Test SMS -->
            <div class="bg-white rounded-lg shadow-md border-l-4 border-orange-500">
                <div class="section-header p-4 border-b border-gray-200 flex items-center justify-between cursor-pointer transition duration-200" onclick="toggleSection('send-sms')">
                    <div class="flex items-center space-x-3">
                        <div class="p-2 bg-orange-100 rounded-lg">
                            <i class="fas fa-paper-plane text-orange-600 text-lg"></i>
                        </div>
                        <div>
                            <h3 class="text-lg font-semibold text-gray-800">Send Test SMS</h3>
                            <p class="text-sm text-gray-500">Send SMS messages via Twilio integration</p>
                        </div>
                    </div>
                    <button class="collapse-btn text-gray-400 hover:text-gray-600 transition duration-200">
                        <i class="fas fa-chevron-down text-lg"></i>
                    </button>
                </div>
                <div id="send-sms-content" class="collapse-content collapsed p-6">
                    <div class="space-y-4">
                        <input type="tel" id="test-phone" placeholder="+1234567890" 
                               class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent">
                        <textarea id="test-message" placeholder="Enter your test message..." 
                                  class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent h-24"></textarea>
                        <button id="send-sms" class="w-full bg-orange-500 hover:bg-orange-600 text-white px-4 py-3 rounded-lg transition duration-200">
                            <i class="fas fa-paper-plane mr-2"></i>Send SMS via Twilio
                        </button>
                    </div>
                    <div id="sms-status" class="mt-4 p-4 rounded-lg hidden"></div>
                </div>
            </div>
        </div>

        <!-- Contact List - Always Visible -->
        <div class="mt-8 bg-white rounded-lg shadow-md p-6 border-l-4 border-blue-600">
            <div class="flex items-center justify-between mb-4">
                <div class="flex items-center">
                    <div class="p-2 bg-blue-100 rounded-lg mr-3">
                        <i class="fas fa-address-book text-blue-600 text-lg"></i>
                    </div>
                    <div>
                        <h2 class="text-xl font-semibold text-gray-800">Recent Activities</h2>
                        <p class="text-sm text-gray-500">Your latest contacts from the database</p>
                    </div>
                </div>
                <button onclick="refreshData()" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg text-sm transition duration-200">
                    <i class="fas fa-sync-alt mr-1"></i> Refresh
                </button>
            </div>
            <div id="contacts-list" class="space-y-3">
                <div class="text-center py-8">
                    <i class="fas fa-spinner fa-spin text-gray-400 text-2xl mb-2"></i>
                    <p class="text-gray-500">Loading contacts...</p>
                </div>
            </div>
        </div>
    </div>

    <script>
        const apiUrl = window.location.origin; // For production use

        // Global state
        let contacts = [];
        let totalContacts = 0;
        let appointments = [];
        let currentView = 'contacts'; // Track which view is active: 'contacts', 'appointments', 'messages', 'calls'

        // Card click handlers for different views
        function showTodaysContacts() {
            currentView = 'contacts';
            updateActivitiesSection();
        }

        function showTodaysAppointments() {
            currentView = 'appointments';
            updateActivitiesSection();
        }

        function showTodaysMessages() {
            currentView = 'messages';
            updateActivitiesSection();
        }

        function showTodaysCalls() {
            currentView = 'calls';
            updateActivitiesSection();
        }

        // Update the Recent Activities section based on current view
        function updateActivitiesSection() {
            const headerElement = document.querySelector('#contacts-list').parentElement.querySelector('h2');
            const subtitleElement = document.querySelector('#contacts-list').parentElement.querySelector('p');
            const listElement = document.getElementById('contacts-list');
            
            if (!headerElement || !subtitleElement || !listElement) return;

            const today = new Date().toLocaleDateString('en-US', {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });

            switch(currentView) {
                case 'contacts':
                    headerElement.textContent = 'Recent Activities';
                    subtitleElement.textContent = 'Your latest contacts from the database';
                    updateContactsList();
                    break;
                    
                case 'appointments':
                    headerElement.textContent = `Today's Appointments`;
                    subtitleElement.textContent = `Appointments scheduled for ${today}`;
                    displayAppointmentsInActivities();
                    break;
                    
                case 'messages':
                    headerElement.textContent = `Today's Messages`;
                    subtitleElement.textContent = `SMS messages sent and received today`;
                    displayMessagesInActivities();
                    break;
                    
                case 'calls':
                    headerElement.textContent = `Today's Calls`;
                    subtitleElement.textContent = `Phone calls made and received today`;
                    displayCallsInActivities();
                    break;
            }
        }

        // Display appointments in the activities section
        function displayAppointmentsInActivities() {
            const listElement = document.getElementById('contacts-list');
            if (!listElement) return;
            
            if (appointments.length === 0) {
                listElement.innerHTML = `
                    <div class="text-gray-500 text-center py-8">
                        <i class="fas fa-calendar text-4xl mb-4 opacity-50"></i>
                        <p class="text-lg">No appointments scheduled for today</p>
                        <p class="text-sm">Click on "Today's Appointments" section above to book a new appointment</p>
                    </div>
                `;
                return;
            }
            
            listElement.innerHTML = appointments.map(apt => `
                <div class="border border-gray-200 rounded-lg p-4 flex items-center justify-between hover:bg-gray-50 transition duration-200">
                    <div class="flex-1">
                        <div class="flex items-center space-x-3">
                            <div class="w-12 h-12 bg-green-500 rounded-full flex items-center justify-center text-white font-semibold">
                                <i class="fas fa-calendar-check"></i>
                            </div>
                            <div>
                                <h3 class="font-semibold text-lg">${apt.contact}</h3>
                                <p class="text-sm text-gray-600">${apt.time} • ${apt.duration} minutes • ${apt.phone}</p>
                                <p class="text-sm text-gray-500">${apt.purpose}</p>
                                <span class="inline-block px-2 py-1 rounded-full text-xs ${apt.status === 'confirmed' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'} mt-1">
                                    ${apt.status}
                                </span>
                            </div>
                        </div>
                    </div>
                    <div class="flex space-x-2">
                        <button onclick="callContact('${apt.phone}')" 
                                class="bg-blue-500 text-white px-3 py-2 rounded text-sm hover:bg-blue-600 transition duration-200" 
                                title="Call ${apt.contact}">
                            <i class="fas fa-phone"></i>
                        </button>
                        <button onclick="textContact('${apt.phone}')" 
                                class="bg-green-500 text-white px-3 py-2 rounded text-sm hover:bg-green-600 transition duration-200"
                                title="Text ${apt.contact}">
                            <i class="fas fa-sms"></i>
                        </button>
                    </div>
                </div>
            `).join('');
        }

        // Display messages in the activities section
        function displayMessagesInActivities() {
            const listElement = document.getElementById('contacts-list');
            if (!listElement) return;
            
            // Simulated message data for demo
            const todaysMessages = [
                {
                    id: 1,
                    contact: 'John Doe',
                    phone: '+1234567890',
                    message: 'Thank you for the information about your services.',
                    time: '09:15 AM',
                    direction: 'incoming',
                    status: 'delivered'
                },
                {
                    id: 2,
                    contact: 'Jane Smith',
                    phone: '+1987654321',
                    message: 'Your appointment is confirmed for tomorrow at 2 PM.',
                    time: '11:30 AM',
                    direction: 'outgoing',
                    status: 'delivered'
                }
            ];
            
            if (todaysMessages.length === 0) {
                listElement.innerHTML = `
                    <div class="text-gray-500 text-center py-8">
                        <i class="fas fa-comments text-4xl mb-4 opacity-50"></i>
                        <p class="text-lg">No messages sent or received today</p>
                        <p class="text-sm">Use the "Send Test SMS" tool above to send messages</p>
                    </div>
                `;
                return;
            }
            
            listElement.innerHTML = todaysMessages.map(msg => `
                <div class="border border-gray-200 rounded-lg p-4 flex items-center justify-between hover:bg-gray-50 transition duration-200">
                    <div class="flex-1">
                        <div class="flex items-center space-x-3">
                            <div class="w-12 h-12 ${msg.direction === 'incoming' ? 'bg-purple-500' : 'bg-blue-500'} rounded-full flex items-center justify-center text-white font-semibold">
                                <i class="fas ${msg.direction === 'incoming' ? 'fa-arrow-down' : 'fa-arrow-up'}"></i>
                            </div>
                            <div>
                                <h3 class="font-semibold text-lg">${msg.contact}</h3>
                                <p class="text-sm text-gray-600">${msg.time} • ${msg.phone}</p>
                                <p class="text-sm text-gray-700 mt-1">"${msg.message}"</p>
                                <span class="inline-block px-2 py-1 rounded-full text-xs ${msg.direction === 'incoming' ? 'bg-purple-100 text-purple-800' : 'bg-blue-100 text-blue-800'} mt-1">
                                    ${msg.direction} • ${msg.status}
                                </span>
                            </div>
                        </div>
                    </div>
                    <div class="flex space-x-2">
                        <button onclick="textContact('${msg.phone}')" 
                                class="bg-purple-500 text-white px-3 py-2 rounded text-sm hover:bg-purple-600 transition duration-200"
                                title="Reply to ${msg.contact}">
                            <i class="fas fa-reply"></i>
                        </button>
                        <button onclick="callContact('${msg.phone}')" 
                                class="bg-blue-500 text-white px-3 py-2 rounded text-sm hover:bg-blue-600 transition duration-200" 
                                title="Call ${msg.contact}">
                            <i class="fas fa-phone"></i>
                        </button>
                    </div>
                </div>
            `).join('');
        }

        // Display calls in the activities section
        function displayCallsInActivities() {
            const listElement = document.getElementById('contacts-list');
            if (!listElement) return;
            
            // Simulated call data for demo
            const todaysCalls = [
                {
                    id: 1,
                    contact: 'John Doe',
                    phone: '+1234567890',
                    time: '08:45 AM',
                    duration: '05:23',
                    direction: 'incoming',
                    status: 'completed'
                },
                {
                    id: 2,
                    contact: 'Jane Smith',
                    phone: '+1987654321',
                    time: '10:15 AM',
                    duration: '02:45',
                    direction: 'outgoing',
                    status: 'completed'
                },
                {
                    id: 3,
                    contact: 'Unknown',
                    phone: '+1555999888',
                    time: '02:30 PM',
                    duration: '00:00',
                    direction: 'incoming',
                    status: 'missed'
                }
            ];
            
            if (todaysCalls.length === 0) {
                listElement.innerHTML = `
                    <div class="text-gray-500 text-center py-8">
                        <i class="fas fa-phone text-4xl mb-4 opacity-50"></i>
                        <p class="text-lg">No calls made or received today</p>
                        <p class="text-sm">Call activity will appear here when calls are made through your system</p>
                    </div>
                `;
                return;
            }
            
            listElement.innerHTML = todaysCalls.map(call => `
                <div class="border border-gray-200 rounded-lg p-4 flex items-center justify-between hover:bg-gray-50 transition duration-200">
                    <div class="flex-1">
                        <div class="flex items-center space-x-3">
                            <div class="w-12 h-12 ${call.status === 'missed' ? 'bg-red-500' : call.direction === 'incoming' ? 'bg-green-500' : 'bg-yellow-500'} rounded-full flex items-center justify-center text-white font-semibold">
                                <i class="fas ${call.status === 'missed' ? 'fa-phone-slash' : call.direction === 'incoming' ? 'fa-phone-volume' : 'fa-phone'}"></i>
                            </div>
                            <div>
                                <h3 class="font-semibold text-lg">${call.contact}</h3>
                                <p class="text-sm text-gray-600">${call.time} • ${call.phone}</p>
                                <p class="text-sm text-gray-500">Duration: ${call.duration}</p>
                                <span class="inline-block px-2 py-1 rounded-full text-xs ${call.status === 'missed' ? 'bg-red-100 text-red-800' : call.direction === 'incoming' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'} mt-1">
                                    ${call.direction} • ${call.status}
                                </span>
                            </div>
                        </div>
                    </div>
                    <div class="flex space-x-2">
                        <button onclick="callContact('${call.phone}')" 
                                class="bg-green-500 text-white px-3 py-2 rounded text-sm hover:bg-green-600 transition duration-200" 
                                title="Call back ${call.contact}">
                            <i class="fas fa-phone"></i>
                        </button>
                        <button onclick="textContact('${call.phone}')" 
                                class="bg-blue-500 text-white px-3 py-2 rounded text-sm hover:bg-blue-600 transition duration-200"
                                title="Text ${call.contact}">
                            <i class="fas fa-sms"></i>
                        </button>
                    </div>
                </div>
            `).join('');
        }

        // Collapsible section management - ALL COLLAPSED BY DEFAULT
        const sectionStates = {
            'add-contact': false,
            'search-contacts': false,
            'appointments-today': false,
            'send-sms': false
        };

        // Load saved section states from localStorage with error handling
        function loadSectionStates() {
            try {
                const saved = localStorage.getItem('crm-section-states');
                if (saved) {
                    Object.assign(sectionStates, JSON.parse(saved));
                }
                
                // Apply saved states with error checking
                Object.keys(sectionStates).forEach(sectionId => {
                    const content = document.getElementById(`${sectionId}-content`);
                    
                    // Check if element exists before proceeding
                    if (!content) {
                        console.warn(`Section content not found: ${sectionId}-content`);
                        return;
                    }
                    
                    const header = content.parentElement.querySelector('.section-header');
                    
                    if (!header) {
                        console.warn(`Section header not found for: ${sectionId}`);
                        return;
                    }
                    
                    if (sectionStates[sectionId]) {
                        content.classList.add('expanded');
                        content.classList.remove('collapsed');
                        header.classList.remove('collapsed');
                    } else {
                        content.classList.add('collapsed');
                        content.classList.remove('expanded');
                        header.classList.add('collapsed');
                    }
                });
                
                // Update toggle all button text
                const toggleAllText = document.getElementById('toggle-all-text');
                if (toggleAllText) {
                    const allExpanded = Object.values(sectionStates).every(state => state);
                    toggleAllText.textContent = allExpanded ? 'Collapse All' : 'Expand All';
                }
            } catch (error) {
                console.error('Error loading section states:', error);
                // Reset to default states if there's an error
                Object.keys(sectionStates).forEach(key => {
                    sectionStates[key] = false;
                });
            }
        }

        // Save section states to localStorage
        function saveSectionStates() {
            try {
                localStorage.setItem('crm-section-states', JSON.stringify(sectionStates));
            } catch (error) {
                console.error('Error saving section states:', error);
            }
        }

        // Toggle individual section
        function toggleSection(sectionId) {
            const content = document.getElementById(`${sectionId}-content`);
            const header = content?.parentElement?.querySelector('.section-header');
            
            if (!content || !header) {
                console.error(`Section elements not found for: ${sectionId}`);
                return;
            }
            
            if (content.classList.contains('expanded')) {
                content.classList.remove('expanded');
                content.classList.add('collapsed');
                header.classList.add('collapsed');
                sectionStates[sectionId] = false;
            } else {
                content.classList.remove('collapsed');
                content.classList.add('expanded');
                header.classList.remove('collapsed');
                sectionStates[sectionId] = true;
            }
            
            saveSectionStates();
            
            // Update toggle all button text
            const toggleAllText = document.getElementById('toggle-all-text');
            if (toggleAllText) {
                const allExpanded = Object.values(sectionStates).every(state => state);
                toggleAllText.textContent = allExpanded ? 'Collapse All' : 'Expand All';
            }
        }

        // Toggle all sections
        function toggleAllSections() {
            const allExpanded = Object.values(sectionStates).every(state => state);
            const newState = !allExpanded;
            
            Object.keys(sectionStates).forEach(sectionId => {
                const content = document.getElementById(`${sectionId}-content`);
                const header = content?.parentElement?.querySelector('.section-header');
                
                if (!content || !header) {
                    console.warn(`Section elements not found for: ${sectionId}`);
                    return;
                }
                
                if (newState) {
                    content.classList.remove('collapsed');
                    content.classList.add('expanded');
                    header.classList.remove('collapsed');
                } else {
                    content.classList.remove('expanded');
                    content.classList.add('collapsed');
                    header.classList.add('collapsed');
                }
                
                sectionStates[sectionId] = newState;
            });
            
            const toggleAllText = document.getElementById('toggle-all-text');
            if (toggleAllText) {
                toggleAllText.textContent = newState ? 'Collapse All' : 'Expand All';
            }
            saveSectionStates();
        }

        // Load contacts from database
        async function loadContacts() {
            try {
                console.log('Loading contacts from database...');
                const response = await fetch('/api/contacts?limit=10&sortBy=createdAt&sortOrder=DESC');
                const result = await response.json();
                
                if (result.success) {
                    contacts = result.data.contacts;
                    totalContacts = result.data.pagination.totalContacts;
                    updateContactCount();
                    // Update the activities section if we're viewing contacts
                    if (currentView === 'contacts') {
                        updateContactsList();
                    }
                    console.log(`Loaded ${contacts.length} contacts`);
                } else {
                    throw new Error(result.error || 'Failed to load contacts');
                }
            } catch (error) {
                console.error('Error loading contacts:', error);
                const contactsList = document.getElementById('contacts-list');
                if (contactsList && currentView === 'contacts') {
                    contactsList.innerHTML = `
                        <div class="text-center py-8 text-red-500">
                            <i class="fas fa-exclamation-triangle text-2xl mb-2"></i>
                            <p>Error loading contacts: ${error.message}</p>
                            <button onclick="loadContacts()" class="mt-2 bg-blue-500 text-white px-4 py-2 rounded">
                                Try Again
                            </button>
                        </div>
                    `;
                }
            }
        }

        // Load appointments (simulated for now)
        function loadAppointments() {
            const today = new Date();
            
            // Display today's date
            const todayDateEl = document.getElementById('today-date');
            if (todayDateEl) {
                todayDateEl.textContent = today.toLocaleDateString('en-US', {
                    weekday: 'long',
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                });
            }

            // Simulated appointments for demo
            appointments = [
                {
                    id: 1,
                    time: '09:00',
                    duration: 60,
                    contact: 'John Doe',
                    phone: '+1234567890',
                    purpose: 'Sales consultation',
                    status: 'confirmed'
                },
                {
                    id: 2,
                    time: '14:30',
                    duration: 30,
                    contact: 'Jane Smith',
                    phone: '+1987654321',
                    purpose: 'Product demo',
                    status: 'pending'
                }
            ];

            updateAppointmentsList();
            updateAppointmentsCount();
        }

        // Update appointments list
        function updateAppointmentsList() {
            const listElement = document.getElementById('appointments-list');
            if (!listElement) return;
            
            if (appointments.length === 0) {
                listElement.innerHTML = `
                    <div class="text-center py-6 text-gray-500">
                        <i class="fas fa-calendar text-2xl mb-2 opacity-50"></i>
                        <p>No appointments scheduled for today</p>
                        <p class="text-sm">Use the form above to book a new appointment</p>
                    </div>
                `;
                return;
            }
            
            listElement.innerHTML = appointments.map(apt => `
                <div class="border border-gray-200 rounded-lg p-4 flex items-center justify-between hover:bg-gray-50 transition duration-200">
                    <div class="flex items-center space-x-4">
                        <div class="text-center">
                            <div class="text-lg font-bold text-blue-600">${apt.time}</div>
                            <div class="text-xs text-gray-500">${apt.duration} min</div>
                        </div>
                        <div>
                            <h4 class="font-semibold">${apt.contact}</h4>
                            <p class="text-sm text-gray-600">${apt.phone}</p>
                            <p class="text-sm text-gray-500">${apt.purpose}</p>
                        </div>
                    </div>
                    <div class="flex items-center space-x-2">
                        <span class="px-2 py-1 rounded-full text-xs ${apt.status === 'confirmed' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'}">
                            ${apt.status}
                        </span>
                        <button onclick="callContact('${apt.phone}')" class="bg-blue-500 text-white px-2 py-1 rounded text-sm hover:bg-blue-600" title="Call ${apt.contact}">
                            <i class="fas fa-phone"></i>
                        </button>
                        <button onclick="textContact('${apt.phone}')" class="bg-green-500 text-white px-2 py-1 rounded text-sm hover:bg-green-600" title="Text ${apt.contact}">
                            <i class="fas fa-sms"></i>
                        </button>
                    </div>
                </div>
            `).join('');
        }

        // Update appointments count
        function updateAppointmentsCount() {
            const appointmentsEl = document.getElementById('appointments-today');
            if (appointmentsEl) {
                appointmentsEl.textContent = appointments.length;
            }
        }

        // Handle appointment form submission
        function setupAppointmentForm() {
            const form = document.getElementById('appointment-form');
            if (!form) return;
            
            form.addEventListener('submit', function(e) {
                e.preventDefault();
                
                const contactName = document.getElementById('apt-contact-name')?.value;
                const contactPhone = document.getElementById('apt-contact-phone')?.value;
                const time = document.getElementById('apt-time')?.value;
                const duration = document.getElementById('apt-duration')?.value;
                const purpose = document.getElementById('apt-purpose')?.value;
                
                if (!contactName || !contactPhone || !time || !duration || !purpose) {
                    alert('Please fill in all fields');
                    return;
                }
                
                // Add new appointment (simulation)
                const newAppointment = {
                    id: appointments.length + 1,
                    time: time,
                    duration: parseInt(duration),
                    contact: contactName,
                    phone: contactPhone,
                    purpose: purpose,
                    status: 'confirmed'
                };
                
                appointments.push(newAppointment);
                appointments.sort((a, b) => a.time.localeCompare(b.time));
                
                // Update display
                updateAppointmentsList();
                updateAppointmentsCount();
                
                // Show success message
                const status = document.getElementById('appointment-status');
                if (status) {
                    status.className = 'mt-3 p-3 rounded bg-green-100 text-green-800';
                    status.innerHTML = `<i class="fas fa-check-circle mr-2"></i>Appointment booked for ${contactName} at ${time}`;
                    status.classList.remove('hidden');
                    
                    // Clear form
                    form.reset();
                    
                    // Hide success message after 3 seconds
                    setTimeout(() => {
                        status.classList.add('hidden');
                    }, 3000);
                }
            });
        }

        // Add Contact Form Handler
        function setupContactForm() {
            const form = document.getElementById('contact-form');
            if (!form) return;
            
            form.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const formData = {
                    firstName: document.getElementById('firstName')?.value,
                    lastName: document.getElementById('lastName')?.value,
                    phone: document.getElementById('phone')?.value,
                    email: document.getElementById('email')?.value,
                    notes: document.getElementById('notes')?.value,
                    source: 'dashboard'
                };

                const button = document.getElementById('add-contact-btn');
                const status = document.getElementById('contact-status');
                
                if (!button || !status) return;
                
                // Update button state
                button.disabled = true;
                button.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Adding to Database...';
                
                try {
                    const response = await fetch('/api/contacts', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(formData)
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        // Show success message
                        status.className = 'mt-4 p-4 rounded-lg bg-green-100 text-green-800';
                        status.innerHTML = `<i class="fas fa-check-circle mr-2"></i>${result.message}`;
                        status.classList.remove('hidden');
                        
                        // Clear form
                        form.reset();
                        
                        // Reload contacts from database
                        await loadContacts();
                        
                        // If we're viewing contacts, the list will already be updated
                        // If we're viewing something else, keep that view
                        
                    } else {
                        throw new Error(result.error || 'Failed to create contact');
                    }
                } catch (error) {
                    console.error('Error creating contact:', error);
                    status.className = 'mt-4 p-4 rounded-lg bg-red-100 text-red-800';
                    status.innerHTML = `<i class="fas fa-exclamation-circle mr-2"></i>Error: ${error.message}`;
                    status.classList.remove('hidden');
                } finally {
                    // Reset button
                    button.disabled = false;
                    button.innerHTML = '<i class="fas fa-plus mr-2"></i>Add Contact to Database';
                }
            });
        }

        // Search contacts
        async function searchContacts() {
            const query = document.getElementById('search-input')?.value?.trim();
            if (!query) return;

            try {
                const response = await fetch(`/api/contacts/search/${encodeURIComponent(query)}`);
                const result = await response.json();
                
                if (result.success) {
                    const searchResults = document.getElementById('search-results');
                    const searchList = document.getElementById('search-contacts-list');
                    
                    if (!searchResults || !searchList) return;
                    
                    if (result.data.contacts.length === 0) {
                        searchList.innerHTML = '<p class="text-gray-500 text-center py-4">No contacts found matching your search</p>';
                    } else {
                        searchList.innerHTML = result.data.contacts.map(contact => `
                            <div class="border border-gray-200 rounded-lg p-3 flex items-center justify-between hover:bg-gray-50 transition duration-200">
                                <div>
                                    <h4 class="font-semibold">${contact.fullName}</h4>
                                    <p class="text-sm text-gray-600">${contact.phone} • ${contact.email}</p>
                                </div>
                                <div class="flex space-x-2">
                                    <button onclick="callContact('${contact.phone}')" class="bg-blue-500 text-white px-2 py-1 rounded text-sm hover:bg-blue-600" title="Call ${contact.fullName}">
                                        <i class="fas fa-phone"></i>
                                    </button>
                                    <button onclick="textContact('${contact.phone}')" class="bg-green-500 text-white px-2 py-1 rounded text-sm hover:bg-green-600" title="Text ${contact.fullName}">
                                        <i class="fas fa-sms"></i>
                                    </button>
                                </div>
                            </div>
                        `).join('');
                    }
                    
                    searchResults.classList.remove('hidden');
                } else {
                    throw new Error(result.error);
                }
            } catch (error) {
                console.error('Search error:', error);
                alert('Search failed: ' + error.message);
            }
        }

        // Update contacts list display
        function updateContactsList() {
            // Only update if we're in contacts view
            if (currentView !== 'contacts') return;
            
            const listElement = document.getElementById('contacts-list');
            if (!listElement) return;
            
            if (contacts.length === 0) {
                listElement.innerHTML = `
                    <div class="text-gray-500 text-center py-8">
                        <i class="fas fa-users text-4xl mb-4 opacity-50"></i>
                        <p class="text-lg">No contacts found</p>
                        <p class="text-sm">Add your first contact using the "Add New Contact" tool above!</p>
                    </div>
                `;
                return;
            }
            
            listElement.innerHTML = contacts.map(contact => `
                <div class="border border-gray-200 rounded-lg p-4 flex items-center justify-between hover:bg-gray-50 transition duration-200">
                    <div class="flex-1">
                        <div class="flex items-center space-x-3">
                            <div class="w-12 h-12 bg-blue-500 rounded-full flex items-center justify-center text-white font-semibold">
                                ${contact.firstName.charAt(0)}${contact.lastName.charAt(0)}
                            </div>
                            <div>
                                <h3 class="font-semibold text-lg">${contact.fullName}</h3>
                                <p class="text-sm text-gray-600">${contact.phone} • ${contact.email}</p>
                                ${contact.notes ? `<p class="text-xs text-gray-500 mt-1">${contact.notes}</p>` : ''}
                                <p class="text-xs text-gray-400">Added: ${new Date(contact.createdAt).toLocaleString()}</p>
                            </div>
                        </div>
                    </div>
                    <div class="flex space-x-2">
                        <button onclick="callContact('${contact.phone}')" 
                                class="bg-blue-500 text-white px-3 py-2 rounded text-sm hover:bg-blue-600 transition duration-200" 
                                title="Call ${contact.fullName}">
                            <i class="fas fa-phone"></i>
                        </button>
                        <button onclick="textContact('${contact.phone}')" 
                                class="bg-green-500 text-white px-3 py-2 rounded text-sm hover:bg-green-600 transition duration-200"
                                title="Text ${contact.fullName}">
                            <i class="fas fa-sms"></i>
                        </button>
                        <button onclick="updateLastContacted(${contact.id})" 
                                class="bg-yellow-500 text-white px-3 py-2 rounded text-sm hover:bg-yellow-600 transition duration-200"
                                title="Mark as contacted">
                            <i class="fas fa-clock"></i>
                        </button>
                    </div>
                </div>
            `).join('');
        }

        // Update contact count
        function updateContactCount() {
            const contactCountEl = document.getElementById('total-contacts');
            if (contactCountEl) {
                contactCountEl.textContent = totalContacts;
            }
        }

        // Quick actions
        function callContact(phone) {
            alert(`Calling ${phone} - In a real system, RinglyPro would initiate a call via Twilio!`);
        }

        function textContact(phone) {
            // Expand SMS section if collapsed
            if (!sectionStates['send-sms']) {
                toggleSection('send-sms');
            }
            
            const phoneInput = document.getElementById('test-phone');
            const messageInput = document.getElementById('test-message');
            
            if (phoneInput) phoneInput.value = phone;
            if (messageInput) {
                messageInput.value = 'Hello! This is a message from RinglyPro CRM.';
                messageInput.focus();
            }
            
            // Scroll to SMS section
            const smsContent = document.getElementById('send-sms-content');
            if (smsContent) {
                smsContent.scrollIntoView({ behavior: 'smooth' });
            }
        }

        // Update last contacted timestamp
        async function updateLastContacted(contactId) {
            try {
                const response = await fetch(`/api/contacts/${contactId}/contact`, {
                    method: 'PATCH'
                });
                const result = await response.json();
                
                if (result.success) {
                    await loadContacts(); // This will refresh the view if we're on contacts
                    alert('Contact timestamp updated!');
                } else {
                    throw new Error(result.error);
                }
            } catch (error) {
                console.error('Error updating contact:', error);
                alert('Failed to update contact: ' + error.message);
            }
        }

        // Refresh all data
        async function refreshData() {
            await Promise.all([
                loadContacts(),
                loadAppointments()
            ]);
            // Refresh the current view
            updateActivitiesSection();
        }

        // Setup search on Enter key
        function setupSearchInput() {
            const searchInput = document.getElementById('search-input');
            if (searchInput) {
                searchInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        searchContacts();
                    }
                });
            }
        }

        // Send test SMS
        function setupSMSForm() {
            const sendButton = document.getElementById('send-sms');
            if (!sendButton) return;
            
            sendButton.addEventListener('click', async function() {
                const button = this;
                const status = document.getElementById('sms-status');
                const phone = document.getElementById('test-phone')?.value;
                const message = document.getElementById('test-message')?.value;
                
                if (!phone || !message) {
                    if (status) {
                        status.className = 'mt-4 p-4 rounded-lg bg-yellow-100 text-yellow-800';
                        status.innerHTML = '<i class="fas fa-exclamation-triangle mr-2"></i>Please enter both phone number and message';
                        status.classList.remove('hidden');
                    }
                    return;
                }
                
                button.disabled = true;
                button.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Sending via Twilio...';
                
                try {
                    const response = await fetch('/api/messages/sms', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ to: phone, message: message })
                    });
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        if (status) {
                            status.className = 'mt-4 p-4 rounded-lg bg-green-100 text-green-800';
                            status.innerHTML = `<i class="fas fa-check-circle mr-2"></i>✅ SMS sent successfully! Message SID: ${data.messageSid}`;
                            status.classList.remove('hidden');
                        }
                        
                        // Clear form
                        const phoneInput = document.getElementById('test-phone');
                        const messageInput = document.getElementById('test-message');
                        if (phoneInput) phoneInput.value = '';
                        if (messageInput) messageInput.value = '';
                        
                    } else {
                        throw new Error(data.error || 'Failed to send SMS');
                    }
                } catch (error) {
                    if (status) {
                        status.className = 'mt-4 p-4 rounded-lg bg-red-100 text-red-800';
                        status.innerHTML = `<i class="fas fa-exclamation-circle mr-2"></i>❌ Error: ${error.message}`;
                        status.classList.remove('hidden');
                    }
                }
                
                button.disabled = false;
                button.innerHTML = '<i class="fas fa-paper-plane mr-2"></i>Send SMS via Twilio';
            });
        }

        // ==================== QUICK ACTIONS FUNCTIONALITY ====================
        
        // Dropdown menu management
        let activeDropdown = null;
        
        function toggleDropdown(dropdownName) {
            const menu = document.getElementById(`${dropdownName}-menu`);
            
            // Close other dropdowns
            if (activeDropdown && activeDropdown !== dropdownName) {
                const otherMenu = document.getElementById(`${activeDropdown}-menu`);
                if (otherMenu) {
                    otherMenu.classList.add('hidden');
                }
            }
            
            // Toggle current dropdown
            if (menu.classList.contains('hidden')) {
                menu.classList.remove('hidden');
                activeDropdown = dropdownName;
            } else {
                menu.classList.add('hidden');
                activeDropdown = null;
            }
        }
        
        // Close dropdowns when clicking outside
        document.addEventListener('click', function(event) {
            if (activeDropdown && !event.target.closest(`#${activeDropdown}-dropdown`)) {
                const menu = document.getElementById(`${activeDropdown}-menu`);
                if (menu) {
                    menu.classList.add('hidden');
                    activeDropdown = null;
                }
            }
        });
        
        // Modal management
        function openModal(modalId) {
            document.getElementById(modalId).classList.remove('hidden');
            // Close any open dropdowns
            if (activeDropdown) {
                const menu = document.getElementById(`${activeDropdown}-menu`);
                if (menu) {
                    menu.classList.add('hidden');
                    activeDropdown = null;
                }
            }
        }
        
        function closeModal(modalId) {
            document.getElementById(modalId).classList.add('hidden');
            // Clear any status messages
            const statusEl = document.querySelector(`#${modalId} [id$="Status"]`);
            if (statusEl) {
                statusEl.classList.add('hidden');
            }
            // Reset forms
            const form = document.querySelector(`#${modalId} form`);
            if (form) {
                form.reset();
            }
        }
        
        // Quick action functions
        function showQuickCreateContact() {
            openModal('quickCreateContactModal');
            // Set today's date as default
            const today = new Date().toISOString().split('T')[0];
        }
        
        function showQuickSearchContact() {
            openModal('quickSearchContactModal');
            document.getElementById('quickSearchInput').focus();
        }
        
        function showQuickUpdateEmail() {
            openModal('quickUpdateEmailModal');
            document.getElementById('quickUpdateEmailName').focus();
        }
        
        function showQuickUpdatePhone() {
            openModal('quickUpdatePhoneModal');
            document.getElementById('quickUpdatePhoneName').focus();
        }
        
        function showQuickCreateAppointment() {
            openModal('quickCreateAppointmentModal');
            // Set default date to today
            const today = new Date().toISOString().split('T')[0];
            document.getElementById('quickAppointmentDate').value = today;
            // Set default time to next hour
            const now = new Date();
            now.setHours(now.getHours() + 1, 0, 0, 0);
            document.getElementById('quickAppointmentTime').value = now.toTimeString().slice(0, 5);
        }
        
        function showQuickUpdateAppointment() {
            // For now, show today's appointments - can be enhanced later
            showTodaysAppointments();
        }
        
        function showQuickSMS() {
            openModal('quickSMSModal');
            document.getElementById('quickSMSRecipient').focus();
        }
        
        function showQuickEmail() {
            openModal('quickEmailModal');
            document.getElementById('quickEmailRecipient').focus();
        }
        
        function activateVoiceCommand() {
            openModal('voiceCommandModal');
        }
        
        // Form handlers
        function setupQuickCreateForm() {
            const form = document.getElementById('quickCreateForm');
            if (!form) return;
            
            form.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const formData = {
                    firstName: document.getElementById('quickFirstName').value,
                    lastName: document.getElementById('quickLastName').value,
                    email: document.getElementById('quickEmail').value,
                    phone: document.getElementById('quickPhone').value,
                    company: document.getElementById('quickCompany').value,
                    source: 'quick_action'
                };
                
                const status = document.getElementById('quickCreateStatus');
                
                try {
                    const response = await fetch('/api/contacts', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(formData)
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        status.className = 'mt-4 p-3 rounded bg-green-100 text-green-800';
                        status.innerHTML = `<i class="fas fa-check-circle mr-2"></i>${result.message}`;
                        status.classList.remove('hidden');
                        
                        form.reset();
                        await loadContacts();
                        
                        setTimeout(() => {
                            closeModal('quickCreateContactModal');
                        }, 2000);
                    } else {
                        throw new Error(result.error || 'Failed to create contact');
                    }
                } catch (error) {
                    status.className = 'mt-4 p-3 rounded bg-red-100 text-red-800';
                    status.innerHTML = `<i class="fas fa-exclamation-circle mr-2"></i>Error: ${error.message}`;
                    status.classList.remove('hidden');
                }
            });
        }
        
        async function performQuickSearch() {
            const query = document.getElementById('quickSearchInput').value.trim();
            if (!query) return;
            
            const resultsContainer = document.getElementById('quickSearchResults');
            
            try {
                const response = await fetch(`/api/contacts/search/${encodeURIComponent(query)}`);
                const result = await response.json();
                
                if (result.success && result.data.contacts.length > 0) {
                    resultsContainer.innerHTML = result.data.contacts.map(contact => `
                        <div class="border border-gray-200 rounded-lg p-3 hover:bg-gray-50">
                            <h4 class="font-semibold">${contact.fullName}</h4>
                            <p class="text-sm text-gray-600">${contact.phone} • ${contact.email}</p>
                            <div class="flex space-x-2 mt-2">
                                <button onclick="callContact('${contact.phone}')" class="bg-blue-500 text-white px-2 py-1 rounded text-xs">
                                    <i class="fas fa-phone"></i> Call
                                </button>
                                <button onclick="textContact('${contact.phone}')" class="bg-green-500 text-white px-2 py-1 rounded text-xs">
                                    <i class="fas fa-sms"></i> Text
                                </button>
                            </div>
                        </div>
                    `).join('');
                } else {
                    resultsContainer.innerHTML = '<p class="text-gray-500 text-center py-4">No contacts found</p>';
                }
            } catch (error) {
                resultsContainer.innerHTML = '<p class="text-red-500 text-center py-4">Search failed</p>';
            }
        }
        
        function setupQuickUpdateEmailForm() {
            const form = document.getElementById('quickUpdateEmailForm');
            if (!form) return;
            
            form.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const name = document.getElementById('quickUpdateEmailName').value;
                const email = document.getElementById('quickUpdateEmailValue').value;
                const status = document.getElementById('quickUpdateEmailStatus');
                
                try {
                    // Simulate API call for demo - replace with actual endpoint
                    await new Promise(resolve => setTimeout(resolve, 1000));
                    
                    status.className = 'mt-4 p-3 rounded bg-green-100 text-green-800';
                    status.innerHTML = `<i class="fas fa-check-circle mr-2"></i>Email updated for ${name} to ${email}!`;
                    status.classList.remove('hidden');
                    
                    form.reset();
                    await loadContacts();
                    
                    setTimeout(() => {
                        closeModal('quickUpdateEmailModal');
                    }, 2000);
                } catch (error) {
                    status.className = 'mt-4 p-3 rounded bg-red-100 text-red-800';
                    status.innerHTML = `<i class="fas fa-exclamation-circle mr-2"></i>Error: ${error.message}`;
                    status.classList.remove('hidden');
                }
            });
        }
        
        function setupQuickUpdatePhoneForm() {
            const form = document.getElementById('quickUpdatePhoneForm');
            if (!form) return;
            
            form.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const name = document.getElementById('quickUpdatePhoneName').value;
                const phone = document.getElementById('quickUpdatePhoneValue').value;
                const status = document.getElementById('quickUpdatePhoneStatus');
                
                try {
                    // Simulate API call for demo - replace with actual endpoint
                    await new Promise(resolve => setTimeout(resolve, 1000));
                    
                    status.className = 'mt-4 p-3 rounded bg-green-100 text-green-800';
                    status.innerHTML = `<i class="fas fa-check-circle mr-2"></i>Phone updated for ${name} to ${phone}!`;
                    status.classList.remove('hidden');
                    
                    form.reset();
                    await loadContacts();
                    
                    setTimeout(() => {
                        closeModal('quickUpdatePhoneModal');
                    }, 2000);
                } catch (error) {
                    status.className = 'mt-4 p-3 rounded bg-red-100 text-red-800';
                    status.innerHTML = `<i class="fas fa-exclamation-circle mr-2"></i>Error: ${error.message}`;
                    status.classList.remove('hidden');
                }
            });
        }
        
        function setupQuickCreateAppointmentForm() {
            const form = document.getElementById('quickCreateAppointmentForm');
            if (!form) return;
            
            form.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const title = document.getElementById('quickAppointmentTitle').value;
                const contact = document.getElementById('quickAppointmentContact').value;
                const date = document.getElementById('quickAppointmentDate').value;
                const time = document.getElementById('quickAppointmentTime').value;
                const duration = document.getElementById('quickAppointmentDuration').value;
                const status = document.getElementById('quickCreateAppointmentStatus');
                
                try {
                    // Simulate API call for demo - replace with actual endpoint
                    await new Promise(resolve => setTimeout(resolve, 1000));
                    
                    // Add to appointments array for demo
                    const newAppointment = {
                        id: appointments.length + 1,
                        time: time,
                        duration: parseInt(duration),
                        contact: contact,
                        phone: '+1234567890', // Placeholder
                        purpose: title,
                        status: 'confirmed'
                    };
                    
                    appointments.push(newAppointment);
                    updateAppointmentsList();
                    updateAppointmentsCount();
                    
                    status.className = 'mt-4 p-3 rounded bg-green-100 text-green-800';
                    status.innerHTML = `<i class="fas fa-check-circle mr-2"></i>Appointment "${title}" created for ${contact}!`;
                    status.classList.remove('hidden');
                    
                    form.reset();
                    
                    setTimeout(() => {
                        closeModal('quickCreateAppointmentModal');
                    }, 2000);
                } catch (error) {
                    status.className = 'mt-4 p-3 rounded bg-red-100 text-red-800';
                    status.innerHTML = `<i class="fas fa-exclamation-circle mr-2"></i>Error: ${error.message}`;
                    status.classList.remove('hidden');
                }
            });
        }
        
        function setupQuickSMSForm() {
            const form = document.getElementById('quickSMSForm');
            if (!form) return;
            
            form.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const recipient = document.getElementById('quickSMSRecipient').value;
                const message = document.getElementById('quickSMSMessage').value;
                const status = document.getElementById('quickSMSStatus');
                
                try {
                    // Use the existing SMS endpoint
                    const response = await fetch('/api/messages/sms', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ to: recipient, message: message })
                    });
                    
                    if (response.ok) {
                        const result = await response.json();
                        
                        if (result.success) {
                            status.className = 'mt-4 p-3 rounded bg-green-100 text-green-800';
                            status.innerHTML = `<i class="fas fa-check-circle mr-2"></i>SMS sent to ${recipient}!`;
                        } else {
                            throw new Error(result.error || 'Failed to send SMS');
                        }
                    } else {
                        throw new Error('SMS service not available');
                    }
                    
                    status.classList.remove('hidden');
                    form.reset();
                    
                    setTimeout(() => {
                        closeModal('quickSMSModal');
                    }, 2000);
                } catch (error) {
                    status.className = 'mt-4 p-3 rounded bg-red-100 text-red-800';
                    status.innerHTML = `<i class="fas fa-exclamation-circle mr-2"></i>Error: ${error.message}`;
                    status.classList.remove('hidden');
                }
            });
        }
        
        function setupQuickEmailForm() {
            const form = document.getElementById('quickEmailForm');
            if (!form) return;
            
            form.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const recipient = document.getElementById('quickEmailRecipient').value;
                const subject = document.getElementById('quickEmailSubject').value;
                const message = document.getElementById('quickEmailMessage').value;
                const status = document.getElementById('quickEmailStatus');
                
                try {
                    // Simulate email sending for demo - replace with actual endpoint
                    await new Promise(resolve => setTimeout(resolve, 1500));
                    
                    status.className = 'mt-4 p-3 rounded bg-green-100 text-green-800';
                    status.innerHTML = `<i class="fas fa-check-circle mr-2"></i>Email sent to ${recipient}!`;
                    status.classList.remove('hidden');
                    
                    form.reset();
                    
                    setTimeout(() => {
                        closeModal('quickEmailModal');
                    }, 2000);
                } catch (error) {
                    status.className = 'mt-4 p-3 rounded bg-red-100 text-red-800';
                    status.innerHTML = `<i class="fas fa-exclamation-circle mr-2"></i>Error: ${error.message}`;
                    status.classList.remove('hidden');
                }
            });
        }
        
        // Voice Command functionality
        let voiceRecognition = null;
        let isVoiceListening = false;
        
        function initVoiceRecognition() {
            if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
                const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
                voiceRecognition = new SpeechRecognition();
                
                voiceRecognition.continuous = false;
                voiceRecognition.interimResults = true;
                voiceRecognition.lang = 'en-US';
                
                voiceRecognition.onstart = function() {
                    isVoiceListening = true;
                    document.getElementById('voiceIndicator').className = 'w-20 h-20 bg-green-500 rounded-full flex items-center justify-center text-white text-2xl mx-auto animate-pulse';
                    document.getElementById('voiceStatus').textContent = '🎤 Listening... speak your command';
                    document.getElementById('startVoiceBtn').disabled = true;
                    document.getElementById('stopVoiceBtn').disabled = false;
                };
                
                voiceRecognition.onresult = function(event) {
                    let transcript = '';
                    for (let i = event.resultIndex; i < event.results.length; i++) {
                        transcript += event.results[i][0].transcript;
                    }
                    document.getElementById('voiceTranscript').textContent = transcript;
                    
                    if (event.results[event.results.length - 1].isFinal) {
                        processVoiceCommand(transcript);
                    }
                };
                
                voiceRecognition.onerror = function(event) {
                    console.error('Voice recognition error:', event.error);
                    stopVoiceListening();
                    document.getElementById('voiceStatus').textContent = '❌ Error: ' + event.error;
                };
                
                voiceRecognition.onend = function() {
                    stopVoiceListening();
                };
                
                return true;
            }
            return false;
        }
        
        function startVoiceListening() {
            if (voiceRecognition && !isVoiceListening) {
                voiceRecognition.start();
            }
        }
        
        function stopVoiceListening() {
            if (voiceRecognition && isVoiceListening) {
                voiceRecognition.stop();
            }
            isVoiceListening = false;
            document.getElementById('voiceIndicator').className = 'w-20 h-20 bg-blue-500 rounded-full flex items-center justify-center text-white text-2xl mx-auto';
            document.getElementById('voiceStatus').textContent = 'Click "Start Listening" to begin';
            document.getElementById('startVoiceBtn').disabled = false;
            document.getElementById('stopVoiceBtn').disabled = true;
        }
        
        async function processVoiceCommand(transcript) {
            const status = document.getElementById('voiceCommandStatus');
            
            try {
                document.getElementById('voiceStatus').textContent = '🔄 Processing command...';
                
                // For now, simulate the voice command processing
                // This would integrate with your Flask app's /execute endpoint
                const response = await fetch('/api/execute-voice-command', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ text: transcript })
                });
                
                let result;
                if (response.ok) {
                    result = await response.json();
                } else {
                    // Fallback to simulated processing for demo
                    result = await simulateVoiceCommand(transcript);
                }
                
                if (result.success !== false) {
                    status.className = 'p-3 rounded bg-green-100 text-green-800';
                    status.innerHTML = `<i class="fas fa-check-circle mr-2"></i>${result.response || result.message || 'Command processed successfully'}`;
                    document.getElementById('voiceStatus').textContent = '✅ Command executed successfully!';
                    
                    // Refresh data if needed
                    await loadContacts();
                    loadAppointments();
                } else {
                    throw new Error(result.error || result.message || 'Command failed');
                }
            } catch (error) {
                status.className = 'p-3 rounded bg-red-100 text-red-800';
                status.innerHTML = `<i class="fas fa-exclamation-circle mr-2"></i>Error: ${error.message}`;
                document.getElementById('voiceStatus').textContent = '❌ Command failed';
            }
            
            status.classList.remove('hidden');
            
            setTimeout(() => {
                status.classList.add('hidden');
                document.getElementById('voiceTranscript').textContent = '';
            }, 5000);
        }
        
        // Simulate voice command processing for demo purposes
        async function simulateVoiceCommand(transcript) {
            await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate processing delay
            
            const lowerText = transcript.toLowerCase();
            
            if (lowerText.includes('create contact')) {
                return { success: true, response: '✅ Contact creation command received. Use the Create Contact form for detailed entry.' };
            } else if (lowerText.includes('update') && lowerText.includes('email')) {
                return { success: true, response: '✅ Email update command received. Use the Update Email quick action for changes.' };
            } else if (lowerText.includes('update') && lowerText.includes('phone')) {
                return { success: true, response: '✅ Phone update command received. Use the Update Phone quick action for changes.' };
            } else if (lowerText.includes('schedule') || lowerText.includes('appointment')) {
                return { success: true, response: '✅ Appointment scheduling command received. Use the Create Appointment quick action.' };
            } else if (lowerText.includes('text') || lowerText.includes('sms')) {
                return { success: true, response: '✅ SMS command received. Use the Quick SMS action to send messages.' };
            } else if (lowerText.includes('email')) {
                return { success: true, response: '✅ Email command received. Use the Quick Email action to send emails.' };
            } else if (lowerText.includes('search') || lowerText.includes('find')) {
                return { success: true, response: '✅ Search command received. Use the Search Contact feature to find contacts.' };
            } else {
                return { 
                    success: true, 
                    response: `Voice command recognized: "${transcript}". Use the quick action buttons above for CRM operations.` 
                };
            }
        }
        
        // Initialize app
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🚀 RinglyPro CRM Dashboard loaded');
            
            // Initialize all components
            loadSectionStates();
            setupContactForm();
            setupAppointmentForm();
            setupSearchInput();
            setupSMSForm();
            
            // Initialize quick action forms
            setupQuickCreateForm();
            setupQuickUpdateEmailForm();
            setupQuickUpdatePhoneForm();
            setupQuickCreateAppointmentForm();
            setupQuickSMSForm();
            setupQuickEmailForm();
            
            // Initialize voice recognition
            if (initVoiceRecognition()) {
                console.log('🎤 Voice recognition initialized');
            } else {
                console.log('❌ Voice recognition not available');
            }
            
            // Load initial data
            loadContacts();
            loadAppointments();
            
            // Set initial view to contacts
            currentView = 'contacts';
            
            // Setup search input for quick search modal
            const quickSearchInput = document.getElementById('quickSearchInput');
            if (quickSearchInput) {
                quickSearchInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        performQuickSearch();
                    }
                });
            }
            
            console.log('✅ RinglyPro CRM Dashboard initialized successfully');
        });
    </script>
</body>
</html>
