<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RinglyPro CRM - Dashboard</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            background: #f3f4f6;
            color: #111827;
            line-height: 1.5;
        }

        /* Header */
        .header {
            background: white;
            border-bottom: 1px solid #e5e7eb;
            position: sticky;
            top: 0;
            z-index: 40;
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
        }

        .header-content {
            padding: 1rem;
        }

        .header-top {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 1rem;
        }

        .header-top h1 {
            font-size: 1.25rem;
            font-weight: 700;
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            margin-bottom: 1rem;
        }

        .username {
            font-size: 0.875rem;
            color: #4b5563;
            font-weight: 500;
        }

        .logout-btn {
            background: #ef4444;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 0.5rem;
            font-size: 0.875rem;
            font-weight: 500;
            cursor: pointer;
            transition: background 0.2s;
        }

        .logout-btn:hover {
            background: #dc2626;
        }

        /* Rachel Toggle Card */
        .rachel-card {
            background: linear-gradient(135deg, #eff6ff 0%, #e0e7ff 100%);
            border: 2px solid #3b82f6;
            border-radius: 0.75rem;
            padding: 1rem;
        }

        .rachel-toggle-row {
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .rachel-info {
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .status-dot {
            width: 0.75rem;
            height: 0.75rem;
            border-radius: 50%;
            animation: pulse 2s ease-in-out infinite;
        }

        .status-dot.active {
            background: #10b981;
        }

        .status-dot.inactive {
            background: #ef4444;
            animation: none;
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        .rachel-text h3 {
            font-size: 0.95rem;
            font-weight: 600;
            color: #1f2937;
            margin-bottom: 0.125rem;
        }

        .rachel-text p {
            font-size: 0.75rem;
            color: #6b7280;
        }

        /* Toggle Switch */
        .toggle-switch {
            position: relative;
            display: inline-block;
            width: 3rem;
            height: 1.5rem;
        }

        .toggle-switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .toggle-slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #d1d5db;
            transition: 0.3s;
            border-radius: 1.5rem;
        }

        .toggle-slider:before {
            position: absolute;
            content: "";
            height: 1.125rem;
            width: 1.125rem;
            left: 0.1875rem;
            bottom: 0.1875rem;
            background-color: white;
            transition: 0.3s;
            border-radius: 50%;
        }

        input:checked + .toggle-slider {
            background-color: #3b82f6;
        }

        input:checked + .toggle-slider:before {
            transform: translateX(1.5rem);
        }

        /* Quick Actions */
        .quick-actions {
            padding: 1rem;
            background: white;
            border-bottom: 1px solid #e5e7eb;
        }

        .action-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 0.75rem;
        }

        .action-btn {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 0.75rem;
            border: none;
            border-radius: 0.5rem;
            font-size: 0.75rem;
            font-weight: 500;
            cursor: pointer;
            transition: transform 0.2s, box-shadow 0.2s;
            color: white;
        }

        .action-btn:active {
            transform: scale(0.95);
        }

        .action-btn svg {
            width: 1.25rem;
            height: 1.25rem;
            margin-bottom: 0.25rem;
        }

        .btn-sms {
            background: #3b82f6;
        }

        .btn-sms:hover {
            background: #2563eb;
        }

        .btn-call {
            background: #10b981;
        }

        .btn-call:hover {
            background: #059669;
        }

        .btn-voice {
            background: #8b5cf6;
        }

        .btn-voice:hover {
            background: #7c3aed;
        }

        .btn-voice.listening {
            background: #ef4444;
            animation: pulse-button 1s ease-in-out infinite;
        }

        @keyframes pulse-button {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }

        /* Navigation Tabs */
        .nav-tabs {
            display: flex;
            background: white;
            border-bottom: 1px solid #e5e7eb;
        }

        .nav-tab {
            flex: 1;
            padding: 0.75rem 1rem;
            border: none;
            background: transparent;
            font-size: 0.875rem;
            font-weight: 500;
            color: #6b7280;
            cursor: pointer;
            border-bottom: 2px solid transparent;
            transition: all 0.2s;
        }

        .nav-tab.active {
            color: #3b82f6;
            background: #eff6ff;
            border-bottom-color: #3b82f6;
        }

        .nav-tab svg {
            width: 1rem;
            height: 1rem;
            display: inline;
            margin-right: 0.5rem;
            vertical-align: middle;
        }

        /* Content Area */
        .content {
            padding: 1rem;
            padding-bottom: 5rem;
        }

        .content-section {
            display: none;
        }

        .content-section.active {
            display: block;
        }

        .section-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 1rem;
        }

        .section-header h2 {
            font-size: 1.125rem;
            font-weight: 600;
        }

        /* Appointment Card */
        .appointment-card {
            background: white;
            border-radius: 0.75rem;
            border: 1px solid #e5e7eb;
            margin-bottom: 0.75rem;
            overflow: hidden;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .appointment-main {
            padding: 1rem;
            display: flex;
            justify-content: space-between;
            align-items: start;
        }

        .appointment-info {
            flex: 1;
        }

        .appointment-info h3 {
            font-size: 1rem;
            font-weight: 600;
            margin-bottom: 0.25rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .appointment-info p {
            font-size: 0.875rem;
            color: #6b7280;
            margin-bottom: 0.25rem;
        }

        .appointment-time {
            text-align: right;
            margin-left: 1rem;
        }

        .appointment-time .time {
            font-size: 1.125rem;
            font-weight: 600;
            color: #3b82f6;
            margin-bottom: 0.25rem;
        }

        .status-badge {
            display: inline-block;
            padding: 0.25rem 0.5rem;
            border-radius: 9999px;
            font-size: 0.75rem;
            font-weight: 500;
        }

        .status-confirmed {
            background: #d1fae5;
            color: #065f46;
        }

        .status-pending {
            background: #fed7aa;
            color: #9a3412;
        }

        .appointment-actions {
            background: #f9fafb;
            padding: 0.5rem 1rem;
            display: flex;
            gap: 0.5rem;
        }

        .appointment-actions button {
            display: flex;
            align-items: center;
            gap: 0.25rem;
            padding: 0.375rem 0.75rem;
            border: none;
            border-radius: 9999px;
            font-size: 0.75rem;
            font-weight: 500;
            cursor: pointer;
            color: white;
        }

        .appointment-actions button svg {
            width: 0.875rem;
            height: 0.875rem;
        }

        .appointment-actions .btn-text {
            background: #3b82f6;
        }

        .appointment-actions .btn-call-apt {
            background: #10b981;
        }

        /* Communication Card */
        .comm-card {
            background: white;
            border-radius: 0.75rem;
            border: 1px solid #e5e7eb;
            padding: 1rem;
            margin-bottom: 0.75rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .comm-card-content {
            display: flex;
            gap: 0.75rem;
        }

        .comm-icon {
            padding: 0.5rem;
            border-radius: 9999px;
            width: 2.5rem;
            height: 2.5rem;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .comm-icon.sms {
            background: #dbeafe;
            color: #2563eb;
        }

        .comm-icon.call {
            background: #d1fae5;
            color: #059669;
        }

        .comm-info {
            flex: 1;
        }

        .comm-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 0.25rem;
        }

        .comm-header h4 {
            font-size: 0.9375rem;
            font-weight: 600;
        }

        .comm-header .time {
            font-size: 0.75rem;
            color: #6b7280;
        }

        .comm-info p {
            font-size: 0.875rem;
            color: #6b7280;
            margin-bottom: 0.5rem;
        }

        .comm-badge {
            display: inline-block;
            padding: 0.25rem 0.5rem;
            border-radius: 9999px;
            font-size: 0.75rem;
        }

        .comm-badge.received {
            background: #dbeafe;
            color: #1e40af;
        }

        .comm-badge.sent {
            background: #e5e7eb;
            color: #374151;
        }

        /* Empty State */
        .empty-state {
            text-align: center;
            padding: 3rem 1rem;
            color: #9ca3af;
        }

        .empty-state svg {
            width: 3rem;
            height: 3rem;
            margin: 0 auto 1rem;
            opacity: 0.5;
        }

        /* Loading State */
        .loading {
            text-align: center;
            padding: 2rem;
            color: #6b7280;
        }

        .spinner {
            border: 3px solid #f3f4f6;
            border-top: 3px solid #3b82f6;
            border-radius: 50%;
            width: 2.5rem;
            height: 2.5rem;
            animation: spin 1s linear infinite;
            margin: 0 auto 1rem;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Contact Search Modal */
        .modal-overlay {
            display: none;
            position: fixed;
            inset: 0;
            background: rgba(0, 0, 0, 0.5);
            z-index: 50;
            align-items: flex-end;
        }

        .modal-overlay.active {
            display: flex;
        }

        .modal-content {
            background: white;
            width: 100%;
            max-height: 80vh;
            border-radius: 1rem 1rem 0 0;
            overflow: hidden;
        }

        .modal-header {
            padding: 1rem;
            border-bottom: 1px solid #e5e7eb;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .modal-header h3 {
            font-size: 1.125rem;
            font-weight: 600;
        }

        .close-modal {
            background: none;
            border: none;
            font-size: 1.5rem;
            color: #6b7280;
            cursor: pointer;
            padding: 0;
            width: 2rem;
            height: 2rem;
        }

        .modal-body {
            padding: 1rem;
        }

        .search-input-wrapper {
            position: relative;
            margin-bottom: 1rem;
        }

        .search-input-wrapper svg {
            position: absolute;
            left: 0.75rem;
            top: 50%;
            transform: translateY(-50%);
            width: 1.25rem;
            height: 1.25rem;
            color: #9ca3af;
        }

        .search-input {
            width: 100%;
            padding: 0.75rem 1rem 0.75rem 2.5rem;
            border: 1px solid #d1d5db;
            border-radius: 0.5rem;
            font-size: 1rem;
        }

        .search-input:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

        .contact-item {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            padding: 0.75rem;
            border: 1px solid #e5e7eb;
            border-radius: 0.5rem;
            margin-bottom: 0.5rem;
            cursor: pointer;
            transition: background 0.2s;
        }

        .contact-item:hover {
            background: #f9fafb;
        }

        .contact-avatar {
            width: 2.5rem;
            height: 2.5rem;
            background: #e5e7eb;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .contact-avatar svg {
            width: 1.5rem;
            height: 1.5rem;
            color: #6b7280;
        }

        .contact-details h4 {
            font-size: 0.9375rem;
            font-weight: 600;
            color: #111827;
        }

        .contact-details p {
            font-size: 0.875rem;
            color: #6b7280;
        }

        @media (min-width: 640px) {
            .modal-overlay {
                align-items: center;
                justify-content: center;
            }

            .modal-content {
                max-width: 28rem;
                border-radius: 0.75rem;
            }
        }
    </style>
</head>
<body>
    <!-- Header with Rachel Toggle -->
    <div class="header">
        <div class="header-content">
            <div class="header-top">
                <div>
                    <h1>RinglyPro CRM</h1>
                    <p style="font-size: 0.75rem; color: #6b7280; margin-top: 0.25rem;">
                        <%= clientName %>
                    </p>
                </div>
                <button class="logout-btn" onclick="logout()">
                    <svg style="width: 1rem; height: 1rem; display: inline; vertical-align: middle; margin-right: 0.25rem;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"/>
                    </svg>
                    Logout
                </button>
            </div>
            
            <!-- User Info -->
            <div class="user-info">
                <span class="username" id="username-display">Loading...</span>
            </div>
            
            <!-- Rachel AI Toggle Card -->
            <div class="rachel-card">
                <div class="rachel-toggle-row">
                    <div class="rachel-info">
                        <div class="status-dot active" id="rachelStatusDot"></div>
                        <div class="rachel-text">
                            <h3>Rachel AI Assistant</h3>
                            <p id="rachelStatusText">Checking status...</p>
                        </div>
                    </div>
                    <label class="toggle-switch">
                        <input type="checkbox" id="rachelToggle">
                        <span class="toggle-slider"></span>
                    </label>
                </div>
            </div>
        </div>
    </div>

    <!-- Quick Actions -->
    <div class="quick-actions">
        <div class="action-grid">
            <button class="action-btn btn-sms" onclick="openContactSearch('sms')">
                <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z"/>
                </svg>
                Send SMS
            </button>
            <button class="action-btn btn-call" onclick="openContactSearch('call')">
                <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"/>
                </svg>
                Make Call
            </button>
            <button class="action-btn btn-voice" id="voiceBtn" onclick="startVoiceCommand()">
                <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z"/>
                </svg>
                <span id="voiceText">Voice</span>
            </button>
        </div>
    </div>

    <!-- Navigation Tabs -->
    <div class="nav-tabs">
        <button class="nav-tab active" data-tab="today">
            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/>
            </svg>
            Today
        </button>
        <button class="nav-tab" data-tab="communications">
            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z"/>
            </svg>
            Messages
        </button>
    </div>

    <!-- Content Area -->
    <div class="content">
        <!-- Today's Appointments -->
        <div class="content-section active" id="todaySection">
            <div class="section-header">
                <h2>Today's Schedule</h2>
            </div>
            <div id="appointmentsList">
                <div class="loading">
                    <div class="spinner"></div>
                    <p>Loading appointments...</p>
                </div>
            </div>
        </div>

        <!-- Communications -->
        <div class="content-section" id="communicationsSection">
            <div class="section-header">
                <h2>Recent Communications</h2>
            </div>
            <div id="communicationsList">
                <div class="loading">
                    <div class="spinner"></div>
                    <p>Loading communications...</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Contact Search Modal -->
    <div class="modal-overlay" id="contactModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 id="modalTitle">Select Contact</h3>
                <button class="close-modal" onclick="closeContactSearch()">×</button>
            </div>
            <div class="modal-body">
                <div class="search-input-wrapper">
                    <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
                    </svg>
                    <input type="text" class="search-input" id="contactSearch" placeholder="Type name or phone number..." oninput="searchContacts()">
                </div>
                <div id="contactResults">
                    <p style="font-size: 0.875rem; font-weight: 500; color: #374151; margin-bottom: 0.5rem;">Recent Contacts</p>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Extract CLIENT_ID from JWT token in localStorage
        function getClientIdFromToken() {
            const token = localStorage.getItem('token');
            if (!token) {
                window.location.href = '/login';
                return null;
            }
            try {
                const payload = JSON.parse(atob(token.split('.')[1]));
                
                // Display username in header
                const usernameDisplay = document.getElementById('username-display');
                if (usernameDisplay && payload.firstName && payload.lastName) {
                    usernameDisplay.textContent = `Welcome, ${payload.firstName} ${payload.lastName}`;
                } else if (usernameDisplay && payload.email) {
                    usernameDisplay.textContent = `Welcome, ${payload.email}`;
                }
                
                return payload.clientId;
            } catch (error) {
                console.error('Invalid token:', error);
                window.location.href = '/login';
                return null;
            }
        }

        const CLIENT_ID = getClientIdFromToken();
        let currentAction = '';
        let dashboardData = null;
        let isListening = false;
        let authToken = localStorage.getItem('token');

        // Initialize on page load
        document.addEventListener('DOMContentLoaded', () => {
            // Check if token exists (additional client-side check)
            if (!authToken) {
                window.location.href = '/login';
                return;
            }
            
            loadRachelStatus();
            loadDashboard();
            setupTabSwitching();
            setupRachelToggle();
        });

        // Logout function
        function logout() {
            localStorage.removeItem('token');
            window.location.href = '/login';
        }

        // Helper function to make authenticated API calls
        async function authenticatedFetch(url, options = {}) {
            const headers = {
                ...options.headers,
                'Authorization': `Bearer ${authToken}`
            };
            
            const response = await fetch(url, { ...options, headers });
            
            // If unauthorized, redirect to login
            if (response.status === 401) {
                localStorage.removeItem('token');
                window.location.href = '/login';
                return null;
            }
            
            return response;
        }

        // Load Rachel Status
        async function loadRachelStatus() {
            try {
                const response = await authenticatedFetch(`/api/client/rachel-status/${CLIENT_ID}`);
                if (!response) return;
                
                const data = await response.json();
                
                if (data.success) {
                    updateRachelUI(data.client.rachel_enabled);
                    document.getElementById('rachelToggle').checked = data.client.rachel_enabled;
                }
            } catch (error) {
                console.error('Error loading Rachel status:', error);
                document.getElementById('rachelStatusText').textContent = 'Status unavailable';
            }
        }

        // Update Rachel UI
        function updateRachelUI(enabled) {
            const dot = document.getElementById('rachelStatusDot');
            const text = document.getElementById('rachelStatusText');
            
            if (enabled) {
                dot.classList.add('active');
                dot.classList.remove('inactive');
                text.textContent = 'Handling calls';
            } else {
                dot.classList.remove('active');
                dot.classList.add('inactive');
                text.textContent = 'Disabled';
            }
        }

        // Setup Rachel Toggle
        function setupRachelToggle() {
            document.getElementById('rachelToggle').addEventListener('change', async (e) => {
                const enabled = e.target.checked;
                
                try {
                    const response = await authenticatedFetch(`/api/client/rachel-status/${CLIENT_ID}`, {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ rachel_enabled: enabled })
                    });
                    
                    if (!response) return;
                    const data = await response.json();
                    
                    if (data.success) {
                        updateRachelUI(enabled);
                        // Show forwarding instructions
                        await showForwardingInstructions(enabled);
                    } else {
                        e.target.checked = !enabled;
                        alert('Failed to update Rachel status');
                    }
                } catch (error) {
                    console.error('Error toggling Rachel:', error);
                    e.target.checked = !enabled;
                    alert('Error updating Rachel status');
                }
            });
        }

        // Show forwarding instructions when toggle changes
        async function showForwardingInstructions(enabled) {
            try {
                // Detect carrier or ask user
                let carrier = localStorage.getItem('carrier_preference');
                
                if (!carrier) {
                    // Ask user to select carrier on first use
                    carrier = await promptForCarrier();
                    if (!carrier) return; // User cancelled
                    localStorage.setItem('carrier_preference', carrier);
                }
                
                // Get forwarding codes for selected carrier
                const response = await fetch(`/api/call-forwarding/setup/${carrier}/${CLIENT_ID}`);
                const data = await response.json();
                
                if (data.success && data.setup && data.setup.recommended) {
                    const code = enabled ? data.setup.recommended.activate : data.setup.recommended.deactivate;
                    const action = enabled ? 'ACTIVATE' : 'DEACTIVATE';
                    const businessPhone = data.client.business_phone;
                    const carrierName = data.carrier.name;
                    
                    const message = `
${action} CALL FORWARDING
Carrier: ${carrierName}

From your business phone (${businessPhone}), dial:

${code}

Press the CALL button and wait for confirmation tone.

${enabled ? 'Calls will now forward to Rachel AI after a few rings.' : 'Call forwarding to Rachel AI is now disabled.'}

(To change carrier, clear browser data)
                    `.trim();
                    
                    alert(message);
                }
            } catch (error) {
                console.error('Error getting forwarding instructions:', error);
            }
        }

        // Prompt user to select their carrier
        async function promptForCarrier() {
            const carriers = [
                { code: 'att', name: 'AT&T' },
                { code: 'verizon', name: 'Verizon' },
                { code: 'tmobile', name: 'T-Mobile' },
                { code: 'sprint', name: 'Sprint/T-Mobile' },
                { code: 'uscellular', name: 'US Cellular' },
                { code: 'boost', name: 'Boost Mobile' },
                { code: 'metro', name: 'Metro by T-Mobile' },
                { code: 'visible', name: 'Visible' },
                { code: 'cricketwireless', name: 'Cricket Wireless' }
            ];
            
            const carrierList = carriers.map((c, i) => `${i + 1}. ${c.name}`).join('\n');
            const selection = prompt(`Select your phone carrier:\n\n${carrierList}\n\nEnter number (1-${carriers.length}):`);
            
            if (!selection) return null;
            
            const index = parseInt(selection) - 1;
            if (index >= 0 && index < carriers.length) {
                return carriers[index].code;
            }
            
            alert('Invalid selection. Please try again.');
            return null;
        }

        // Load Dashboard Data
        async function loadDashboard() {
            try {
                const response = await authenticatedFetch(`/api/mobile/dashboard/today/${CLIENT_ID}`);
                if (!response) return;
                
                const data = await response.json();
                
                if (data.success) {
                    dashboardData = data.data;
                    renderAppointments(data.data.appointments);
                    renderCommunications(data.data.communications);
                }
            } catch (error) {
                console.error('Error loading dashboard:', error);
                document.getElementById('appointmentsList').innerHTML = '<div class="empty-state"><p>Error loading appointments</p></div>';
            }
        }

        // Render Appointments
        function renderAppointments(appointments) {
            const container = document.getElementById('appointmentsList');
            
            if (!appointments || appointments.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/>
                        </svg>
                        <p>No appointments scheduled for today</p>
                    </div>
                `;
                return;
            }

            container.innerHTML = appointments.map(apt => `
                <div class="appointment-card">
                    <div class="appointment-main">
                        <div class="appointment-info">
                            <h3>
                                ${apt.name}
                                ${apt.status === 'confirmed' ? '<svg style="width: 1rem; height: 1rem; color: #10b981;" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/></svg>' : ''}
                            </h3>
                            <p>${apt.notes || 'No notes'}</p>
                            <p style="font-size: 0.75rem;">${apt.phone}</p>
                        </div>
                        <div class="appointment-time">
                            <div class="time">${apt.time}</div>
                            <span class="status-badge status-${apt.status}">${apt.status}</span>
                        </div>
                    </div>
                    <div class="appointment-actions">
                        <button class="btn-text" onclick="sendSMS('${apt.phone}', '${apt.name}')">
                            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z"/>
                            </svg>
                            Text
                        </button>
                        <button class="btn-call-apt" onclick="makeCall('${apt.phone}', '${apt.name}')">
                            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"/>
                            </svg>
                            Call
                        </button>
                    </div>
                </div>
            `).join('');
        }

        // Render Communications
        function renderCommunications(communications) {
            const container = document.getElementById('communicationsList');
            
            if (!communications || communications.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z"/>
                        </svg>
                        <p>No recent communications</p>
                    </div>
                `;
                return;
            }

            container.innerHTML = communications.map(comm => `
                <div class="comm-card">
                    <div class="comm-card-content">
                        <div class="comm-icon ${comm.type}">
                            ${comm.type === 'sms' ? 
                                '<svg fill="none" stroke="currentColor" viewBox="0 0 24 24" style="width: 1.25rem; height: 1.25rem;"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z"/></svg>' :
                                '<svg fill="none" stroke="currentColor" viewBox="0 0 24 24" style="width: 1.25rem; height: 1.25rem;"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"/></svg>'
                            }
                        </div>
                        <div class="comm-info">
                            <div class="comm-header">
                                <h4>${comm.contact}</h4>
                                <span class="time">${comm.time}</span>
                            </div>
                            <p>${comm.type === 'sms' ? `"${comm.message}"` : `Call duration: ${comm.duration}`}</p>
                            <span class="comm-badge ${comm.direction}">${comm.direction === 'inbound' ? 'Received' : 'Sent'}</span>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        // Tab Switching
        function setupTabSwitching() {
            document.querySelectorAll('.nav-tab').forEach(tab => {
                tab.addEventListener('click', () => {
                    document.querySelectorAll('.nav-tab').forEach(t => t.classList.remove('active'));
                    document.querySelectorAll('.content-section').forEach(s => s.classList.remove('active'));
                    
                    tab.classList.add('active');
                    const tabName = tab.dataset.tab;
                    document.getElementById(`${tabName}Section`).classList.add('active');
                });
            });
        }

        // Contact Search
        function openContactSearch(action) {
            currentAction = action;
            const modal = document.getElementById('contactModal');
            const title = document.getElementById('modalTitle');
            
            title.textContent = action === 'sms' ? 'Send Message To' : 'Call Contact';
            modal.classList.add('active');
            
            // Load recent contacts from appointments
            if (dashboardData && dashboardData.appointments) {
                renderContactList(dashboardData.appointments);
            }
            
            setTimeout(() => document.getElementById('contactSearch').focus(), 100);
        }

        function closeContactSearch() {
            document.getElementById('contactModal').classList.remove('active');
            document.getElementById('contactSearch').value = '';
        }

        function renderContactList(contacts) {
            const container = document.getElementById('contactResults');
            const html = '<p style="font-size: 0.875rem; font-weight: 500; color: #374151; margin-bottom: 0.5rem;">Recent Contacts</p>' +
                contacts.map(contact => `
                    <div class="contact-item" onclick="selectContact('${contact.phone}', '${contact.name}')">
                        <div class="contact-avatar">
                            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                            </svg>
                        </div>
                        <div class="contact-details">
                            <h4>${contact.name}</h4>
                            <p>${contact.phone}</p>
                        </div>
                    </div>
                `).join('');
            
            container.innerHTML = html;
        }

        async function searchContacts() {
            const query = document.getElementById('contactSearch').value;
            
            if (query.length < 2) {
                if (dashboardData && dashboardData.appointments) {
                    renderContactList(dashboardData.appointments);
                }
                return;
            }

            try {
                const response = await authenticatedFetch(`/api/mobile/contacts/smart-search/${CLIENT_ID}?q=${encodeURIComponent(query)}`);
                if (!response) return;
                
                const data = await response.json();
                
                if (data.success && data.contacts.length > 0) {
                    const container = document.getElementById('contactResults');
                    container.innerHTML = '<p style="font-size: 0.875rem; font-weight: 500; color: #374151; margin-bottom: 0.5rem;">Search Results</p>' +
                        data.contacts.map(contact => `
                            <div class="contact-item" onclick="selectContact('${contact.phone}', '${contact.name}')">
                                <div class="contact-avatar">
                                    <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                                    </svg>
                                </div>
                                <div class="contact-details">
                                    <h4>${contact.name}</h4>
                                    <p>${contact.display_details}</p>
                                </div>
                            </div>
                        `).join('');
                }
            } catch (error) {
                console.error('Error searching contacts:', error);
            }
        }

        function selectContact(phone, name) {
            closeContactSearch();
            if (currentAction === 'sms') {
                sendSMS(phone, name);
            } else if (currentAction === 'call') {
                makeCall(phone, name);
            }
        }

        // Actions
        function sendSMS(phone, name) {
            alert(`Opening SMS to ${name} (${phone})\n\nIn production, this would open your SMS app or messaging interface.`);
        }

        function makeCall(phone, name) {
            window.location.href = `tel:${phone}`;
        }

        // Voice Command
        function startVoiceCommand() {
            if (isListening) return;
            
            isListening = true;
            const btn = document.getElementById('voiceBtn');
            const text = document.getElementById('voiceText');
            
            btn.classList.add('listening');
            text.textContent = 'Listening...';
            
            setTimeout(async () => {
                isListening = false;
                btn.classList.remove('listening');
                text.textContent = 'Voice';
                
                const transcript = prompt('Voice command (e.g., "text manuel about todays meeting"):');
                if (transcript) {
                    await processVoiceCommand(transcript);
                }
            }, 2000);
        }

        async function processVoiceCommand(transcript) {
            try {
                const response = await authenticatedFetch(`/api/mobile/voice/command/${CLIENT_ID}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ transcript })
                });
                
                if (!response) return;
                const data = await response.json();
                
                if (data.success && data.next_action) {
                    const action = data.next_action;
                    if (action.action === 'sms') {
                        const confirmed = confirm(`Send message to ${action.contact_name}?\n\nMessage: ${action.message}`);
                        if (confirmed) {
                            sendSMS(action.contact_phone, action.contact_name);
                        }
                    }
                }
            } catch (error) {
                console.error('Error processing voice command:', error);
                alert('Error processing voice command');
            }
        }
    </script>
</body>
</html>