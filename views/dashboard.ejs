import React, { useState, useEffect } from 'react';
import { Calendar, Phone, MessageSquare, Mic, Settings, Search, Plus, Clock, User, CheckCircle } from 'lucide-react';

const MobileCRMHybrid = () => {
  const [activeTab, setActiveTab] = useState('today');
  const [showContactSearch, setShowContactSearch] = useState(false);
  const [searchAction, setSearchAction] = useState(''); // 'sms' or 'call'
  const [rachelEnabled, setRachelEnabled] = useState(true);
  const [isListening, setIsListening] = useState(false);

  // Sample data - replace with your API calls
  const todaysAppointments = [
    { id: 1, time: '9:00 AM', name: 'Mike Johnson', phone: '555-0123', status: 'confirmed', notes: 'Initial consultation' },
    { id: 2, time: '2:30 PM', name: 'Sarah Wilson', phone: '555-0456', status: 'pending', notes: 'Follow-up call' },
    { id: 3, time: '4:00 PM', name: 'David Chen', phone: '555-0789', status: 'confirmed', notes: 'Project review' }
  ];

  const recentCommunications = [
    { id: 1, type: 'sms', contact: 'Mike Johnson', message: 'Thanks for the appointment!', time: '10 min ago', incoming: true },
    { id: 2, type: 'call', contact: 'Sarah Wilson', duration: '5 min', time: '1 hour ago', incoming: false },
    { id: 3, type: 'sms', contact: 'David Chen', message: 'Running 5 min late', time: '2 hours ago', incoming: true }
  ];

  // Voice command simulation
  const startVoiceCommand = () => {
    setIsListening(true);
    // Simulate voice recognition
    setTimeout(() => {
      setIsListening(false);
      // Example: "Text Mike about today's meeting"
      handleVoiceCommand("text mike about today's meeting");
    }, 2000);
  };

  const handleVoiceCommand = (command) => {
    // Simple command parsing - you can enhance this
    if (command.toLowerCase().includes('text') && command.toLowerCase().includes('mike')) {
      setSearchAction('sms');
      setShowContactSearch(true);
    }
  };

  // Main Header with Rachel Toggle
  const Header = () => (
    <div className="bg-white shadow-sm border-b sticky top-0 z-40">
      <div className="p-4">
        <div className="flex items-center justify-between mb-4">
          <h1 className="text-xl font-bold text-gray-900">RinglyPro CRM</h1>
          <button className="p-2 text-gray-600 hover:text-gray-900 rounded-full hover:bg-gray-100">
            <Settings className="w-5 h-5" />
          </button>
        </div>
        
        {/* Rachel Toggle - Prominent but Compact */}
        <div className="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg p-3 border border-blue-200">
          <div className="flex items-center justify-between">
            <div className="flex items-center">
              <div className={`w-3 h-3 rounded-full mr-3 ${rachelEnabled ? 'bg-green-500' : 'bg-red-500'}`}></div>
              <div>
                <p className="font-semibold text-gray-900 text-sm">Rachel AI</p>
                <p className="text-xs text-gray-600">
                  {rachelEnabled ? 'Handling calls' : 'Disabled'}
                </p>
              </div>
            </div>
            <label className="relative inline-flex items-center cursor-pointer">
              <input
                type="checkbox"
                checked={rachelEnabled}
                onChange={(e) => setRachelEnabled(e.target.checked)}
                className="sr-only peer"
              />
              <div className="w-9 h-5 bg-gray-200 peer-focus:outline-none peer-focus:ring-2 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-4 after:w-4 after:transition-all peer-checked:bg-blue-600"></div>
            </label>
          </div>
        </div>
      </div>
    </div>
  );

  // Quick Action Buttons
  const QuickActions = () => (
    <div className="px-4 py-3 bg-white border-b">
      <div className="grid grid-cols-3 gap-3">
        <button 
          onClick={() => { setSearchAction('sms'); setShowContactSearch(true); }}
          className="flex flex-col items-center p-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
        >
          <MessageSquare className="w-5 h-5 mb-1" />
          <span className="text-xs font-medium">Send SMS</span>
        </button>
        
        <button 
          onClick={() => { setSearchAction('call'); setShowContactSearch(true); }}
          className="flex flex-col items-center p-3 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors"
        >
          <Phone className="w-5 h-5 mb-1" />
          <span className="text-xs font-medium">Make Call</span>
        </button>
        
        <button 
          onClick={startVoiceCommand}
          className={`flex flex-col items-center p-3 text-white rounded-lg transition-colors ${
            isListening ? 'bg-red-500 animate-pulse' : 'bg-purple-500 hover:bg-purple-600'
          }`}
        >
          <Mic className="w-5 h-5 mb-1" />
          <span className="text-xs font-medium">
            {isListening ? 'Listening...' : 'Voice'}
          </span>
        </button>
      </div>
    </div>
  );

  // Navigation Tabs
  const NavigationTabs = () => (
    <div className="bg-white border-b">
      <div className="flex">
        {[
          { id: 'today', label: 'Today', icon: Calendar },
          { id: 'communications', label: 'Messages', icon: MessageSquare },
        ].map((tab) => {
          const Icon = tab.icon;
          return (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id)}
              className={`flex-1 py-3 px-4 text-sm font-medium transition-colors ${
                activeTab === tab.id
                  ? 'text-blue-600 border-b-2 border-blue-600 bg-blue-50'
                  : 'text-gray-600 hover:text-gray-900'
              }`}
            >
              <Icon className="w-4 h-4 inline mr-2" />
              {tab.label}
            </button>
          );
        })}
      </div>
    </div>
  );

  // Today's Appointments View
  const TodaysView = () => (
    <div className="p-4 space-y-3">
      <div className="flex items-center justify-between mb-4">
        <h2 className="text-lg font-semibold text-gray-900">Today's Schedule</h2>
        <button className="p-2 text-blue-600 hover:bg-blue-50 rounded-full">
          <Plus className="w-5 h-5" />
        </button>
      </div>
      
      {todaysAppointments.map((apt) => (
        <div key={apt.id} className="bg-white rounded-lg border shadow-sm overflow-hidden">
          <div className="p-4">
            <div className="flex items-start justify-between">
              <div className="flex-1">
                <div className="flex items-center mb-2">
                  <p className="font-semibold text-gray-900">{apt.name}</p>
                  {apt.status === 'confirmed' && (
                    <CheckCircle className="w-4 h-4 text-green-500 ml-2" />
                  )}
                  {apt.status === 'pending' && (
                    <Clock className="w-4 h-4 text-orange-500 ml-2" />
                  )}
                </div>
                <p className="text-sm text-gray-600 mb-1">{apt.notes}</p>
                <p className="text-xs text-gray-500">{apt.phone}</p>
              </div>
              <div className="text-right ml-4">
                <p className="font-medium text-blue-600 text-lg">{apt.time}</p>
                <span className={`inline-block px-2 py-1 rounded-full text-xs font-medium ${
                  apt.status === 'confirmed' 
                    ? 'bg-green-100 text-green-800' 
                    : 'bg-orange-100 text-orange-800'
                }`}>
                  {apt.status}
                </span>
              </div>
            </div>
          </div>
          
          {/* Quick Actions for each appointment */}
          <div className="bg-gray-50 px-4 py-2 flex space-x-2">
            <button className="flex items-center px-3 py-1 text-xs bg-blue-500 text-white rounded-full hover:bg-blue-600">
              <MessageSquare className="w-3 h-3 mr-1" />
              Text
            </button>
            <button className="flex items-center px-3 py-1 text-xs bg-green-500 text-white rounded-full hover:bg-green-600">
              <Phone className="w-3 h-3 mr-1" />
              Call
            </button>
          </div>
        </div>
      ))}
    </div>
  );

  // Communications View
  const CommunicationsView = () => (
    <div className="p-4 space-y-3">
      <h2 className="text-lg font-semibold text-gray-900 mb-4">Recent Communications</h2>
      
      {recentCommunications.map((comm) => (
        <div key={comm.id} className="bg-white rounded-lg border shadow-sm p-4">
          <div className="flex items-start space-x-3">
            <div className={`p-2 rounded-full ${
              comm.type === 'sms' ? 'bg-blue-100' : 'bg-green-100'
            }`}>
              {comm.type === 'sms' ? (
                <MessageSquare className={`w-4 h-4 ${comm.type === 'sms' ? 'text-blue-600' : 'text-green-600'}`} />
              ) : (
                <Phone className="w-4 h-4 text-green-600" />
              )}
            </div>
            
            <div className="flex-1">
              <div className="flex items-center justify-between mb-1">
                <p className="font-medium text-gray-900">{comm.contact}</p>
                <span className="text-xs text-gray-500">{comm.time}</span>
              </div>
              
              {comm.type === 'sms' ? (
                <p className="text-sm text-gray-600">"{comm.message}"</p>
              ) : (
                <p className="text-sm text-gray-600">Call duration: {comm.duration}</p>
              )}
              
              <div className="flex items-center mt-2">
                <span className={`text-xs px-2 py-1 rounded-full ${
                  comm.incoming 
                    ? 'bg-blue-100 text-blue-800' 
                    : 'bg-gray-100 text-gray-800'
                }`}>
                  {comm.incoming ? 'Received' : 'Sent'}
                </span>
              </div>
            </div>
          </div>
        </div>
      ))}
    </div>
  );

  // Smart Contact Search Modal
  const ContactSearchModal = () => {
    if (!showContactSearch) return null;
    
    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-end sm:items-center justify-center z-50">
        <div className="bg-white rounded-t-xl sm:rounded-lg w-full sm:w-full sm:max-w-md mx-4 max-h-[80vh] overflow-hidden">
          <div className="p-4 border-b">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-semibold">
                {searchAction === 'sms' ? 'Send Message To' : 'Call Contact'}
              </h3>
              <button 
                onClick={() => setShowContactSearch(false)}
                className="text-gray-500 hover:text-gray-700 text-xl"
              >
                ×
              </button>
            </div>
          </div>
          
          <div className="p-4">
            <div className="relative mb-4">
              <Search className="w-5 h-5 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
              <input
                type="text"
                placeholder="Type name or phone number..."
                className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                autoFocus
              />
            </div>
            
            {/* Quick suggestions from appointments */}
            <div className="space-y-2">
              <p className="text-sm font-medium text-gray-700 mb-2">Recent Contacts</p>
              {todaysAppointments.slice(0, 3).map((contact) => (
                <button
                  key={contact.id}
                  className="w-full p-3 text-left hover:bg-gray-50 rounded-lg border transition-colors"
                  onClick={() => {
                    // Handle contact selection
                    setShowContactSearch(false);
                    // Execute action (SMS or Call)
                  }}
                >
                  <div className="flex items-center">
                    <User className="w-8 h-8 bg-gray-200 rounded-full p-2 mr-3" />
                    <div>
                      <p className="font-medium text-gray-900">{contact.name}</p>
                      <p className="text-sm text-gray-600">{contact.phone}</p>
                    </div>
                  </div>
                </button>
              ))}
            </div>
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header with Rachel Toggle */}
      <Header />
      
      {/* Quick Actions */}
      <QuickActions />
      
      {/* Navigation */}
      <NavigationTabs />
      
      {/* Content Area */}
      <div className="pb-20"> {/* Extra padding for mobile */}
        {activeTab === 'today' && <TodaysView />}
        {activeTab === 'communications' && <CommunicationsView />}
      </div>
      
      {/* Contact Search Modal */}
      <ContactSearchModal />
    </div>
  );
};

export default MobileCRMHybrid;