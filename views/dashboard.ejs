<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RinglyPro CRM - Professional Customer Management</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link rel="manifest" href="/manifest.json">
    <meta name="theme-color" content="#2563eb">
    <style>
        :root {
            --primary-color: #2563eb;
            --secondary-color: #10b981;
            --background-color: #f3f4f6;
            --card-background: #ffffff;
            --text-primary: #111827;
            --text-secondary: #6b7280;
            --border-color: #e5e7eb;
        }

        [data-theme="dark"] {
            --primary-color: #3b82f6;
            --secondary-color: #10b981;
            --background-color: #111827;
            --card-background: #1f2937;
            --text-primary: #f9fafb;
            --text-secondary: #d1d5db;
            --border-color: #374151;
        }

        body {
            background-color: var(--background-color);
            color: var(--text-primary);
            transition: background-color 0.3s ease, color 0.3s ease;
        }

        .card {
            background-color: var(--card-background);
            border-color: var(--border-color);
            transition: all 0.3s ease;
        }

        .collapse-content {
            transition: all 0.3s ease-in-out;
            overflow: hidden;
        }
        .collapsed {
            max-height: 0;
            opacity: 0;
            padding-top: 0;
            padding-bottom: 0;
        }
        .expanded {
            max-height: 1000px;
            opacity: 1;
        }
        .collapse-btn {
            transition: transform 0.3s ease-in-out;
        }
        .collapsed .collapse-btn {
            transform: rotate(-90deg);
        }
        .section-header:hover {
            background-color: var(--background-color);
        }
        .border-3 {
            border-width: 3px;
        }
        
        /* Enhanced animations */
        .fade-in {
            animation: fadeIn 0.5s ease-in;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .slide-up {
            animation: slideUp 0.3s ease-out;
        }
        @keyframes slideUp {
            from { transform: translateY(100%); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }

        .card-hover {
            transition: all 0.3s ease;
        }
        .card-hover:hover {
            transform: translateY(-4px);
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        }

        /* Toast notifications */
        .toast-container {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1000;
            pointer-events: none;
        }

        .toast {
            background: white;
            border-radius: 8px;
            padding: 16px;
            margin-bottom: 12px;
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
            border-left: 4px solid;
            max-width: 400px;
            pointer-events: all;
            transform: translateX(400px);
            transition: transform 0.3s ease;
        }

        .toast.show {
            transform: translateX(0);
        }

        .toast.success { border-left-color: #10b981; }
        .toast.error { border-left-color: #ef4444; }
        .toast.warning { border-left-color: #f59e0b; }
        .toast.info { border-left-color: #3b82f6; }

        /* Mobile sticky action bar */
        .mobile-action-bar {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            background: var(--card-background);
            border-top: 1px solid var(--border-color);
            padding: 12px;
            z-index: 100;
            display: none;
            box-shadow: 0 -4px 6px -1px rgba(0, 0, 0, 0.1);
        }

        @media (max-width: 768px) {
            .mobile-action-bar {
                display: block;
            }
            body {
                padding-bottom: 80px;
            }
        }

        /* Chart container */
        .chart-container {
            position: relative;
            height: 200px;
            width: 100%;
        }

        /* KPI metrics styling */
        .kpi-card {
            background: linear-gradient(135deg, var(--primary-color), #1d4ed8);
            color: white;
        }

        /* Dark mode specific styles */
        [data-theme="dark"] .toast {
            background: var(--card-background);
            color: var(--text-primary);
            border-color: var(--border-color);
        }

        [data-theme="dark"] .mobile-action-bar {
            background: var(--card-background);
            border-color: var(--border-color);
        }

        /* Progress bars */
        .progress-bar {
            background: #e5e7eb;
            border-radius: 9999px;
            overflow: hidden;
        }

        .progress-fill {
            background: linear-gradient(90deg, #3b82f6, #10b981);
            height: 100%;
            transition: width 0.5s ease;
        }

        /* Loading skeletons */
        .skeleton {
            background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
            background-size: 200% 100%;
            animation: loading 1.5s infinite;
        }

        @keyframes loading {
            0% { background-position: 200% 0; }
            100% { background-position: -200% 0; }
        }

        [data-theme="dark"] .skeleton {
            background: linear-gradient(90deg, #374151 25%, #4b5563 50%, #374151 75%);
            background-size: 200% 100%;
        }

        /* Fix for voice indicator animation */
        .animate-pulse {
            animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
        }
        @keyframes pulse {
            0%, 100% {
                opacity: 1;
            }
            50% {
                opacity: .5;
            }
        }
    </style>
</head>
<body>
    <!-- Toast Container -->
    <div class="toast-container" id="toastContainer"></div>

    <!-- Header -->
    <header class="bg-blue-600 text-white shadow-lg sticky top-0 z-50 transition-colors duration-300">
        <div class="container mx-auto px-4 py-4">
            <div class="flex items-center justify-between">
                <div class="flex items-center space-x-4">
                    <!-- RinglyPro Logo -->
                    <div class="flex items-center space-x-2">
                        <div class="relative">
                            <img src="https://assets.cdn.filesafe.space/3lSeAHXNU9t09Hhp9oai/media/68a15064d7c434d8cab7644b.png" 
                                 alt="RinglyPro Logo" 
                                 class="w-16 h-16 object-contain bg-white rounded-lg shadow-lg p-2">
                        </div>
                        <div class="text-2xl font-bold">
                            <span class="text-white">Ringly</span><span class="text-blue-200">Pro</span>
                        </div>
                    </div>
                </div>
                <div class="flex items-center space-x-4">
                    <button onclick="exportContacts()" class="bg-green-500 hover:bg-green-600 text-white px-3 py-1 rounded-full text-sm transition duration-200">
                        <i class="fas fa-download mr-1"></i> Export
                    </button>
                    <button onclick="refreshData()" class="bg-blue-500 hover:bg-blue-600 text-white px-3 py-1 rounded-full text-sm transition duration-200">
                        <i class="fas fa-sync-alt mr-1"></i> Refresh
                    </button>
                    <button onclick="toggleAllSections()" class="bg-purple-500 hover:bg-purple-600 text-white px-3 py-1 rounded-full text-sm transition duration-200">
                        <i class="fas fa-expand-arrows-alt mr-1"></i> <span id="toggle-all-text">Expand All</span>
                    </button>
                    <button onclick="toggleDarkMode()" class="bg-gray-700 hover:bg-gray-800 text-white px-3 py-1 rounded-full text-sm transition duration-200">
                        <i id="theme-icon" class="fas fa-moon mr-1"></i> <span id="theme-text">Dark</span>
                    </button>
                </div>
            </div>
        </div>
        
        <!-- Quick Actions Menu Bar -->
        <div class="bg-blue-700 border-t border-blue-500">
            <div class="container mx-auto px-4 py-2">
                <div class="flex items-center justify-between flex-wrap gap-2">
                    <div class="flex items-center space-x-1 flex-wrap">
                        <!-- Contacts Dropdown -->
                        <div class="relative" id="contacts-dropdown">
                            <button onclick="toggleDropdown('contacts')" class="flex items-center px-3 py-2 rounded text-sm hover:bg-blue-600 transition duration-200">
                                <i class="fas fa-users mr-2"></i>Contacts
                                <i class="fas fa-chevron-down ml-1 text-xs"></i>
                            </button>
                            <div id="contacts-menu" class="hidden absolute left-0 mt-1 w-64 bg-white rounded-lg shadow-lg z-50 border card">
                                <div class="py-2">
                                    <button onclick="showQuickCreateContact()" class="w-full text-left px-4 py-2 hover:bg-gray-100 flex items-center transition duration-200" style="color: var(--text-primary);">
                                        <i class="fas fa-user-plus text-green-500 mr-3"></i>Create New Contact
                                    </button>
                                    <button onclick="showQuickSearchContact()" class="w-full text-left px-4 py-2 hover:bg-gray-100 flex items-center transition duration-200" style="color: var(--text-primary);">
                                        <i class="fas fa-search text-blue-500 mr-3"></i>Search Contact
                                    </button>
                                    <button onclick="showQuickUpdateEmail()" class="w-full text-left px-4 py-2 hover:bg-gray-100 flex items-center transition duration-200" style="color: var(--text-primary);">
                                        <i class="fas fa-envelope text-orange-500 mr-3"></i>Update Email
                                    </button>
                                    <button onclick="showQuickUpdatePhone()" class="w-full text-left px-4 py-2 hover:bg-gray-100 flex items-center transition duration-200" style="color: var(--text-primary);">
                                        <i class="fas fa-phone text-purple-500 mr-3"></i>Update Phone
                                    </button>
                                    <hr class="my-2">
                                    <button onclick="showImportModal()" class="w-full text-left px-4 py-2 hover:bg-gray-100 flex items-center transition duration-200" style="color: var(--text-primary);">
                                        <i class="fas fa-upload text-indigo-500 mr-3"></i>Import CSV
                                    </button>
                                </div>
                            </div>
                        </div>

                        <!-- Appointments Dropdown -->
                        <div class="relative" id="appointments-dropdown">
                            <button onclick="toggleDropdown('appointments')" class="flex items-center px-3 py-2 rounded text-sm hover:bg-blue-600 transition duration-200">
                                <i class="fas fa-calendar mr-2"></i>Appointments
                                <i class="fas fa-chevron-down ml-1 text-xs"></i>
                            </button>
                            <div id="appointments-menu" class="hidden absolute left-0 mt-1 w-64 bg-white rounded-lg shadow-lg z-50 border card">
                                <div class="py-2">
                                    <button onclick="showQuickCreateAppointment()" class="w-full text-left px-4 py-2 hover:bg-gray-100 flex items-center transition duration-200" style="color: var(--text-primary);">
                                        <i class="fas fa-calendar-plus text-green-500 mr-3"></i>Create Appointment
                                    </button>
                                    <button onclick="showTodaysAppointments()" class="w-full text-left px-4 py-2 hover:bg-gray-100 flex items-center transition duration-200" style="color: var(--text-primary);">
                                        <i class="fas fa-clock text-blue-500 mr-3"></i>Today's Appointments
                                    </button>
                                    <button onclick="showQuickUpdateAppointment()" class="w-full text-left px-4 py-2 hover:bg-gray-100 flex items-center transition duration-200" style="color: var(--text-primary);">
                                        <i class="fas fa-edit text-orange-500 mr-3"></i>Update Appointment
                                    </button>
                                </div>
                            </div>
                        </div>

                        <!-- Quick Actions -->
                        <button onclick="showQuickSMS()" class="flex items-center px-3 py-2 rounded text-sm hover:bg-blue-600 transition duration-200">
                            <i class="fas fa-sms mr-2"></i>Quick SMS
                        </button>
                        
                        <button onclick="showQuickEmail()" class="flex items-center px-3 py-2 rounded text-sm hover:bg-blue-600 transition duration-200">
                            <i class="fas fa-envelope mr-2"></i>Quick Email
                        </button>
                    </div>
                    
                    <!-- Voice Command Button -->
                    <button onclick="activateVoiceCommand()" class="flex items-center px-3 py-2 bg-green-600 hover:bg-green-700 rounded text-sm transition duration-200">
                        <i class="fas fa-microphone mr-2"></i>Voice Command
                    </button>
                </div>
            </div>
        </div>
    </header>

    <div class="container mx-auto px-4 py-8">
        <!-- KPI Metrics Bar -->
        <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8 fade-in">
            <div class="kpi-card rounded-lg p-4 text-center">
                <div class="text-2xl font-bold" id="kpi-total-contacts">0</div>
                <div class="text-sm opacity-90">Total Contacts</div>
                <div class="text-xs opacity-75 mt-1">
                    <i class="fas fa-arrow-up mr-1"></i><span id="contacts-growth">+5.2%</span>
                </div>
            </div>
            <div class="bg-green-500 rounded-lg p-4 text-center text-white">
                <div class="text-2xl font-bold" id="kpi-appointments">0</div>
                <div class="text-sm opacity-90">Appointments</div>
                <div class="text-xs opacity-75 mt-1">
                    <i class="fas fa-arrow-up mr-1"></i><span id="appointments-growth">+12.1%</span>
                </div>
            </div>
            <div class="bg-purple-500 rounded-lg p-4 text-center text-white">
                <div class="text-2xl font-bold" id="kpi-messages">0</div>
                <div class="text-sm opacity-90">Messages Sent</div>
                <div class="text-xs opacity-75 mt-1">
                    <i class="fas fa-arrow-up mr-1"></i><span id="messages-growth">+8.7%</span>
                </div>
            </div>
            <div class="bg-yellow-500 rounded-lg p-4 text-center text-white">
                <div class="text-2xl font-bold" id="kpi-conversion">89%</div>
                <div class="text-sm opacity-90">Response Rate</div>
                <div class="text-xs opacity-75 mt-1">
                    <i class="fas fa-arrow-up mr-1"></i><span id="response-growth">+3.1%</span>
                </div>
            </div>
        </div>

        <!-- Analytics Dashboard Card -->
        <div class="card rounded-lg shadow-lg border-l-4 border-indigo-500 mb-8 fade-in card-hover">
            <div class="section-header p-4 border-b flex items-center justify-between cursor-pointer transition duration-200" onclick="toggleSection('analytics-dashboard')" style="border-color: var(--border-color);">
                <div class="flex items-center space-x-3">
                    <div class="p-2 bg-indigo-100 rounded-lg">
                        <i class="fas fa-chart-line text-indigo-600 text-lg"></i>
                    </div>
                    <div>
                        <h3 class="text-lg font-semibold">Analytics Dashboard</h3>
                        <p class="text-sm" style="color: var(--text-secondary);">Business insights and performance metrics</p>
                    </div>
                </div>
                <button class="collapse-btn transition duration-200" style="color: var(--text-secondary);">
                    <i class="fas fa-chevron-down text-lg"></i>
                </button>
            </div>
            <div id="analytics-dashboard-content" class="collapse-content collapsed p-6">
                <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                    <!-- Activity Chart -->
                    <div class="card rounded-lg p-4">
                        <h4 class="font-semibold mb-4 flex items-center">
                            <i class="fas fa-chart-area mr-2 text-blue-500"></i>
                            Weekly Activity
                        </h4>
                        <div class="chart-container">
                            <canvas id="activityChart"></canvas>
                        </div>
                    </div>
                    
                    <!-- Communication Breakdown -->
                    <div class="card rounded-lg p-4">
                        <h4 class="font-semibold mb-4 flex items-center">
                            <i class="fas fa-chart-pie mr-2 text-green-500"></i>
                            Communication Channels
                        </h4>
                        <div class="chart-container">
                            <canvas id="communicationChart"></canvas>
                        </div>
                    </div>
                    
                    <!-- Performance Metrics -->
                    <div class="card rounded-lg p-4 lg:col-span-2">
                        <h4 class="font-semibold mb-4 flex items-center">
                            <i class="fas fa-tachometer-alt mr-2 text-purple-500"></i>
                            Performance Metrics
                        </h4>
                        <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
                            <div class="text-center">
                                <div class="text-sm font-medium mb-2">Response Time</div>
                                <div class="progress-bar h-2 mb-2">
                                    <div class="progress-fill" style="width: 85%"></div>
                                </div>
                                <div class="text-xs" style="color: var(--text-secondary);">2.3 minutes avg</div>
                            </div>
                            <div class="text-center">
                                <div class="text-sm font-medium mb-2">Client Satisfaction</div>
                                <div class="progress-bar h-2 mb-2">
                                    <div class="progress-fill" style="width: 92%"></div>
                                </div>
                                <div class="text-xs" style="color: var(--text-secondary);">4.6/5.0 rating</div>
                            </div>
                            <div class="text-center">
                                <div class="text-sm font-medium mb-2">Follow-up Rate</div>
                                <div class="progress-bar h-2 mb-2">
                                    <div class="progress-fill" style="width: 78%"></div>
                                </div>
                                <div class="text-xs" style="color: var(--text-secondary);">78% completed</div>
                            </div>
                            <div class="text-center">
                                <div class="text-sm font-medium mb-2">Conversion Rate</div>
                                <div class="progress-bar h-2 mb-2">
                                    <div class="progress-fill" style="width: 89%"></div>
                                </div>
                                <div class="text-xs" style="color: var(--text-secondary);">89% success</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Quick Action Modals -->
        
        <!-- Quick Create Contact Modal -->
        <div id="quickCreateContactModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
            <div class="card rounded-lg p-6 w-full max-w-md mx-4 slide-up">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold">Quick Create Contact</h3>
                    <button onclick="closeModal('quickCreateContactModal')" class="hover:text-gray-600 transition duration-200" style="color: var(--text-secondary);">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <form id="quickCreateForm" class="space-y-4">
                    <div class="grid grid-cols-2 gap-4">
                        <input type="text" id="quickFirstName" placeholder="First Name" required
                               class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 transition duration-200" style="border-color: var(--border-color); background-color: var(--card-background); color: var(--text-primary);">
                        <input type="text" id="quickLastName" placeholder="Last Name" required
                               class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 transition duration-200" style="border-color: var(--border-color); background-color: var(--card-background); color: var(--text-primary);">
                    </div>
                    <input type="email" id="quickEmail" placeholder="Email" required
                           class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 transition duration-200" style="border-color: var(--border-color); background-color: var(--card-background); color: var(--text-primary);">
                    <input type="tel" id="quickPhone" placeholder="Phone" required
                           class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 transition duration-200" style="border-color: var(--border-color); background-color: var(--card-background); color: var(--text-primary);">
                    <input type="text" id="quickCompany" placeholder="Company (optional)"
                           class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 transition duration-200" style="border-color: var(--border-color); background-color: var(--card-background); color: var(--text-primary);">
                    <div class="flex space-x-3">
                        <button type="submit" class="flex-1 bg-blue-500 hover:bg-blue-600 text-white px-4 py-3 rounded-lg transition duration-200">
                            <i class="fas fa-plus mr-2"></i>Create Contact
                        </button>
                        <button type="button" onclick="closeModal('quickCreateContactModal')" class="flex-1 bg-gray-300 hover:bg-gray-400 text-gray-700 px-4 py-3 rounded-lg transition duration-200">
                            Cancel
                        </button>
                    </div>
                </form>
                <div id="quickCreateStatus" class="mt-4 p-3 rounded hidden"></div>
            </div>
        </div>

        <!-- Quick Search Contact Modal -->
        <div id="quickSearchContactModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
            <div class="card rounded-lg p-6 w-full max-w-lg mx-4 slide-up">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold">Search Contact</h3>
                    <button onclick="closeModal('quickSearchContactModal')" class="hover:text-gray-600 transition duration-200" style="color: var(--text-secondary);">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="space-y-4">
                    <input type="text" id="quickSearchInput" placeholder="Search by name, email, or phone..."
                           class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 transition duration-200" style="border-color: var(--border-color); background-color: var(--card-background); color: var(--text-primary);">
                    <button onclick="performQuickSearch()" class="w-full bg-blue-500 hover:bg-blue-600 text-white px-4 py-3 rounded-lg transition duration-200">
                        <i class="fas fa-search mr-2"></i>Search
                    </button>
                    <div id="quickSearchResults" class="space-y-2 max-h-64 overflow-y-auto"></div>
                </div>
            </div>
        </div>

        <!-- Quick Update Email Modal -->
        <div id="quickUpdateEmailModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
            <div class="card rounded-lg p-6 w-full max-w-md mx-4 slide-up">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold">Update Contact Email</h3>
                    <button onclick="closeModal('quickUpdateEmailModal')" class="hover:text-gray-600 transition duration-200" style="color: var(--text-secondary);">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <form id="quickUpdateEmailForm" class="space-y-4">
                    <input type="text" id="quickUpdateEmailName" placeholder="Contact Name" required
                           class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 transition duration-200" style="border-color: var(--border-color); background-color: var(--card-background); color: var(--text-primary);">
                    <input type="email" id="quickUpdateEmailValue" placeholder="New Email Address" required
                           class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 transition duration-200" style="border-color: var(--border-color); background-color: var(--card-background); color: var(--text-primary);">
                    <div class="flex space-x-3">
                        <button type="submit" class="flex-1 bg-orange-500 hover:bg-orange-600 text-white px-4 py-3 rounded-lg transition duration-200">
                            <i class="fas fa-save mr-2"></i>Update Email
                        </button>
                        <button type="button" onclick="closeModal('quickUpdateEmailModal')" class="flex-1 bg-gray-300 hover:bg-gray-400 text-gray-700 px-4 py-3 rounded-lg transition duration-200">
                            Cancel
                        </button>
                    </div>
                </form>
                <div id="quickUpdateEmailStatus" class="mt-4 p-3 rounded hidden"></div>
            </div>
        </div>

        <!-- Quick Update Phone Modal -->
        <div id="quickUpdatePhoneModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
            <div class="card rounded-lg p-6 w-full max-w-md mx-4 slide-up">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold">Update Contact Phone</h3>
                    <button onclick="closeModal('quickUpdatePhoneModal')" class="hover:text-gray-600 transition duration-200" style="color: var(--text-secondary);">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <form id="quickUpdatePhoneForm" class="space-y-4">
                    <input type="text" id="quickUpdatePhoneName" placeholder="Contact Name" required
                           class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 transition duration-200" style="border-color: var(--border-color); background-color: var(--card-background); color: var(--text-primary);">
                    <input type="tel" id="quickUpdatePhoneValue" placeholder="New Phone Number" required
                           class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 transition duration-200" style="border-color: var(--border-color); background-color: var(--card-background); color: var(--text-primary);">
                    <div class="flex space-x-3">
                        <button type="submit" class="flex-1 bg-purple-500 hover:bg-purple-600 text-white px-4 py-3 rounded-lg transition duration-200">
                            <i class="fas fa-save mr-2"></i>Update Phone
                        </button>
                        <button type="button" onclick="closeModal('quickUpdatePhoneModal')" class="flex-1 bg-gray-300 hover:bg-gray-400 text-gray-700 px-4 py-3 rounded-lg transition duration-200">
                            Cancel
                        </button>
                    </div>
                </form>
                <div id="quickUpdatePhoneStatus" class="mt-4 p-3 rounded hidden"></div>
            </div>
        </div>

        <!-- Quick Create Appointment Modal -->
        <div id="quickCreateAppointmentModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
            <div class="card rounded-lg p-6 w-full max-w-md mx-4 slide-up">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold">Quick Create Appointment</h3>
                    <button onclick="closeModal('quickCreateAppointmentModal')" class="hover:text-gray-600 transition duration-200" style="color: var(--text-secondary);">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <form id="quickCreateAppointmentForm" class="space-y-4">
                    <input type="text" id="quickAppointmentTitle" placeholder="Appointment Title" required
                           class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 transition duration-200" style="border-color: var(--border-color); background-color: var(--card-background); color: var(--text-primary);">
                    <div>
                        <label class="block text-sm font-medium mb-2" style="color: var(--text-primary);">Select Contact</label>
                        <select id="quickAppointmentContactSelect" class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 transition duration-200" style="border-color: var(--border-color); background-color: var(--card-background); color: var(--text-primary);">
                            <option value="">Loading contacts...</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium mb-2" style="color: var(--text-primary);">Or Enter Contact Name</label>
                        <input type="text" id="quickAppointmentContact" placeholder="Contact Name"
                               class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 transition duration-200" style="border-color: var(--border-color); background-color: var(--card-background); color: var(--text-primary);">
                    </div>
                    <div class="grid grid-cols-2 gap-4">
                        <input type="date" id="quickAppointmentDate" required
                               class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 transition duration-200" style="border-color: var(--border-color); background-color: var(--card-background); color: var(--text-primary);">
                        <input type="time" id="quickAppointmentTime" required
                               class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 transition duration-200" style="border-color: var(--border-color); background-color: var(--card-background); color: var(--text-primary);">
                    </div>
                    <select id="quickAppointmentDuration" required
                            class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 transition duration-200" style="border-color: var(--border-color); background-color: var(--card-background); color: var(--text-primary);">
                        <option value="">Select Duration</option>
                        <option value="30">30 minutes</option>
                        <option value="60">1 hour</option>
                        <option value="90">1.5 hours</option>
                        <option value="120">2 hours</option>
                    </select>
                    <div class="flex space-x-3">
                        <button type="submit" class="flex-1 bg-green-500 hover:bg-green-600 text-white px-4 py-3 rounded-lg transition duration-200">
                            <i class="fas fa-calendar-plus mr-2"></i>Create Appointment
                        </button>
                        <button type="button" onclick="closeModal('quickCreateAppointmentModal')" class="flex-1 bg-gray-300 hover:bg-gray-400 text-gray-700 px-4 py-3 rounded-lg transition duration-200">
                            Cancel
                        </button>
                    </div>
                </form>
                <div id="quickCreateAppointmentStatus" class="mt-4 p-3 rounded hidden"></div>
            </div>
        </div>

        <!-- Quick SMS Modal -->
        <div id="quickSMSModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
            <div class="card rounded-lg p-6 w-full max-w-md mx-4 slide-up">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold">Quick SMS</h3>
                    <button onclick="closeModal('quickSMSModal')" class="hover:text-gray-600 transition duration-200" style="color: var(--text-secondary);">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <form id="quickSMSForm" class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium mb-2" style="color: var(--text-primary);">Select Contact</label>
                        <select id="quickSMSContactSelect" class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 transition duration-200" style="border-color: var(--border-color); background-color: var(--card-background); color: var(--text-primary);">
                            <option value="">Loading contacts...</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium mb-2" style="color: var(--text-primary);">Or Enter Phone Number</label>
                        <input type="text" id="quickSMSRecipient" placeholder="Contact Name or Phone Number"
                               class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 transition duration-200" style="border-color: var(--border-color); background-color: var(--card-background); color: var(--text-primary);">
                    </div>
                    <textarea id="quickSMSMessage" placeholder="Message..." rows="4" required
                              class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 transition duration-200" style="border-color: var(--border-color); background-color: var(--card-background); color: var(--text-primary);"></textarea>
                    <div class="flex space-x-3">
                        <button type="submit" class="flex-1 bg-green-500 hover:bg-green-600 text-white px-4 py-3 rounded-lg transition duration-200">
                            <i class="fas fa-paper-plane mr-2"></i>Send SMS
                        </button>
                        <button type="button" onclick="closeModal('quickSMSModal')" class="flex-1 bg-gray-300 hover:bg-gray-400 text-gray-700 px-4 py-3 rounded-lg transition duration-200">
                            Cancel
                        </button>
                    </div>
                </form>
                <div id="quickSMSStatus" class="mt-4 p-3 rounded hidden"></div>
            </div>
        </div>

        <!-- Quick Email Modal -->
        <div id="quickEmailModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
            <div class="card rounded-lg p-6 w-full max-w-md mx-4 slide-up">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold">Quick Email</h3>
                    <button onclick="closeModal('quickEmailModal')" class="hover:text-gray-600 transition duration-200" style="color: var(--text-secondary);">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <form id="quickEmailForm" class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium mb-2" style="color: var(--text-primary);">Select Contact</label>
                        <select id="quickEmailContactSelect" class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 transition duration-200" style="border-color: var(--border-color); background-color: var(--card-background); color: var(--text-primary);">
                            <option value="">Loading contacts...</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium mb-2" style="color: var(--text-primary);">Or Enter Email</label>
                        <input type="text" id="quickEmailRecipient" placeholder="Contact Name or Email"
                               class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 transition duration-200" style="border-color: var(--border-color); background-color: var(--card-background); color: var(--text-primary);">
                    </div>
                    <input type="text" id="quickEmailSubject" placeholder="Subject" required
                           class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 transition duration-200" style="border-color: var(--border-color); background-color: var(--card-background); color: var(--text-primary);">
                    <textarea id="quickEmailMessage" placeholder="Message..." rows="4" required
                              class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 transition duration-200" style="border-color: var(--border-color); background-color: var(--card-background); color: var(--text-primary);"></textarea>
                    <div class="flex space-x-3">
                        <button type="submit" class="flex-1 bg-blue-500 hover:bg-blue-600 text-white px-4 py-3 rounded-lg transition duration-200">
                            <i class="fas fa-envelope mr-2"></i>Send Email
                        </button>
                        <button type="button" onclick="closeModal('quickEmailModal')" class="flex-1 bg-gray-300 hover:bg-gray-400 text-gray-700 px-4 py-3 rounded-lg transition duration-200">
                            Cancel
                        </button>
                    </div>
                </form>
                <div id="quickEmailStatus" class="mt-4 p-3 rounded hidden"></div>
            </div>
        </div>

        <!-- Import CSV Modal -->
        <div id="importModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
            <div class="card rounded-lg p-6 w-full max-w-md mx-4 slide-up">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold">Import Contacts from CSV</h3>
                    <button onclick="closeModal('importModal')" class="hover:text-gray-600 transition duration-200" style="color: var(--text-secondary);">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="space-y-4">
                    <div class="border-2 border-dashed rounded-lg p-6 text-center transition duration-200" style="border-color: var(--border-color);" id="dropZone">
                        <i class="fas fa-cloud-upload-alt text-3xl mb-2" style="color: var(--text-secondary);"></i>
                        <p class="mb-2" style="color: var(--text-secondary);">Drag and drop your CSV file here, or</p>
                        <input type="file" id="csvFileInput" accept=".csv" class="hidden" onchange="handleFileSelect(event)">
                        <button onclick="document.getElementById('csvFileInput').click()" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded transition duration-200">
                            Choose File
                        </button>
                    </div>
                    <div id="fileInfo" class="hidden">
                        <div class="flex items-center justify-between p-3 rounded" style="background-color: var(--background-color);">
                            <span id="fileName" class="text-sm"></span>
                            <button onclick="removeFile()" class="text-red-500 hover:text-red-700">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    </div>
                    <button id="importBtn" onclick="importCSV()" disabled class="w-full bg-green-500 hover:bg-green-600 disabled:bg-gray-300 disabled:cursor-not-allowed text-white px-4 py-3 rounded-lg transition duration-200">
                        <i class="fas fa-upload mr-2"></i>Import Contacts
                    </button>
                    <div id="importStatus" class="p-3 rounded hidden"></div>
                </div>
            </div>
        </div>

        <!-- Voice Command Modal -->
        <div id="voiceCommandModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
            <div class="card rounded-lg p-6 w-full max-w-lg mx-4 slide-up">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold">Voice Command</h3>
                    <button onclick="closeModal('voiceCommandModal')" class="hover:text-gray-600 transition duration-200" style="color: var(--text-secondary);">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="text-center space-y-4">
                    <div id="voiceIndicator" class="w-20 h-20 bg-blue-500 rounded-full flex items-center justify-center text-white text-2xl mx-auto">
                        <i class="fas fa-microphone"></i>
                    </div>
                    <div id="voiceStatus" style="color: var(--text-secondary);">Click "Start Listening" to begin</div>
                    <div class="space-x-3">
                        <button id="startVoiceBtn" onclick="startVoiceListening()" class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-lg transition duration-200">
                            <i class="fas fa-microphone mr-2"></i>Start Listening
                        </button>
                        <button id="stopVoiceBtn" onclick="stopVoiceListening()" class="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-lg transition duration-200" disabled>
                            <i class="fas fa-stop mr-2"></i>Stop
                        </button>
                    </div>
                    <div id="voiceTranscript" class="p-4 rounded-lg min-h-16 text-left" style="background-color: var(--background-color);"></div>
                    <div id="voiceCommandStatus" class="p-3 rounded hidden"></div>
                </div>
            </div>
        </div>

        <!-- Main Display Cards - Mobile Responsive -->
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6 mb-8">
            <!-- Card 1: All Contacts Display -->
            <div class="card rounded-lg shadow-lg border-l-4 border-blue-500 min-h-[500px] flex flex-col card-hover fade-in">
                <div class="p-3 sm:p-4 border-b bg-blue-50 dark:bg-blue-900 dark:bg-opacity-20" style="border-color: var(--border-color);">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center">
                            <div class="p-2 sm:p-3 rounded-full bg-blue-500 text-white">
                                <i class="fas fa-users text-sm sm:text-base"></i>
                            </div>
                            <div class="ml-3">
                                <h3 class="text-sm sm:text-base font-semibold">All Contacts</h3>
                                <p class="text-xs sm:text-sm" style="color: var(--text-secondary);">Total: <span id="total-contacts" class="font-bold">0</span></p>
                            </div>
                        </div>
                        <button onclick="showQuickCreateContact()" class="bg-blue-500 hover:bg-blue-600 text-white px-2 py-1 rounded text-xs transition duration-200">
                            <i class="fas fa-plus"></i>
                        </button>
                    </div>
                </div>
                <div class="flex-1 overflow-hidden">
                    <div class="p-2 sm:p-3 border-b" style="border-color: var(--border-color);">
                        <input type="text" id="contacts-search" placeholder="Search contacts..." 
                               class="w-full p-2 text-xs border rounded focus:ring-2 focus:ring-blue-500 transition duration-200"
                               style="border-color: var(--border-color); background-color: var(--card-background); color: var(--text-primary);"
                               onkeyup="filterContacts(this.value)">
                    </div>
                    <div id="all-contacts-list" class="p-2 sm:p-3 space-y-2 overflow-y-auto max-h-[400px]">
                        <div class="text-center py-8">
                            <i class="fas fa-spinner fa-spin text-gray-400 text-xl"></i>
                            <p class="text-gray-500 mt-2 text-sm">Loading contacts...</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Card 2: Today's Appointments Display -->
            <div class="card rounded-lg shadow-lg border-l-4 border-green-500 min-h-[500px] flex flex-col card-hover fade-in">
                <div class="p-3 sm:p-4 border-b bg-green-50 dark:bg-green-900 dark:bg-opacity-20" style="border-color: var(--border-color);">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center">
                            <div class="p-2 sm:p-3 rounded-full bg-green-500 text-white">
                                <i class="fas fa-calendar-check text-sm sm:text-base"></i>
                            </div>
                            <div class="ml-3">
                                <h3 class="text-sm sm:text-base font-semibold">Today's Appointments</h3>
                                <p class="text-xs sm:text-sm" style="color: var(--text-secondary);">Count: <span id="appointments-today" class="font-bold">0</span></p>
                            </div>
                        </div>
                        <button onclick="showQuickCreateAppointment()" class="bg-green-500 hover:bg-green-600 text-white px-2 py-1 rounded text-xs transition duration-200">
                            <i class="fas fa-plus"></i>
                        </button>
                    </div>
                    <div class="mt-2">
                        <p class="text-xs" style="color: var(--text-secondary);" id="today-date-display"></p>
                    </div>
                </div>
                <div class="flex-1 overflow-hidden">
                    <div id="all-appointments-list" class="p-2 sm:p-3 space-y-2 overflow-y-auto max-h-[430px]">
                        <div class="text-center py-8">
                            <i class="fas fa-calendar text-gray-400 text-xl mb-2"></i>
                            <p class="text-gray-500 text-sm">No appointments today</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Card 3: Today's SMS Messages Display -->
            <div class="card rounded-lg shadow-lg border-l-4 border-purple-500 min-h-[500px] flex flex-col card-hover fade-in">
                <div class="p-3 sm:p-4 border-b bg-purple-50 dark:bg-purple-900 dark:bg-opacity-20" style="border-color: var(--border-color);">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center">
                            <div class="p-2 sm:p-3 rounded-full bg-purple-500 text-white">
                                <i class="fas fa-sms text-sm sm:text-base"></i>
                            </div>
                            <div class="ml-3">
                                <h3 class="text-sm sm:text-base font-semibold">SMS Today</h3>
                                <p class="text-xs sm:text-sm" style="color: var(--text-secondary);">Count: <span id="messages-today" class="font-bold">0</span></p>
                            </div>
                        </div>
                        <button onclick="showQuickSMS()" class="bg-purple-500 hover:bg-purple-600 text-white px-2 py-1 rounded text-xs transition duration-200">
                            <i class="fas fa-paper-plane"></i>
                        </button>
                    </div>
                </div>
                <div class="flex-1 overflow-hidden">
                    <div class="p-2 border-b" style="border-color: var(--border-color);">
                        <div class="flex space-x-1 text-xs">
                            <button onclick="filterMessages('all')" class="px-2 py-1 bg-gray-200 text-gray-700 rounded hover:bg-gray-300 transition" id="filter-all-messages">All</button>
                            <button onclick="filterMessages('sent')" class="px-2 py-1 bg-gray-100 text-gray-600 rounded hover:bg-gray-200 transition" id="filter-sent-messages">Sent</button>
                            <button onclick="filterMessages('received')" class="px-2 py-1 bg-gray-100 text-gray-600 rounded hover:bg-gray-200 transition" id="filter-received-messages">Received</button>
                        </div>
                    </div>
                    <div id="all-messages-list" class="p-2 sm:p-3 space-y-2 overflow-y-auto max-h-[400px]">
                        <div class="text-center py-8">
                            <i class="fas fa-sms text-gray-400 text-xl mb-2"></i>
                            <p class="text-gray-500 text-sm">No SMS messages today</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Card 4: Today's Calls Display -->
            <div class="card rounded-lg shadow-lg border-l-4 border-yellow-500 min-h-[500px] flex flex-col card-hover fade-in">
                <div class="p-3 sm:p-4 border-b bg-yellow-50 dark:bg-yellow-900 dark:bg-opacity-20" style="border-color: var(--border-color);">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center">
                            <div class="p-2 sm:p-3 rounded-full bg-yellow-500 text-white">
                                <i class="fas fa-phone text-sm sm:text-base"></i>
                            </div>
                            <div class="ml-3">
                                <h3 class="text-sm sm:text-base font-semibold">Calls Today</h3>
                                <p class="text-xs sm:text-sm" style="color: var(--text-secondary);">Count: <span id="calls-today" class="font-bold">0</span></p>
                            </div>
                        </div>
                        <button onclick="initiateCall()" class="bg-yellow-500 hover:bg-yellow-600 text-white px-2 py-1 rounded text-xs transition duration-200">
                            <i class="fas fa-phone"></i>
                        </button>
                    </div>
                </div>
                <div class="flex-1 overflow-hidden">
                    <div class="p-2 border-b" style="border-color: var(--border-color);">
                        <div class="flex space-x-1 text-xs">
                            <button onclick="filterCalls('all')" class="px-2 py-1 bg-gray-200 text-gray-700 rounded hover:bg-gray-300 transition" id="filter-all-calls">All</button>
                            <button onclick="filterCalls('incoming')" class="px-2 py-1 bg-gray-100 text-gray-600 rounded hover:bg-gray-200 transition" id="filter-incoming-calls">Incoming</button>
                            <button onclick="filterCalls('outgoing')" class="px-2 py-1 bg-gray-100 text-gray-600 rounded hover:bg-gray-200 transition" id="filter-outgoing-calls">Outgoing</button>
                            <button onclick="filterCalls('missed')" class="px-2 py-1 bg-gray-100 text-gray-600 rounded hover:bg-gray-200 transition" id="filter-missed-calls">Missed</button>
                        </div>
                    </div>
                    <div id="all-calls-list" class="p-2 sm:p-3 space-y-2 overflow-y-auto max-h-[400px]">
                        <div class="text-center py-8">
                            <i class="fas fa-phone text-gray-400 text-xl mb-2"></i>
                            <p class="text-gray-500 text-sm">No calls today</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Tools Section Header -->
        <div class="mb-6">
            <h2 class="text-2xl font-bold mb-2">
                <i class="fas fa-tools mr-2" style="color: var(--text-secondary);"></i>RinglyPro CRM Tools & Features
            </h2>
            <p style="color: var(--text-secondary);">Click on any tool below to expand and use its features</p>
        </div>

        <!-- Main Content -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <!-- Add New Contact Form -->
            <div class="card rounded-lg shadow-md border-l-4 border-blue-500 card-hover fade-in">
                <div class="section-header p-4 border-b flex items-center justify-between cursor-pointer transition duration-200" onclick="toggleSection('add-contact')" style="border-color: var(--border-color);">
                    <div class="flex items-center space-x-3">
                        <div class="p-2 bg-blue-100 rounded-lg">
                            <i class="fas fa-user-plus text-blue-600 text-lg"></i>
                        </div>
                        <div>
                            <h3 class="text-lg font-semibold">Add New Contact</h3>
                            <p class="text-sm" style="color: var(--text-secondary);">Create and save customer contacts to database</p>
                        </div>
                    </div>
                    <button class="collapse-btn transition duration-200" style="color: var(--text-secondary);">
                        <i class="fas fa-chevron-down text-lg"></i>
                    </button>
                </div>
                <div id="add-contact-content" class="collapse-content collapsed p-6">
                    <form id="contact-form" class="space-y-4">
                        <div class="grid grid-cols-2 gap-4">
                            <input type="text" id="firstName" placeholder="First Name" required
                                   class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-200" style="border-color: var(--border-color); background-color: var(--card-background); color: var(--text-primary);">
                            <input type="text" id="lastName" placeholder="Last Name" required
                                   class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-200" style="border-color: var(--border-color); background-color: var(--card-background); color: var(--text-primary);">
                        </div>
                        <input type="tel" id="phone" placeholder="+1234567890" required
                               class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-200" style="border-color: var(--border-color); background-color: var(--card-background); color: var(--text-primary);">
                        <input type="email" id="email" placeholder="email@example.com" required
                               class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-200" style="border-color: var(--border-color); background-color: var(--card-background); color: var(--text-primary);">
                        <textarea id="notes" placeholder="Notes (optional)" rows="3"
                                  class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-200" style="border-color: var(--border-color); background-color: var(--card-background); color: var(--text-primary);"></textarea>
                        <button type="submit" id="add-contact-btn" class="w-full bg-blue-500 hover:bg-blue-600 text-white px-4 py-3 rounded-lg transition duration-200">
                            <i class="fas fa-plus mr-2"></i>Add Contact to Database
                        </button>
                    </form>
                    <div id="contact-status" class="mt-4 p-4 rounded-lg hidden"></div>
                </div>
            </div>

            <!-- Contact Search -->
            <div class="card rounded-lg shadow-md border-l-4 border-purple-500 card-hover fade-in">
                <div class="section-header p-4 border-b flex items-center justify-between cursor-pointer transition duration-200" onclick="toggleSection('search-contacts')" style="border-color: var(--border-color);">
                    <div class="flex items-center space-x-3">
                        <div class="p-2 bg-purple-100 rounded-lg">
                            <i class="fas fa-search text-purple-600 text-lg"></i>
                        </div>
                        <div>
                            <h3 class="text-lg font-semibold">Search Contacts</h3>
                            <p class="text-sm" style="color: var(--text-secondary);">Find contacts by name, phone, or email address</p>
                        </div>
                    </div>
                    <button class="collapse-btn transition duration-200" style="color: var(--text-secondary);">
                        <i class="fas fa-chevron-down text-lg"></i>
                    </button>
                </div>
                <div id="search-contacts-content" class="collapse-content collapsed p-6">
                    <div class="space-y-4">
                        <input type="text" id="search-input" placeholder="Search by name, phone, or email..." 
                               class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent transition duration-200" style="border-color: var(--border-color); background-color: var(--card-background); color: var(--text-primary);">
                        <button onclick="searchContacts()" class="w-full bg-purple-500 hover:bg-purple-600 text-white px-4 py-3 rounded-lg transition duration-200">
                            <i class="fas fa-search mr-2"></i>Search Database
                        </button>
                    </div>
                    <div id="search-results" class="mt-4 space-y-2 hidden">
                        <h3 class="font-semibold">Search Results:</h3>
                        <div id="search-contacts-list" class="space-y-2"></div>
                    </div>
                </div>
            </div>

            <!-- Appointments Today -->
            <div class="card rounded-lg shadow-md border-l-4 border-green-500 card-hover fade-in">
                <div class="section-header p-4 border-b flex items-center justify-between cursor-pointer transition duration-200" onclick="toggleSection('appointments-today')" style="border-color: var(--border-color);">
                    <div class="flex items-center space-x-3">
                        <div class="p-2 bg-green-100 rounded-lg">
                            <i class="fas fa-calendar-alt text-green-600 text-lg"></i>
                        </div>
                        <div>
                            <h3 class="text-lg font-semibold">Today's Appointments</h3>
                            <p class="text-sm" style="color: var(--text-secondary);">View and manage appointments scheduled for today</p>
                        </div>
                    </div>
                    <button class="collapse-btn transition duration-200" style="color: var(--text-secondary);">
                        <i class="fas fa-chevron-down text-lg"></i>
                    </button>
                </div>
                <div id="appointments-today-content" class="collapse-content collapsed p-6">
                    <!-- Quick Appointment Form -->
                    <div class="mb-6 p-4 bg-green-50 rounded-lg border border-green-200" style="background-color: var(--background-color); border-color: var(--border-color);">
                        <h4 class="font-semibold mb-3" style="color: var(--text-primary);">
                            <i class="fas fa-plus-circle mr-2"></i>Quick Appointment Booking
                        </h4>
                        <form id="appointment-form" class="space-y-3">
                            <div class="grid grid-cols-2 gap-3">
                                <input type="text" id="apt-contact-name" placeholder="Contact Name" required
                                       class="w-full p-2 border rounded focus:ring-2 focus:ring-green-500 transition duration-200" style="border-color: var(--border-color); background-color: var(--card-background); color: var(--text-primary);">
                                <input type="tel" id="apt-contact-phone" placeholder="+1234567890" required
                                       class="w-full p-2 border rounded focus:ring-2 focus:ring-green-500 transition duration-200" style="border-color: var(--border-color); background-color: var(--card-background); color: var(--text-primary);">
                            </div>
                            <div class="grid grid-cols-2 gap-3">
                                <input type="time" id="apt-time" required
                                       class="w-full p-2 border rounded focus:ring-2 focus:ring-green-500 transition duration-200" style="border-color: var(--border-color); background-color: var(--card-background); color: var(--text-primary);">
                                <select id="apt-duration" required
                                        class="w-full p-2 border rounded focus:ring-2 focus:ring-green-500 transition duration-200" style="border-color: var(--border-color); background-color: var(--card-background); color: var(--text-primary);">
                                    <option value="">Duration</option>
                                    <option value="30">30 minutes</option>
                                    <option value="60">1 hour</option>
                                    <option value="90">1.5 hours</option>
                                    <option value="120">2 hours</option>
                                </select>
                            </div>
                            <input type="text" id="apt-purpose" placeholder="Appointment purpose" required
                                   class="w-full p-2 border rounded focus:ring-2 focus:ring-green-500 transition duration-200" style="border-color: var(--border-color); background-color: var(--card-background); color: var(--text-primary);">
                            <button type="submit" id="book-appointment-btn" class="w-full bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded transition duration-200">
                                <i class="fas fa-calendar-plus mr-2"></i>Book Appointment
                            </button>
                        </form>
                        <div id="appointment-status" class="mt-3 p-3 rounded hidden"></div>
                    </div>

                    <!-- Today's Appointments List -->
                    <div>
                        <div class="flex items-center justify-between mb-4">
                            <h4 class="font-semibold">
                                <i class="fas fa-clock mr-2"></i>Scheduled for Today
                            </h4>
                            <span class="text-sm" style="color: var(--text-secondary);" id="today-date"></span>
                        </div>
                        <div id="appointments-list" class="space-y-3">
                            <div class="text-center py-6" style="color: var(--text-secondary);">
                                <i class="fas fa-calendar text-2xl mb-2 opacity-50"></i>
                                <p>No appointments scheduled for today</p>
                                <p class="text-sm">Use the form above to book a new appointment</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Send Test SMS -->
            <div class="card rounded-lg shadow-md border-l-4 border-orange-500 card-hover fade-in">
                <div class="section-header p-4 border-b flex items-center justify-between cursor-pointer transition duration-200" onclick="toggleSection('send-sms')" style="border-color: var(--border-color);">
                    <div class="flex items-center space-x-3">
                        <div class="p-2 bg-orange-100 rounded-lg">
                            <i class="fas fa-paper-plane text-orange-600 text-lg"></i>
                        </div>
                        <div>
                            <h3 class="text-lg font-semibold">Send Test SMS</h3>
                            <p class="text-sm" style="color: var(--text-secondary);">Send SMS messages via Twilio integration</p>
                        </div>
                    </div>
                    <button class="collapse-btn transition duration-200" style="color: var(--text-secondary);">
                        <i class="fas fa-chevron-down text-lg"></i>
                    </button>
                </div>
                <div id="send-sms-content" class="collapse-content collapsed p-6">
                    <div class="space-y-4">
                        <input type="tel" id="test-phone" placeholder="+1234567890" 
                               class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent transition duration-200" style="border-color: var(--border-color); background-color: var(--card-background); color: var(--text-primary);">
                        <textarea id="test-message" placeholder="Enter your test message..." 
                                  class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent h-24 transition duration-200" style="border-color: var(--border-color); background-color: var(--card-background); color: var(--text-primary);"></textarea>
                        <button id="send-sms" class="w-full bg-orange-500 hover:bg-orange-600 text-white px-4 py-3 rounded-lg transition duration-200">
                            <i class="fas fa-paper-plane mr-2"></i>Send SMS via Twilio
                        </button>
                    </div>
                    <div id="sms-status" class="mt-4 p-4 rounded-lg hidden"></div>
                </div>
            </div>
        </div>

        <!-- Mobile Sticky Action Bar -->
        <div class="mobile-action-bar">
            <div class="flex justify-around items-center">
                <button onclick="showQuickCreateContact()" class="flex flex-col items-center p-2 text-blue-500">
                    <i class="fas fa-user-plus text-lg"></i>
                    <span class="text-xs mt-1">Contact</span>
                </button>
                <button onclick="showQuickSMS()" class="flex flex-col items-center p-2 text-purple-500">
                    <i class="fas fa-sms text-lg"></i>
                    <span class="text-xs mt-1">SMS</span>
                </button>
                <button onclick="showQuickCreateAppointment()" class="flex flex-col items-center p-2 text-green-500">
                    <i class="fas fa-calendar-plus text-lg"></i>
                    <span class="text-xs mt-1">Appointment</span>
                </button>
                <button onclick="activateVoiceCommand()" class="flex flex-col items-center p-2 text-orange-500">
                    <i class="fas fa-microphone text-lg"></i>
                    <span class="text-xs mt-1">Voice</span>
                </button>
            </div>
        </div>

        <!-- Large Logo at Bottom -->
        <div class="mt-16 mb-8 text-center fade-in">
            <div class="flex flex-col items-center space-y-4">
                <img src="https://assets.cdn.filesafe.space/3lSeAHXNU9t09Hhp9oai/media/68a15064d7c434d8cab7644b.png" 
                     alt="RinglyPro Logo" 
                     class="w-32 h-32 sm:w-40 sm:h-40 md:w-48 md:h-48 object-contain bg-white rounded-2xl shadow-2xl p-4">
                <div class="text-center">
                    <div class="text-3xl sm:text-4xl md:text-5xl font-bold mb-2">
                        <span class="text-blue-600">Ringly</span><span class="text-blue-400">Pro</span>
                    </div>
                    <p class="text-xl sm:text-2xl font-medium" style="color: var(--text-secondary);">Customer Relationship Management</p>
                    <p class="text-sm sm:text-base mt-2" style="color: var(--text-secondary);">Professional CRM Solution for Modern Businesses</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Enhanced JavaScript with all original functionality preserved -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        const apiUrl = window.location.origin; // For production use

        // Global state
        let contacts = [];
        let totalContacts = 0;
        let appointments = [];
        let todaysMessages = [];
        let todaysCalls = [];
        let filteredContacts = [];
        let messageFilter = 'all';
        let callFilter = 'all';
        let charts = {};

        // Dark Mode Management
        function initDarkMode() {
            const savedTheme = localStorage.getItem('theme') || 'light';
            document.documentElement.setAttribute('data-theme', savedTheme);
            updateThemeUI(savedTheme);
        }

        function toggleDarkMode() {
            const currentTheme = document.documentElement.getAttribute('data-theme');
            const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
            
            document.documentElement.setAttribute('data-theme', newTheme);
            localStorage.setItem('theme', newTheme);
            updateThemeUI(newTheme);
            
            // Update charts with new theme
            updateChartThemes();
            
            showToast(
                `Switched to ${newTheme} mode`, 
                'info', 
                `<i class="fas fa-${newTheme === 'dark' ? 'moon' : 'sun'}"></i>`
            );
        }

        function updateThemeUI(theme) {
            const themeIcon = document.getElementById('theme-icon');
            const themeText = document.getElementById('theme-text');
            
            if (theme === 'dark') {
                themeIcon.className = 'fas fa-sun mr-1';
                themeText.textContent = 'Light';
            } else {
                themeIcon.className = 'fas fa-moon mr-1';
                themeText.textContent = 'Dark';
            }
        }

        // Toast Notification System
        function showToast(message, type = 'info', icon = '') {
            const container = document.getElementById('toastContainer');
            const toast = document.createElement('div');
            
            toast.className = `toast ${type}`;
            toast.innerHTML = `
                <div class="flex items-center">
                    ${icon ? `<span class="mr-2">${icon}</span>` : ''}
                    <span class="flex-1">${message}</span>
                    <button onclick="this.parentElement.parentElement.remove()" class="ml-2 text-gray-400 hover:text-gray-600">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            `;
            
            container.appendChild(toast);
            
            // Trigger animation
            setTimeout(() => toast.classList.add('show'), 100);
            
            // Auto remove after 5 seconds
            setTimeout(() => {
                toast.classList.remove('show');
                setTimeout(() => toast.remove(), 300);
            }, 5000);
        }

        // Enhanced Analytics Dashboard
        function initCharts() {
            const isDark = document.documentElement.getAttribute('data-theme') === 'dark';
            const textColor = isDark ? '#d1d5db' : '#374151';
            const gridColor = isDark ? '#374151' : '#e5e7eb';

            // Activity Chart
            const activityCtx = document.getElementById('activityChart');
            if (activityCtx) {
                charts.activity = new Chart(activityCtx, {
                    type: 'line',
                    data: {
                        labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
                        datasets: [{
                            label: 'Contacts Added',
                            data: [12, 19, 3, 5, 2, 8, 15],
                            borderColor: '#3b82f6',
                            backgroundColor: 'rgba(59, 130, 246, 0.1)',
                            tension: 0.4
                        }, {
                            label: 'Appointments',
                            data: [5, 8, 12, 7, 14, 6, 9],
                            borderColor: '#10b981',
                            backgroundColor: 'rgba(16, 185, 129, 0.1)',
                            tension: 0.4
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                labels: { color: textColor }
                            }
                        },
                        scales: {
                            x: {
                                ticks: { color: textColor },
                                grid: { color: gridColor }
                            },
                            y: {
                                ticks: { color: textColor },
                                grid: { color: gridColor }
                            }
                        }
                    }
                });
            }

            // Communication Chart
            const commCtx = document.getElementById('communicationChart');
            if (commCtx) {
                charts.communication = new Chart(commCtx, {
                    type: 'doughnut',
                    data: {
                        labels: ['SMS', 'Email', 'Calls', 'Meetings'],
                        datasets: [{
                            data: [45, 25, 20, 10],
                            backgroundColor: ['#8b5cf6', '#06b6d4', '#f59e0b', '#10b981'],
                            borderWidth: 0
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'bottom',
                                labels: { color: textColor, padding: 20 }
                            }
                        }
                    }
                });
            }
        }

        function updateChartThemes() {
            const isDark = document.documentElement.getAttribute('data-theme') === 'dark';
            const textColor = isDark ? '#d1d5db' : '#374151';
            const gridColor = isDark ? '#374151' : '#e5e7eb';

            Object.values(charts).forEach(chart => {
                if (chart) {
                    // Update legend colors
                    chart.options.plugins.legend.labels.color = textColor;
                    
                    // Update scale colors if they exist
                    if (chart.options.scales) {
                        if (chart.options.scales.x) {
                            chart.options.scales.x.ticks.color = textColor;
                            chart.options.scales.x.grid.color = gridColor;
                        }
                        if (chart.options.scales.y) {
                            chart.options.scales.y.ticks.color = textColor;
                            chart.options.scales.y.grid.color = gridColor;
                        }
                    }
                    
                    chart.update();
                }
            });
        }

        // Enhanced KPI Updates
        function updateKPIs() {
            // Simulate real-time KPI updates
            document.getElementById('kpi-total-contacts').textContent = totalContacts;
            document.getElementById('kpi-appointments').textContent = appointments.length;
            document.getElementById('kpi-messages').textContent = todaysMessages.length;
            
            // Add some animation to the numbers
            animateNumber('kpi-total-contacts', totalContacts);
            animateNumber('kpi-appointments', appointments.length);
            animateNumber('kpi-messages', todaysMessages.length);
        }

        function animateNumber(elementId, finalValue) {
            const element = document.getElementById(elementId);
            const duration = 1000; // 1 second
            const steps = 30;
            const increment = finalValue / steps;
            let current = 0;
            
            const timer = setInterval(() => {
                current += increment;
                if (current >= finalValue) {
                    current = finalValue;
                    clearInterval(timer);
                }
                element.textContent = Math.floor(current);
            }, duration / steps);
        }

        // Export/Import Functionality
        function exportContacts() {
            if (contacts.length === 0) {
                showToast('No contacts to export', 'warning', '<i class="fas fa-exclamation-triangle"></i>');
                return;
            }

            const csvContent = convertToCSV(contacts);
            const blob = new Blob([csvContent], { type: 'text/csv' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `contacts-${new Date().toISOString().split('T')[0]}.csv`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);
            
            showToast(`Exported ${contacts.length} contacts`, 'success', '<i class="fas fa-download"></i>');
        }

        function convertToCSV(data) {
            const headers = ['firstName', 'lastName', 'email', 'phone', 'company', 'notes'];
            const csvRows = [headers.join(',')];
            
            data.forEach(contact => {
                const row = headers.map(header => {
                    const value = contact[header] || '';
                    return `"${value.toString().replace(/"/g, '""')}"`;
                });
                csvRows.push(row.join(','));
            });
            
            return csvRows.join('\n');
        }

        function showImportModal() {
            openModal('importModal');
            setupDragAndDrop();
        }

        function setupDragAndDrop() {
            const dropZone = document.getElementById('dropZone');
            
            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                dropZone.addEventListener(eventName, preventDefaults, false);
            });

            function preventDefaults(e) {
                e.preventDefault();
                e.stopPropagation();
            }

            ['dragenter', 'dragover'].forEach(eventName => {
                dropZone.addEventListener(eventName, highlight, false);
            });

            ['dragleave', 'drop'].forEach(eventName => {
                dropZone.addEventListener(eventName, unhighlight, false);
            });

            function highlight(e) {
                dropZone.classList.add('border-blue-500', 'bg-blue-50');
            }

            function unhighlight(e) {
                dropZone.classList.remove('border-blue-500', 'bg-blue-50');
            }

            dropZone.addEventListener('drop', handleDrop, false);

            function handleDrop(e) {
                const dt = e.dataTransfer;
                const files = dt.files;
                handleFiles(files);
            }
        }

        function handleFileSelect(event) {
            handleFiles(event.target.files);
        }

        function handleFiles(files) {
            if (files.length > 0) {
                const file = files[0];
                if (file.type === 'text/csv' || file.name.endsWith('.csv')) {
                    document.getElementById('fileName').textContent = file.name;
                    document.getElementById('fileInfo').classList.remove('hidden');
                    document.getElementById('importBtn').disabled = false;
                    window.selectedFile = file;
                } else {
                    showToast('Please select a CSV file', 'error', '<i class="fas fa-exclamation-circle"></i>');
                }
            }
        }

        function removeFile() {
            document.getElementById('fileInfo').classList.add('hidden');
            document.getElementById('importBtn').disabled = true;
            document.getElementById('csvFileInput').value = '';
            window.selectedFile = null;
        }

        async function importCSV() {
            if (!window.selectedFile) return;

            const button = document.getElementById('importBtn');
            const status = document.getElementById('importStatus');
            
            button.disabled = true;
            button.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Importing...';

            try {
                const text = await window.selectedFile.text();
                const lines = text.split('\n').filter(line => line.trim());
                const headers = lines[0].split(',').map(h => h.replace(/"/g, '').trim().toLowerCase());
                
                let imported = 0;
                for (let i = 1; i < lines.length; i++) {
                    const values = lines[i].split(',').map(v => v.replace(/"/g, '').trim());
                    
                    if (values.length >= 2) { // At least first and last name
                        const contact = {};
                        headers.forEach((header, index) => {
                            if (values[index]) {
                                contact[header] = values[index];
                            }
                        });
                        
                        // Call the actual API to create contact
                        try {
                            const response = await fetch('/api/contacts', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({
                                    firstName: contact.firstname || contact.first_name || contact.firstName || '',
                                    lastName: contact.lastname || contact.last_name || contact.lastName || '',
                                    email: contact.email || '',
                                    phone: contact.phone || contact.phone_number || '',
                                    notes: contact.notes || '',
                                    source: 'csv_import'
                                })
                            });
                            
                            if (response.ok) {
                                imported++;
                            }
                        } catch (error) {
                            console.error('Failed to import contact:', error);
                        }
                    }
                }

                status.className = 'p-3 rounded bg-green-100 text-green-800';
                status.innerHTML = `<i class="fas fa-check-circle mr-2"></i>Successfully imported ${imported} contacts!`;
                status.classList.remove('hidden');

                // Refresh contacts
                await loadContacts();
                
                showToast(`Imported ${imported} contacts`, 'success', '<i class="fas fa-upload"></i>');
                
                setTimeout(() => {
                    closeModal('importModal');
                }, 2000);

            } catch (error) {
                status.className = 'p-3 rounded bg-red-100 text-red-800';
                status.innerHTML = `<i class="fas fa-exclamation-circle mr-2"></i>Import failed: ${error.message}`;
                status.classList.remove('hidden');
            } finally {
                button.disabled = false;
                button.innerHTML = '<i class="fas fa-upload mr-2"></i>Import Contacts';
            }
        }

        // Update All Contacts Display (PRESERVED FROM ORIGINAL)
        function updateAllContactsDisplay() {
            const listElement = document.getElementById('all-contacts-list');
            if (!listElement) return;
            
            const displayContacts = filteredContacts.length > 0 ? filteredContacts : contacts;
            
            if (displayContacts.length === 0) {
                listElement.innerHTML = `
                    <div class="text-center py-8">
                        <i class="fas fa-users text-gray-400 text-xl mb-2"></i>
                        <p class="text-gray-500 text-sm">No contacts found</p>
                        <button onclick="showQuickCreateContact()" class="mt-2 bg-blue-500 text-white px-3 py-2 rounded text-sm">
                            <i class="fas fa-plus mr-1"></i> Add Contact
                        </button>
                    </div>
                `;
                return;
            }
            
            listElement.innerHTML = displayContacts.map(contact => `
                <div class="border border-gray-200 rounded-lg p-2 hover:bg-gray-50 transition duration-200">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center space-x-2">
                            <div class="w-6 h-6 sm:w-8 sm:h-8 bg-blue-500 rounded-full flex items-center justify-center text-white text-xs font-semibold">
                                ${contact.firstName ? contact.firstName.charAt(0) : ''}${contact.lastName ? contact.lastName.charAt(0) : ''}
                            </div>
                            <div class="flex-1 min-w-0">
                                <h4 class="font-semibold text-xs sm:text-sm truncate">${contact.fullName || contact.firstName + ' ' + contact.lastName}</h4>
                                <p class="text-xs text-gray-600 truncate">${contact.phone || ''}</p>
                                <p class="text-xs text-gray-500 truncate">${contact.email || ''}</p>
                            </div>
                        </div>
                        <div class="flex space-x-1">
                            <button onclick="callContact('${contact.phone}')" class="bg-blue-500 text-white px-1.5 py-1 rounded text-xs hover:bg-blue-600" title="Call">
                                <i class="fas fa-phone"></i>
                            </button>
                            <button onclick="textContact('${contact.phone}')" class="bg-green-500 text-white px-1.5 py-1 rounded text-xs hover:bg-green-600" title="Text">
                                <i class="fas fa-sms"></i>
                            </button>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        // Filter contacts by search query (PRESERVED FROM ORIGINAL)
        function filterContacts(query) {
            if (!query.trim()) {
                filteredContacts = [];
            } else {
                const searchTerm = query.toLowerCase();
                filteredContacts = contacts.filter(contact => 
                    (contact.fullName || '').toLowerCase().includes(searchTerm) ||
                    (contact.firstName || '').toLowerCase().includes(searchTerm) ||
                    (contact.lastName || '').toLowerCase().includes(searchTerm) ||
                    (contact.phone || '').toLowerCase().includes(searchTerm) ||
                    (contact.email || '').toLowerCase().includes(searchTerm)
                );
            }
            updateAllContactsDisplay();
        }
        
        // Update All Appointments Display (PRESERVED FROM ORIGINAL)
        function updateAllAppointmentsDisplay() {
            const listElement = document.getElementById('all-appointments-list');
            if (!listElement) return;
            
            if (appointments.length === 0) {
                listElement.innerHTML = `
                    <div class="text-center py-8">
                        <i class="fas fa-calendar text-gray-400 text-xl mb-2"></i>
                        <p class="text-gray-500 text-sm">No appointments today</p>
                    </div>
                `;
                return;
            }
            
            listElement.innerHTML = appointments.map(apt => `
                <div class="border border-gray-200 rounded-lg p-2 hover:bg-gray-50 transition duration-200">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center space-x-2">
                            <div class="text-center">
                                <div class="text-xs sm:text-sm font-bold text-green-600">${apt.time}</div>
                                <div class="text-xs text-gray-500">${apt.duration}min</div>
                            </div>
                            <div class="flex-1 min-w-0">
                                <h4 class="font-semibold text-xs sm:text-sm truncate">${apt.contact}</h4>
                                <p class="text-xs text-gray-600 truncate">${apt.purpose}</p>
                                <span class="inline-block px-1.5 py-0.5 rounded-full text-xs ${apt.status === 'confirmed' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'}">
                                    ${apt.status}
                                </span>
                            </div>
                        </div>
                        <div class="flex space-x-1">
                            <button onclick="callContact('${apt.phone}')" class="bg-green-500 text-white px-1.5 py-1 rounded text-xs hover:bg-green-600" title="Call">
                                <i class="fas fa-phone"></i>
                            </button>
                            <button onclick="textContact('${apt.phone}')" class="bg-blue-500 text-white px-1.5 py-1 rounded text-xs hover:bg-blue-600" title="Text">
                                <i class="fas fa-sms"></i>
                            </button>
                        </div>
                    </div>
                </div>
            `).join('');
        }
        
        // Update All Messages Display (PRESERVED FROM ORIGINAL)
        function updateAllMessagesDisplay() {
            const listElement = document.getElementById('all-messages-list');
            if (!listElement) return;
            
            let displayMessages = todaysMessages;
            if (messageFilter !== 'all') {
                displayMessages = todaysMessages.filter(msg => msg.direction === messageFilter || 
                    (messageFilter === 'sent' && msg.direction === 'outgoing') ||
                    (messageFilter === 'received' && msg.direction === 'incoming'));
            }
            
            if (displayMessages.length === 0) {
                listElement.innerHTML = `
                    <div class="text-center py-8">
                        <i class="fas fa-sms text-gray-400 text-xl mb-2"></i>
                        <p class="text-gray-500 text-sm">No SMS messages today</p>
                    </div>
                `;
                return;
            }
            
            listElement.innerHTML = displayMessages.map(msg => `
                <div class="border border-gray-200 rounded-lg p-2 hover:bg-gray-50 transition duration-200">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center space-x-2">
                            <div class="w-6 h-6 ${msg.direction === 'incoming' ? 'bg-purple-500' : 'bg-blue-500'} rounded-full flex items-center justify-center text-white text-xs">
                                <i class="fas ${msg.direction === 'incoming' ? 'fa-arrow-down' : 'fa-arrow-up'}"></i>
                            </div>
                            <div class="flex-1 min-w-0">
                                <h4 class="font-semibold text-xs sm:text-sm truncate">${msg.contact}</h4>
                                <p class="text-xs text-gray-600">${msg.time} • ${msg.phone}</p>
                                <p class="text-xs text-gray-700 mt-1 truncate">"${msg.message}"</p>
                            </div>
                        </div>
                        <button onclick="textContact('${msg.phone}')" class="bg-purple-500 text-white px-1.5 py-1 rounded text-xs hover:bg-purple-600" title="Reply">
                            <i class="fas fa-reply"></i>
                        </button>
                    </div>
                </div>
            `).join('');
        }

        // Filter messages (PRESERVED FROM ORIGINAL)
        function filterMessages(filter) {
            messageFilter = filter;
            
            // Update filter buttons
            document.querySelectorAll('[id^="filter-"][id$="-messages"]').forEach(btn => {
                btn.className = 'px-2 py-1 bg-gray-100 text-gray-600 rounded hover:bg-gray-200 transition';
            });
            document.getElementById(`filter-${filter}-messages`).className = 'px-2 py-1 bg-gray-200 text-gray-700 rounded hover:bg-gray-300 transition';
            
            updateAllMessagesDisplay();
        }
        
        // Update All Calls Display (PRESERVED FROM ORIGINAL)
        function updateAllCallsDisplay() {
            const listElement = document.getElementById('all-calls-list');
            if (!listElement) return;
            
            let displayCalls = todaysCalls;
            if (callFilter !== 'all') {
                displayCalls = todaysCalls.filter(call => 
                    call.direction === callFilter || call.status === callFilter);
            }
            
            if (displayCalls.length === 0) {
                listElement.innerHTML = `
                    <div class="text-center py-8">
                        <i class="fas fa-phone text-gray-400 text-xl mb-2"></i>
                        <p class="text-gray-500 text-sm">No calls today</p>
                    </div>
                `;
                return;
            }
            
            listElement.innerHTML = displayCalls.map(call => `
                <div class="border border-gray-200 rounded-lg p-2 hover:bg-gray-50 transition duration-200">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center space-x-2">
                            <div class="w-6 h-6 ${call.status === 'missed' ? 'bg-red-500' : call.direction === 'incoming' ? 'bg-green-500' : 'bg-yellow-500'} rounded-full flex items-center justify-center text-white text-xs">
                                <i class="fas ${call.status === 'missed' ? 'fa-phone-slash' : call.direction === 'incoming' ? 'fa-phone-volume' : 'fa-phone'}"></i>
                            </div>
                            <div class="flex-1 min-w-0">
                                <h4 class="font-semibold text-xs sm:text-sm truncate">${call.contact}</h4>
                                <p class="text-xs text-gray-600 truncate">${call.time} • ${call.phone}</p>
                                <p class="text-xs text-gray-500">Duration: ${call.duration}</p>
                                <span class="inline-block px-1.5 py-0.5 rounded-full text-xs ${call.status === 'missed' ? 'bg-red-100 text-red-800' : call.direction === 'incoming' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'}">
                                    ${call.direction} • ${call.status}
                                </span>
                            </div>
                        </div>
                        <div class="flex space-x-1">
                            <button onclick="callContact('${call.phone}')" class="bg-green-500 text-white px-1.5 py-1 rounded text-xs hover:bg-green-600" title="Call back">
                                <i class="fas fa-phone"></i>
                            </button>
                            <button onclick="textContact('${call.phone}')" class="bg-blue-500 text-white px-1.5 py-1 rounded text-xs hover:bg-blue-600" title="Text">
                                <i class="fas fa-sms"></i>
                            </button>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        // Filter calls (PRESERVED FROM ORIGINAL)
        function filterCalls(filter) {
            callFilter = filter;
            
            // Update filter buttons
            document.querySelectorAll('[id^="filter-"][id$="-calls"]').forEach(btn => {
                btn.className = 'px-2 py-1 bg-gray-100 text-gray-600 rounded hover:bg-gray-200 transition';
            });
            document.getElementById(`filter-${filter}-calls`).className = 'px-2 py-1 bg-gray-200 text-gray-700 rounded hover:bg-gray-300 transition';
            
            updateAllCallsDisplay();
        }

        // Initiate a call (PRESERVED FROM ORIGINAL)
        function initiateCall() {
            const phoneNumber = prompt('Enter phone number to call:');
            if (phoneNumber) {
                callContact(phoneNumber);
            }
        }

        // Collapsible section management - ALL COLLAPSED BY DEFAULT (PRESERVED FROM ORIGINAL)
        const sectionStates = {
            'add-contact': false,
            'search-contacts': false,
            'appointments-today': false,
            'send-sms': false,
            'analytics-dashboard': false
        };

        // Load saved section states from localStorage with error handling (PRESERVED FROM ORIGINAL)
        function loadSectionStates() {
            try {
                const saved = localStorage.getItem('crm-section-states');
                if (saved) {
                    Object.assign(sectionStates, JSON.parse(saved));
                }
                
                // Apply saved states with error checking - Default is COLLAPSED
                Object.keys(sectionStates).forEach(sectionId => {
                    const content = document.getElementById(`${sectionId}-content`);
                    
                    // Check if element exists before proceeding
                    if (!content) {
                        console.warn(`Section content not found: ${sectionId}-content`);
                        return;
                    }
                    
                    const header = content.parentElement.querySelector('.section-header');
                    
                    if (!header) {
                        console.warn(`Section header not found for: ${sectionId}`);
                        return;
                    }
                    
                    // Default behavior: COLLAPSED
                    if (sectionStates[sectionId]) {
                        content.classList.add('expanded');
                        content.classList.remove('collapsed');
                        header.classList.remove('collapsed');
                    } else {
                        content.classList.add('collapsed');
                        content.classList.remove('expanded');
                        header.classList.add('collapsed');
                    }
                });
                
                // Update toggle all button text - Default to "Expand All"
                const toggleAllText = document.getElementById('toggle-all-text');
                if (toggleAllText) {
                    const allExpanded = Object.values(sectionStates).every(state => state);
                    toggleAllText.textContent = allExpanded ? 'Collapse All' : 'Expand All';
                }
            } catch (error) {
                console.error('Error loading section states:', error);
                // Reset to default states if there's an error - ALL COLLAPSED
                Object.keys(sectionStates).forEach(key => {
                    sectionStates[key] = false;
                });
                // Ensure button shows "Expand All"
                const toggleAllText = document.getElementById('toggle-all-text');
                if (toggleAllText) {
                    toggleAllText.textContent = 'Expand All';
                }
            }
        }

        // Save section states to localStorage (PRESERVED FROM ORIGINAL)
        function saveSectionStates() {
            try {
                localStorage.setItem('crm-section-states', JSON.stringify(sectionStates));
            } catch (error) {
                console.error('Error saving section states:', error);
            }
        }

        // Toggle individual section (PRESERVED FROM ORIGINAL)
        function toggleSection(sectionId) {
            const content = document.getElementById(`${sectionId}-content`);
            const header = content?.parentElement?.querySelector('.section-header');
            
            if (!content || !header) {
                console.error(`Section elements not found for: ${sectionId}`);
                return;
            }
            
            if (content.classList.contains('expanded')) {
                content.classList.remove('expanded');
                content.classList.add('collapsed');
                header.classList.add('collapsed');
                sectionStates[sectionId] = false;
            } else {
                content.classList.remove('collapsed');
                content.classList.add('expanded');
                header.classList.remove('collapsed');
                sectionStates[sectionId] = true;
            }
            
            saveSectionStates();
            
            // Update toggle all button text
            const toggleAllText = document.getElementById('toggle-all-text');
            if (toggleAllText) {
                const allExpanded = Object.values(sectionStates).every(state => state);
                toggleAllText.textContent = allExpanded ? 'Collapse All' : 'Expand All';
            }
        }

        // Toggle all sections (PRESERVED FROM ORIGINAL)
        function toggleAllSections() {
            const allExpanded = Object.values(sectionStates).every(state => state);
            const newState = !allExpanded;
            
            Object.keys(sectionStates).forEach(sectionId => {
                const content = document.getElementById(`${sectionId}-content`);
                const header = content?.parentElement?.querySelector('.section-header');
                
                if (!content || !header) {
                    console.warn(`Section elements not found for: ${sectionId}`);
                    return;
                }
                
                if (newState) {
                    content.classList.remove('collapsed');
                    content.classList.add('expanded');
                    header.classList.remove('collapsed');
                } else {
                    content.classList.remove('expanded');
                    content.classList.add('collapsed');
                    header.classList.add('collapsed');
                }
                
                sectionStates[sectionId] = newState;
            });
            
            const toggleAllText = document.getElementById('toggle-all-text');
            if (toggleAllText) {
                toggleAllText.textContent = newState ? 'Collapse All' : 'Expand All';
            }
            saveSectionStates();
        }

        // Load contacts from database (PRESERVED FROM ORIGINAL)
        async function loadContacts() {
            try {
                console.log('Loading contacts from database...');
                const response = await fetch('/api/contacts?limit=50&sortBy=createdAt&sortOrder=DESC');
                const result = await response.json();
                
                if (result.success) {
                    contacts = result.data.contacts;
                    totalContacts = result.data.pagination.totalContacts;
                    updateContactCount();
                    updateAllContactsDisplay();
                    
                    // Update any open modal dropdowns
                    updateOpenModalDropdowns();
                    
                    console.log(`Loaded ${contacts.length} contacts`);
                } else {
                    throw new Error(result.error || 'Failed to load contacts');
                }
            } catch (error) {
                console.error('Error loading contacts:', error);
                // Show error in contacts display
                const contactsList = document.getElementById('all-contacts-list');
                if (contactsList) {
                    contactsList.innerHTML = `
                        <div class="text-center py-8 text-red-500">
                            <i class="fas fa-exclamation-triangle text-xl mb-2"></i>
                            <p class="text-sm">Error loading contacts: ${error.message}</p>
                            <button onclick="loadContacts()" class="mt-2 bg-blue-500 text-white px-3 py-2 rounded text-sm">
                                Try Again
                            </button>
                        </div>
                    `;
                }
            }
        }

        // Load appointments (PRESERVED FROM ORIGINAL)
        function loadAppointments() {
            const today = new Date();
            
            // Display today's date
            const todayDateEl = document.getElementById('today-date-display');
            if (todayDateEl) {
                todayDateEl.textContent = today.toLocaleDateString('en-US', {
                    weekday: 'long',
                    month: 'long',
                    day: 'numeric'
                });
            }

            // Enhanced simulated appointments for demo
            appointments = [
                {
                    id: 1,
                    time: '09:00',
                    duration: 60,
                    contact: 'John Doe',
                    phone: '+1234567890',
                    purpose: 'Sales consultation - New product demo',
                    status: 'confirmed'
                },
                {
                    id: 2,
                    time: '11:30',
                    duration: 30,
                    contact: 'Jane Smith',
                    phone: '+1987654321',
                    purpose: 'Follow-up meeting - Contract signing',
                    status: 'confirmed'
                },
                {
                    id: 3,
                    time: '14:30',
                    duration: 45,
                    contact: 'Mike Johnson',
                    phone: '+1555666777',
                    purpose: 'Technical support session',
                    status: 'pending'
                },
                {
                    id: 4,
                    time: '16:00',
                    duration: 30,
                    contact: 'Sarah Wilson',
                    phone: '+1444555666',
                    purpose: 'Project review meeting',
                    status: 'confirmed'
                }
            ];

            updateAllAppointmentsDisplay();
            updateAppointmentsCount();
        }

        // Load today's messages (PRESERVED FROM ORIGINAL)
        function loadTodaysMessages() {
            todaysMessages = [
                {
                    id: 1,
                    contact: 'John Doe',
                    phone: '+1234567890',
                    message: 'Thank you for the information about your services. Very helpful!',
                    time: '09:15 AM',
                    direction: 'incoming',
                    status: 'delivered'
                },
                {
                    id: 2,
                    contact: 'Jane Smith',
                    phone: '+1987654321',
                    message: 'Your appointment is confirmed for tomorrow at 2 PM. Looking forward to it!',
                    time: '11:30 AM',
                    direction: 'outgoing',
                    status: 'delivered'
                },
                {
                    id: 3,
                    contact: 'Mike Johnson',
                    phone: '+1555666777',
                    message: 'Can we reschedule our meeting to next week?',
                    time: '01:45 PM',
                    direction: 'incoming',
                    status: 'delivered'
                },
                {
                    id: 4,
                    contact: 'Sarah Wilson',
                    phone: '+1444555666',
                    message: 'Perfect! The project proposal looks great. When can we start?',
                    time: '03:20 PM',
                    direction: 'incoming',
                    status: 'delivered'
                },
                {
                    id: 5,
                    contact: 'David Brown',
                    phone: '+1333444555',
                    message: 'Reminder: Your consultation is scheduled for 4 PM today.',
                    time: '03:45 PM',
                    direction: 'outgoing',
                    status: 'delivered'
                }
            ];

            updateMessagesCount();
            updateAllMessagesDisplay();
        }

        // Load today's calls (PRESERVED FROM ORIGINAL)
        function loadTodaysCalls() {
            todaysCalls = [
                {
                    id: 1,
                    contact: 'John Doe',
                    phone: '+1234567890',
                    time: '08:45 AM',
                    duration: '05:23',
                    direction: 'incoming',
                    status: 'completed'
                },
                {
                    id: 2,
                    contact: 'Jane Smith',
                    phone: '+1987654321',
                    time: '10:15 AM',
                    duration: '12:45',
                    direction: 'outgoing',
                    status: 'completed'
                },
                {
                    id: 3,
                    contact: 'Unknown',
                    phone: '+1555999888',
                    time: '12:30 PM',
                    duration: '00:00',
                    direction: 'incoming',
                    status: 'missed'
                },
                {
                    id: 4,
                    contact: 'Mike Johnson',
                    phone: '+1555666777',
                    time: '02:15 PM',
                    duration: '08:30',
                    direction: 'outgoing',
                    status: 'completed'
                },
                {
                    id: 5,
                    contact: 'Sarah Wilson',
                    phone: '+1444555666',
                    time: '04:00 PM',
                    duration: '15:12',
                    direction: 'incoming',
                    status: 'completed'
                },
                {
                    id: 6,
                    contact: 'David Brown',
                    phone: '+1333444555',
                    time: '05:30 PM',
                    duration: '00:00',
                    direction: 'outgoing',
                    status: 'missed'
                }
            ];

            updateCallsCount();
            updateAllCallsDisplay();
        }

        // Update count displays (PRESERVED FROM ORIGINAL)
        function updateContactCount() {
            const contactCountEl = document.getElementById('total-contacts');
            if (contactCountEl) {
                contactCountEl.textContent = totalContacts;
            }
        }

        function updateAppointmentsCount() {
            const appointmentsEl = document.getElementById('appointments-today');
            if (appointmentsEl) {
                appointmentsEl.textContent = appointments.length;
            }
        }

        function updateMessagesCount() {
            const messagesEl = document.getElementById('messages-today');
            if (messagesEl) {
                messagesEl.textContent = todaysMessages.length;
            }
        }

        function updateCallsCount() {
            const callsEl = document.getElementById('calls-today');
            if (callsEl) {
                callsEl.textContent = todaysCalls.length;
            }
        }

        // Load all today's data (PRESERVED FROM ORIGINAL)
        function loadTodaysData() {
            loadTodaysMessages();
            loadTodaysCalls();
        }

        // Update dropdowns in any open modals (PRESERVED FROM ORIGINAL)
        function updateOpenModalDropdowns() {
            // Check if SMS modal is open
            if (!document.getElementById('quickSMSModal').classList.contains('hidden')) {
                populateContactDropdown('quickSMSContactSelect', true, false);
            }
            
            // Check if Email modal is open
            if (!document.getElementById('quickEmailModal').classList.contains('hidden')) {
                populateContactDropdown('quickEmailContactSelect', false, true);
            }
            
            // Check if Appointment modal is open
            if (!document.getElementById('quickCreateAppointmentModal').classList.contains('hidden')) {
                populateContactDropdown('quickAppointmentContactSelect', false, false);
            }
        }

        // Handle appointment form submission (PRESERVED FROM ORIGINAL)
        function setupAppointmentForm() {
            const form = document.getElementById('appointment-form');
            if (!form) return;
            
            form.addEventListener('submit', function(e) {
                e.preventDefault();
                
                const contactName = document.getElementById('apt-contact-name')?.value;
                const contactPhone = document.getElementById('apt-contact-phone')?.value;
                const time = document.getElementById('apt-time')?.value;
                const duration = document.getElementById('apt-duration')?.value;
                const purpose = document.getElementById('apt-purpose')?.value;
                
                if (!contactName || !contactPhone || !time || !duration || !purpose) {
                    showToast('Please fill in all fields', 'warning', '<i class="fas fa-exclamation-triangle"></i>');
                    return;
                }
                
                // Add new appointment (simulation)
                const newAppointment = {
                    id: appointments.length + 1,
                    time: time,
                    duration: parseInt(duration),
                    contact: contactName,
                    phone: contactPhone,
                    purpose: purpose,
                    status: 'confirmed'
                };
                
                appointments.push(newAppointment);
                appointments.sort((a, b) => a.time.localeCompare(b.time));
                
                // Update display
                updateAllAppointmentsDisplay();
                updateAppointmentsCount();
                
                // Show success message
                const status = document.getElementById('appointment-status');
                if (status) {
                    status.className = 'mt-3 p-3 rounded bg-green-100 text-green-800';
                    status.innerHTML = `<i class="fas fa-check-circle mr-2"></i>Appointment booked for ${contactName} at ${time}`;
                    status.classList.remove('hidden');
                    
                    // Clear form
                    form.reset();
                    
                    // Hide success message after 3 seconds
                    setTimeout(() => {
                        status.classList.add('hidden');
                    }, 3000);
                }
                
                showToast(`Appointment booked for ${contactName}`, 'success', '<i class="fas fa-calendar-plus"></i>');
            });
        }

        // Add Contact Form Handler (PRESERVED FROM ORIGINAL)
        function setupContactForm() {
            const form = document.getElementById('contact-form');
            if (!form) return;
            
            form.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const formData = {
                    firstName: document.getElementById('firstName')?.value,
                    lastName: document.getElementById('lastName')?.value,
                    phone: document.getElementById('phone')?.value,
                    email: document.getElementById('email')?.value,
                    notes: document.getElementById('notes')?.value,
                    source: 'dashboard'
                };

                const button = document.getElementById('add-contact-btn');
                const status = document.getElementById('contact-status');
                
                if (!button || !status) return;
                
                // Update button state
                button.disabled = true;
                button.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Adding to Database...';
                
                try {
                    const response = await fetch('/api/contacts', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(formData)
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        // Show success message
                        status.className = 'mt-4 p-4 rounded-lg bg-green-100 text-green-800';
                        status.innerHTML = `<i class="fas fa-check-circle mr-2"></i>${result.message}`;
                        status.classList.remove('hidden');
                        
                        // Clear form
                        form.reset();
                        
                        //
